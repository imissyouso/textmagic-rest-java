/*
 * TextMagic API Documentation
 * # Overview ## Introduction test <img style=\"float: right; margin-left: 10px; width: 100px;\" src=\"images/phone.png\"> TextMagic SMS API is a platform for building your own messaging app using our messaging infrastructure. It allows you to send and receive SMS text messages, query information about inbound and outbound messages, manage contacts, create templates (i.e. message formats and static texts) and schedule recurrent SMS messages as well as process bulk SMS messages. <button name=\"button\" onclick=\"http://www.google.com\" class=\"btn\">Try TextMagic API for Free</button>  ### Two Ways to Use TextMagic API * [REST API](https://www.textmagic.com/docs/api/start/) – get full access to TextMagic’s messaging gateway features * [Email to SMS API](https://www.textmagic.com/docs/api/send-email-to-sms/) – set up two-way SMS communication without the need to write any additional code  ### Code Libraries We have created a set of client libraries for the most popular programming languages (such as REST API Java and REST API PHP). These libraries allow you to integrate our API into your code in minutes. Just choose your preferred language to get started:  ## Getting started Get Started with the TextMagic REST API To start sending text messages using the TextMagic REST API, just follow these steps: 1. Generate the API credentials 1. Connect to our API endpoint This page provides all the information you need to get started. Here, we explain the following steps:  How to obtain the API credentials The API endpoint How the REST API works The next step How to obtain the API credentials  ### How to obtain the API credentials To start sending text messages, you need to create an API key. API keys are similar to an account password; the difference is that an API key only provides access to the API: you cannot log in to TextMagic Online using the API key.  Your program sends the login credentials with each API request as HTTP headers: `X-TM-Username` is your TextMagic username, while `X-TM-Key` is your API key.  How to obtain an API key:  1. Log in to TextMagic (or start a free trial if you haven’t registered yet). 1. Go to the API settings page. 1. Click the Add new API key button. 1. Enter an app name for this key. Note, it’s just a label, so pick any name. 1. Click Generate new key. 1. You should now see your new API key in the green notification banner above the table:  ![alt text](images/credentials.png)  > Note for API v1 users > V1 keys are not compatible with the V2 version of the TextMagic REST API, so you will need to generate a new API key to use the V2 endpoint.  ### The API endpoint The TextMagic REST API endpoint is: ``` https://rest.textmagic.com/api/v2 ``` All the URLs referenced in this documentation should use this base URL.  ### How the REST API works REST APIs use the HTTP protocol to send and receive messages. REST messages are usually encoded as JSON documents and are an improvement over older methods such as the XML based SOAP protocol. REST APIs use the same set of methods that web browsers use: POST, GET, PUT or DELETE. These correspond to the CRUD operations: create, read, update and delete. Often, REST URIs provide direct CRUD access to entities or collections of entities, for example: http://api.foo.com/people. In this instance, to delete a person’s endpoint, you might simply call the endpoint DELETE http://api.foo.com/people/{id}. REST makes these types of operations simple.  > Example > > Let’s take the entity most often used in messaging: contacts. Imagine you want to perform operations on your contacts list: well, it’s only a matter of calling the following endpoints: > * GET /api/v2/contacts (get all of your contacts) > * GET /api/v2/contacts/{id} (get a specific contact) > * POST /api/v2/contacts (create a new contact) > * PUT /api/v2/contacts/{id} (update an existing contact) > * DELETE /api/v2/contacts/{id} (delete an existing contact) It’s that simple! In fact, that’s all you need to do to manage the contacts in your TextMagic account!  ## Sandbox Sandbox is a tool to test TextMagic REST API requests without the need to install any applications or write any code. Here, we explain the following details about Sandbox: * The credentials area * Command documentation * How it works  <a href=\"\">Go to TextMagic Sandbox</a>  ### The credentials area To make requests using your TextMagic account, you need to enter your account username and your API key into the corresponding fields. You may also Save them in your browser or press Clear to erase them.  ![alt text](images/sandbox.png) 
 *
 * OpenAPI spec version: 2
 * Contact: support@textmagi.biz
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.textmagic.sdk.api;

import com.textmagic.sdk.ApiException;
import com.textmagic.sdk.model.BadRequestResponse;
import com.textmagic.sdk.model.BlockContactInputObject;
import com.textmagic.sdk.model.Contact;
import com.textmagic.sdk.model.CreateContactInputObject;
import com.textmagic.sdk.model.DeleteContactsByIdsInputObject;
import java.io.File;
import com.textmagic.sdk.model.GetBlockedContactsResponse;
import com.textmagic.sdk.model.GetContactsAutocompleteResponse;
import com.textmagic.sdk.model.GetContactsResponse;
import com.textmagic.sdk.model.GetFavouritesResponse;
import com.textmagic.sdk.model.GetUnsubscribersResponse;
import com.textmagic.sdk.model.NotFoundResponse;
import com.textmagic.sdk.model.ResourceLinkResponse;
import com.textmagic.sdk.model.SearchContactsResponse;
import com.textmagic.sdk.model.UnauthorizedResponse;
import com.textmagic.sdk.model.UnblockContactInputObject;
import com.textmagic.sdk.model.UnblockContactsBulkInputObject;
import com.textmagic.sdk.model.UnsubscribeContactInputObject;
import com.textmagic.sdk.model.UnsubscribedContact;
import com.textmagic.sdk.model.UpdateContactInputObject;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ContactsApi
 */
@Ignore
public class ContactsApiTest {

    private final ContactsApi api = new ContactsApi();

    
    /**
     * Block contact from inbound and outbound communication by phone number.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void blockContactTest() throws ApiException {
        BlockContactInputObject blockContactInputObject = null;
        Boolean xIgnoreNullValues = null;
        ResourceLinkResponse response = api.blockContact(blockContactInputObject, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Create a new contact from the submitted data.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContactTest() throws ApiException {
        CreateContactInputObject createContactInputObject = null;
        Boolean xIgnoreNullValues = null;
        ResourceLinkResponse response = api.createContact(createContactInputObject, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Delete all contacts.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAllContactsTest() throws ApiException {
        api.deleteAllContacts();

        // TODO: test validations
    }
    
    /**
     * Delete a single contact.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContactTest() throws ApiException {
        Integer id = null;
        api.deleteContact(id);

        // TODO: test validations
    }
    
    /**
     * Delete an avatar for the contact.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContactAvatarTest() throws ApiException {
        Integer id = null;
        api.deleteContactAvatar(id);

        // TODO: test validations
    }
    
    /**
     * Delete contact by given ID(s) or delete all contacts.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContactsByIdsTest() throws ApiException {
        DeleteContactsByIdsInputObject deleteContactsByIdsInputObject = null;
        Boolean xIgnoreNullValues = null;
        api.deleteContactsByIds(deleteContactsByIdsInputObject, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Get blocked contacts.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBlockedContactsTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        String query = null;
        String orderBy = null;
        String direction = null;
        GetBlockedContactsResponse response = api.getBlockedContacts(page, limit, query, orderBy, direction);

        // TODO: test validations
    }
    
    /**
     * Get a single contact.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContactTest() throws ApiException {
        Integer id = null;
        Contact response = api.getContact(id);

        // TODO: test validations
    }
    
    /**
     * Get a single contact by phone number.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContactByPhoneTest() throws ApiException {
        String phone = null;
        Contact response = api.getContactByPhone(phone);

        // TODO: test validations
    }
    
    /**
     * Check is that phone number blocked
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContactIfBlockedTest() throws ApiException {
        String phone = null;
        Contact response = api.getContactIfBlocked(phone);

        // TODO: test validations
    }
    
    /**
     * Get all user contacts.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContactsTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        Integer shared = null;
        String orderBy = null;
        String direction = null;
        GetContactsResponse response = api.getContacts(page, limit, shared, orderBy, direction);

        // TODO: test validations
    }
    
    /**
     * Get contacts autocomplete suggestions by given search term.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContactsAutocompleteTest() throws ApiException {
        String query = null;
        Integer limit = null;
        Integer lists = null;
        List<GetContactsAutocompleteResponse> response = api.getContactsAutocomplete(query, limit, lists);

        // TODO: test validations
    }
    
    /**
     * Get favorite contacts and lists.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFavouritesTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        String query = null;
        GetFavouritesResponse response = api.getFavourites(page, limit, query);

        // TODO: test validations
    }
    
    /**
     * Get a single unsubscribed contact.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUnsubscribedContactTest() throws ApiException {
        Integer id = null;
        UnsubscribedContact response = api.getUnsubscribedContact(id);

        // TODO: test validations
    }
    
    /**
     * Get all contact have unsubscribed from your communication.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUnsubscribersTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        GetUnsubscribersResponse response = api.getUnsubscribers(page, limit);

        // TODO: test validations
    }
    
    /**
     * Find user contacts by given parameters.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchContactsTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        Integer shared = null;
        String ids = null;
        Integer listId = null;
        Integer includeBlocked = null;
        String query = null;
        Integer local = null;
        String country = null;
        String orderBy = null;
        String direction = null;
        SearchContactsResponse response = api.searchContacts(page, limit, shared, ids, listId, includeBlocked, query, local, country, orderBy, direction);

        // TODO: test validations
    }
    
    /**
     * Unblock contact by phone number.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unblockContactTest() throws ApiException {
        UnblockContactInputObject unblockContactInputObject = null;
        Boolean xIgnoreNullValues = null;
        api.unblockContact(unblockContactInputObject, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Unblock several contacts by blocked contact ids or unblock all contacts
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unblockContactsBulkTest() throws ApiException {
        UnblockContactsBulkInputObject unblockContactsBulkInputObject = null;
        Boolean xIgnoreNullValues = null;
        api.unblockContactsBulk(unblockContactsBulkInputObject, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Unsubscribe contact from your communication by phone number.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unsubscribeContactTest() throws ApiException {
        UnsubscribeContactInputObject unsubscribeContactInputObject = null;
        Boolean xIgnoreNullValues = null;
        ResourceLinkResponse response = api.unsubscribeContact(unsubscribeContactInputObject, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Update existing contact.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContactTest() throws ApiException {
        UpdateContactInputObject updateContactInputObject = null;
        Integer id = null;
        Boolean xIgnoreNullValues = null;
        ResourceLinkResponse response = api.updateContact(updateContactInputObject, id, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Add an avatar for the contact.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadContactAvatarTest() throws ApiException {
        File image = null;
        Integer id = null;
        ResourceLinkResponse response = api.uploadContactAvatar(image, id);

        // TODO: test validations
    }
    
}
