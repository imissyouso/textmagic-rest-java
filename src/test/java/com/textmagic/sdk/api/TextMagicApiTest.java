/*
 * TextMagic API Documentation
 * # Overview ## Introduction test <img style=\"float: right; margin-left: 10px; width: 100px;\" src=\"images/phone.png\"> TextMagic SMS API is a platform for building your own messaging app using our messaging infrastructure. It allows you to send and receive SMS text messages, query information about inbound and outbound messages, manage contacts, create templates (i.e. message formats and static texts) and schedule recurrent SMS messages as well as process bulk SMS messages. <button name=\"button\" onclick=\"http://www.google.com\" class=\"btn\">Try TextMagic API for Free</button>  ### Two Ways to Use TextMagic API * [REST API](https://www.textmagic.com/docs/api/start/) – get full access to TextMagic’s messaging gateway features * [Email to SMS API](https://www.textmagic.com/docs/api/send-email-to-sms/) – set up two-way SMS communication without the need to write any additional code  ### Code Libraries We have created a set of client libraries for the most popular programming languages (such as REST API Java and REST API PHP). These libraries allow you to integrate our API into your code in minutes. Just choose your preferred language to get started:  ## Getting started Get Started with the TextMagic REST API To start sending text messages using the TextMagic REST API, just follow these steps: 1. Generate the API credentials 1. Connect to our API endpoint This page provides all the information you need to get started. Here, we explain the following steps:  How to obtain the API credentials The API endpoint How the REST API works The next step How to obtain the API credentials  ### How to obtain the API credentials To start sending text messages, you need to create an API key. API keys are similar to an account password; the difference is that an API key only provides access to the API: you cannot log in to TextMagic Online using the API key.  Your program sends the login credentials with each API request as HTTP headers: `X-TM-Username` is your TextMagic username, while `X-TM-Key` is your API key.  How to obtain an API key:  1. Log in to TextMagic (or start a free trial if you haven’t registered yet). 1. Go to the API settings page. 1. Click the Add new API key button. 1. Enter an app name for this key. Note, it’s just a label, so pick any name. 1. Click Generate new key. 1. You should now see your new API key in the green notification banner above the table:  ![alt text](images/credentials.png)  > Note for API v1 users > V1 keys are not compatible with the V2 version of the TextMagic REST API, so you will need to generate a new API key to use the V2 endpoint.  ### The API endpoint The TextMagic REST API endpoint is: ``` https://rest.textmagic.com/api/v2 ``` All the URLs referenced in this documentation should use this base URL.  ### How the REST API works REST APIs use the HTTP protocol to send and receive messages. REST messages are usually encoded as JSON documents and are an improvement over older methods such as the XML based SOAP protocol. REST APIs use the same set of methods that web browsers use: POST, GET, PUT or DELETE. These correspond to the CRUD operations: create, read, update and delete. Often, REST URIs provide direct CRUD access to entities or collections of entities, for example: http://api.foo.com/people. In this instance, to delete a person’s endpoint, you might simply call the endpoint DELETE http://api.foo.com/people/{id}. REST makes these types of operations simple.  > Example > > Let’s take the entity most often used in messaging: contacts. Imagine you want to perform operations on your contacts list: well, it’s only a matter of calling the following endpoints: > * GET /api/v2/contacts (get all of your contacts) > * GET /api/v2/contacts/{id} (get a specific contact) > * POST /api/v2/contacts (create a new contact) > * PUT /api/v2/contacts/{id} (update an existing contact) > * DELETE /api/v2/contacts/{id} (delete an existing contact) It’s that simple! In fact, that’s all you need to do to manage the contacts in your TextMagic account!  ## Sandbox Sandbox is a tool to test TextMagic REST API requests without the need to install any applications or write any code. Here, we explain the following details about Sandbox: * The credentials area * Command documentation * How it works  <a href=\"\">Go to TextMagic Sandbox</a>  ### The credentials area To make requests using your TextMagic account, you need to enter your account username and your API key into the corresponding fields. You may also Save them in your browser or press Clear to erase them.  ![alt text](images/sandbox.png) 
 *
 * OpenAPI spec version: 2
 * Contact: support@textmagi.biz
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.textmagic.sdk.api;

import com.textmagic.sdk.ApiException;
import com.textmagic.sdk.model.AssignContactsToListInputObject;
import com.textmagic.sdk.model.BadRequestResponse;
import java.math.BigDecimal;
import com.textmagic.sdk.model.BlockContactInputObject;
import com.textmagic.sdk.model.BulkSession;
import com.textmagic.sdk.model.BuyDedicatedNumberInputObject;
import com.textmagic.sdk.model.Chat;
import com.textmagic.sdk.model.CheckPhoneVerificationCodeInputObject;
import com.textmagic.sdk.model.ClearAndAssignContactsToListInputObject;
import com.textmagic.sdk.model.CloseChatsBulkInputObject;
import com.textmagic.sdk.model.Contact;
import com.textmagic.sdk.model.ContactNote;
import com.textmagic.sdk.model.Country;
import com.textmagic.sdk.model.CreateContactInputObject;
import com.textmagic.sdk.model.CreateContactNoteInputObject;
import com.textmagic.sdk.model.CreateCustomFieldInputObject;
import com.textmagic.sdk.model.CreateListInputObject;
import com.textmagic.sdk.model.CreatePushTokenInputObject;
import com.textmagic.sdk.model.CreateSurveyInputObject;
import com.textmagic.sdk.model.CreateSurveyNodeInputObject;
import com.textmagic.sdk.model.CreateTemplateInputObject;
import com.textmagic.sdk.model.DeleteChatMessagesBulkInputObject;
import com.textmagic.sdk.model.DeleteChatsBulkInputObject;
import com.textmagic.sdk.model.DeleteContacsFromListObject;
import com.textmagic.sdk.model.DeleteContactNotesBulkInputObject;
import com.textmagic.sdk.model.DeleteContactsByIdsInputObject;
import com.textmagic.sdk.model.DeleteInboundMessagesBulkInputObject;
import com.textmagic.sdk.model.DeleteListContactsBulkInputObject;
import com.textmagic.sdk.model.DeleteListsBulkInputObject;
import com.textmagic.sdk.model.DeleteMessageSessionsBulkInputObject;
import com.textmagic.sdk.model.DeleteOutboundMessagesBulkInputObject;
import com.textmagic.sdk.model.DeleteScheduledMessagesBulkInputObject;
import com.textmagic.sdk.model.DeleteTemplatesBulkInputObject;
import com.textmagic.sdk.model.DoAuthInputObject;
import com.textmagic.sdk.model.DoAuthResponse;
import com.textmagic.sdk.model.DoCarrierLookupResponse;
import com.textmagic.sdk.model.DoEmailLookupResponse;
import java.io.File;
import com.textmagic.sdk.model.GetAllBulkSessionsResponse;
import com.textmagic.sdk.model.GetAllChatsResponse;
import com.textmagic.sdk.model.GetAllInboundMessagesResponse;
import com.textmagic.sdk.model.GetAllMessageSessionsResponse;
import com.textmagic.sdk.model.GetAllOutboundMessagesResponse;
import com.textmagic.sdk.model.GetAllScheduledMessagesResponse;
import com.textmagic.sdk.model.GetAllTemplatesResponse;
import com.textmagic.sdk.model.GetAvailableDedicatedNumbersResponse;
import com.textmagic.sdk.model.GetAvailableSenderSettingOptionsResponse;
import com.textmagic.sdk.model.GetBalanceNotificationOptionsResponse;
import com.textmagic.sdk.model.GetBalanceNotificationSettingsResponse;
import com.textmagic.sdk.model.GetBlockedContactsResponse;
import com.textmagic.sdk.model.GetCallbackSettingsResponse;
import com.textmagic.sdk.model.GetChatMessagesResponse;
import com.textmagic.sdk.model.GetContactImportSessionProgressResponse;
import com.textmagic.sdk.model.GetContactNotesResponse;
import com.textmagic.sdk.model.GetContactsAutocompleteResponse;
import com.textmagic.sdk.model.GetContactsByListIdResponse;
import com.textmagic.sdk.model.GetContactsResponse;
import com.textmagic.sdk.model.GetCustomFieldsResponse;
import com.textmagic.sdk.model.GetFavouritesResponse;
import com.textmagic.sdk.model.GetForwardedCallsResponse;
import com.textmagic.sdk.model.GetInboundMessagesNotificationSettingsResponse;
import com.textmagic.sdk.model.GetInvoicesResponse;
import com.textmagic.sdk.model.GetListContactsIdsResponse;
import com.textmagic.sdk.model.GetListsOfContactResponse;
import com.textmagic.sdk.model.GetMessagePreviewResponse;
import com.textmagic.sdk.model.GetMessagePriceResponse;
import com.textmagic.sdk.model.GetMessagePricesResponse;
import com.textmagic.sdk.model.GetMessageSessionStatResponse;
import com.textmagic.sdk.model.GetMessagesBySessionIdResponse;
import com.textmagic.sdk.model.GetMessagingCountersResponse;
import com.textmagic.sdk.model.GetMessagingStatResponse;
import com.textmagic.sdk.model.GetOutboundMessagesHistoryResponse;
import com.textmagic.sdk.model.GetPushTokensResponse;
import com.textmagic.sdk.model.GetSenderIdsResponse;
import com.textmagic.sdk.model.GetSenderSettingsResponse;
import com.textmagic.sdk.model.GetSpendingStatResponse;
import com.textmagic.sdk.model.GetStateResponse;
import com.textmagic.sdk.model.GetSubaccountsWithTokensInputObject;
import com.textmagic.sdk.model.GetSubaccountsWithTokensResponse;
import com.textmagic.sdk.model.GetSurveyNodesResponse;
import com.textmagic.sdk.model.GetSurveysResponse;
import com.textmagic.sdk.model.GetUnreadMessagesTotalResponse;
import com.textmagic.sdk.model.GetUnsubscribersResponse;
import com.textmagic.sdk.model.GetUserDedicatedNumbersResponse;
import com.textmagic.sdk.model.GetUserListsResponse;
import com.textmagic.sdk.model.GetVersionsResponse;
import com.textmagic.sdk.model.Group;
import com.textmagic.sdk.model.InviteSubaccountInputObject;
import com.textmagic.sdk.model.MarkChatsReadBulkInputObject;
import com.textmagic.sdk.model.MarkChatsUnreadBulkInputObject;
import com.textmagic.sdk.model.MergeSurveyNodesInputObject;
import com.textmagic.sdk.model.MessageIn;
import com.textmagic.sdk.model.MessageOut;
import com.textmagic.sdk.model.MessageSession;
import com.textmagic.sdk.model.MessageTemplate;
import com.textmagic.sdk.model.MessagesIcs;
import com.textmagic.sdk.model.MuteChatInputObject;
import com.textmagic.sdk.model.MuteChatsBulkInputObject;
import com.textmagic.sdk.model.NotFoundResponse;
import com.textmagic.sdk.model.PingResponse;
import com.textmagic.sdk.model.ReopenChatsBulkInputObject;
import com.textmagic.sdk.model.RequestNewSubaccountTokenInputObject;
import com.textmagic.sdk.model.RequestSenderIdInputObject;
import com.textmagic.sdk.model.ResourceLinkResponse;
import com.textmagic.sdk.model.SearchChatsByIdsResponse;
import com.textmagic.sdk.model.SearchChatsByReceipentResponse;
import com.textmagic.sdk.model.SearchChatsResponse;
import com.textmagic.sdk.model.SearchContactsResponse;
import com.textmagic.sdk.model.SearchInboundMessagesResponse;
import com.textmagic.sdk.model.SearchListsResponse;
import com.textmagic.sdk.model.SearchOutboundMessagesResponse;
import com.textmagic.sdk.model.SearchScheduledMessagesResponse;
import com.textmagic.sdk.model.SearchTemplatesResponse;
import com.textmagic.sdk.model.SendMessageInputObject;
import com.textmagic.sdk.model.SendMessageResponse;
import com.textmagic.sdk.model.SenderId;
import com.textmagic.sdk.model.SetChatStatusInputObject;
import com.textmagic.sdk.model.Survey;
import com.textmagic.sdk.model.SurveyNode;
import com.textmagic.sdk.model.UnauthorizedResponse;
import com.textmagic.sdk.model.UnblockContactInputObject;
import com.textmagic.sdk.model.UnblockContactsBulkInputObject;
import com.textmagic.sdk.model.UnmuteChatsBulkInputObject;
import com.textmagic.sdk.model.UnsubscribeContactInputObject;
import com.textmagic.sdk.model.UnsubscribedContact;
import com.textmagic.sdk.model.UpdateBalanceNotificationSettingsInputObject;
import com.textmagic.sdk.model.UpdateCallbackSettingsInputObject;
import com.textmagic.sdk.model.UpdateChatDesktopNotificationSettingsInputObject;
import com.textmagic.sdk.model.UpdateContactInputObject;
import com.textmagic.sdk.model.UpdateContactNoteInputObject;
import com.textmagic.sdk.model.UpdateCurrentUserInputObject;
import com.textmagic.sdk.model.UpdateCurrentUserResponse;
import com.textmagic.sdk.model.UpdateCustomFieldInputObject;
import com.textmagic.sdk.model.UpdateCustomFieldValueInputObject;
import com.textmagic.sdk.model.UpdateInboundMessagesNotificationSettingsInputObject;
import com.textmagic.sdk.model.UpdateListObject;
import com.textmagic.sdk.model.UpdatePasswordInputObject;
import com.textmagic.sdk.model.UpdateSenderSettingInputObject;
import com.textmagic.sdk.model.UpdateSurveyInputObject;
import com.textmagic.sdk.model.UpdateSurveyNodeInputObject;
import com.textmagic.sdk.model.UpdateTemplateInputObject;
import com.textmagic.sdk.model.UploadMessageAttachmentResponse;
import com.textmagic.sdk.model.User;
import com.textmagic.sdk.model.UserCustomField;
import com.textmagic.sdk.model.UsersInbound;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TextMagicApi
 */
@Ignore
public class TextMagicApiTest {

    private final TextMagicApi api = new TextMagicApi();

    
    /**
     * Assign contacts to the specified list.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void assignContactsToListTest() throws ApiException {
        AssignContactsToListInputObject assignContactsToListInputObject = null;
        Integer id = null;
        ResourceLinkResponse response = api.assignContactsToList(assignContactsToListInputObject, id);

        // TODO: test validations
    }
    
    /**
     * Block contact from inbound and outbound communication by phone number.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void blockContactTest() throws ApiException {
        BlockContactInputObject blockContactInputObject = null;
        Boolean xIgnoreNullValues = null;
        ResourceLinkResponse response = api.blockContact(blockContactInputObject, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Buy a dedicated number and assign it to the specified account.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void buyDedicatedNumberTest() throws ApiException {
        BuyDedicatedNumberInputObject buyDedicatedNumberInputObject = null;
        Boolean xIgnoreNullValues = null;
        api.buyDedicatedNumber(buyDedicatedNumberInputObject, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Cancel a survey.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelSurveyTest() throws ApiException {
        Integer id = null;
        ResourceLinkResponse response = api.cancelSurvey(id);

        // TODO: test validations
    }
    
    /**
     * Check user phone verification code
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void checkPhoneVerificationCodeTest() throws ApiException {
        CheckPhoneVerificationCodeInputObject checkPhoneVerificationCodeInputObject = null;
        Boolean xIgnoreNullValues = null;
        api.checkPhoneVerificationCode(checkPhoneVerificationCodeInputObject, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Reset list members to the specified contacts.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clearAndAssignContactsToListTest() throws ApiException {
        ClearAndAssignContactsToListInputObject clearAndAssignContactsToListInputObject = null;
        Integer id = null;
        ResourceLinkResponse response = api.clearAndAssignContactsToList(clearAndAssignContactsToListInputObject, id);

        // TODO: test validations
    }
    
    /**
     * Close chats by chat ids or close all chats
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void closeChatsBulkTest() throws ApiException {
        CloseChatsBulkInputObject closeChatsBulkInputObject = null;
        Boolean xIgnoreNullValues = null;
        api.closeChatsBulk(closeChatsBulkInputObject, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Close all chats that have no unread messages.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void closeReadChatsTest() throws ApiException {
        api.closeReadChats();

        // TODO: test validations
    }
    
    /**
     * Close subaccount.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void closeSubaccountTest() throws ApiException {
        Integer id = null;
        api.closeSubaccount(id);

        // TODO: test validations
    }
    
    /**
     * Create a new contact from the submitted data.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContactTest() throws ApiException {
        CreateContactInputObject createContactInputObject = null;
        Boolean xIgnoreNullValues = null;
        ResourceLinkResponse response = api.createContact(createContactInputObject, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Create a new contact note.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContactNoteTest() throws ApiException {
        CreateContactNoteInputObject createContactNoteInputObject = null;
        Integer id = null;
        Boolean xIgnoreNullValues = null;
        ResourceLinkResponse response = api.createContactNote(createContactNoteInputObject, id, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Create a new custom field from the submitted data.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCustomFieldTest() throws ApiException {
        CreateCustomFieldInputObject createCustomFieldInputObject = null;
        Boolean xIgnoreNullValues = null;
        ResourceLinkResponse response = api.createCustomField(createCustomFieldInputObject, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Create a new list from the submitted data.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createListTest() throws ApiException {
        CreateListInputObject createListInputObject = null;
        Boolean xIgnoreNullValues = null;
        ResourceLinkResponse response = api.createList(createListInputObject, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Add or update a device token.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPushTokenTest() throws ApiException {
        CreatePushTokenInputObject createPushTokenInputObject = null;
        Boolean xIgnoreNullValues = null;
        api.createPushToken(createPushTokenInputObject, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Create a new survey from the submitted data.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSurveyTest() throws ApiException {
        CreateSurveyInputObject createSurveyInputObject = null;
        Boolean xIgnoreNullValues = null;
        ResourceLinkResponse response = api.createSurvey(createSurveyInputObject, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Create a new node from the submitted data.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSurveyNodeTest() throws ApiException {
        CreateSurveyNodeInputObject createSurveyNodeInputObject = null;
        Integer id = null;
        Boolean xIgnoreNullValues = null;
        ResourceLinkResponse response = api.createSurveyNode(createSurveyNodeInputObject, id, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Create a new template from the submitted data.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTemplateTest() throws ApiException {
        CreateTemplateInputObject createTemplateInputObject = null;
        Boolean xIgnoreNullValues = null;
        ResourceLinkResponse response = api.createTemplate(createTemplateInputObject, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Delete all contacts.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAllContactsTest() throws ApiException {
        api.deleteAllContacts();

        // TODO: test validations
    }
    
    /**
     * Delete all messages
     *
     * Delete all messages.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAllOutboundMessagesTest() throws ApiException {
        api.deleteAllOutboundMessages();

        // TODO: test validations
    }
    
    /**
     * Delete an avatar for the current user.\\
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAvatarTest() throws ApiException {
        api.deleteAvatar();

        // TODO: test validations
    }
    
    /**
     * Delete messages from chat by given messages ID(s).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChatMessagesTest() throws ApiException {
        DeleteChatMessagesBulkInputObject deleteChatMessagesBulkInputObject = null;
        Integer id = null;
        Boolean xIgnoreNullValues = null;
        api.deleteChatMessages(deleteChatMessagesBulkInputObject, id, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Delete chats by given ID(s) or delete all chats.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChatsBulkTest() throws ApiException {
        DeleteChatsBulkInputObject deleteChatsBulkInputObject = null;
        Boolean xIgnoreNullValues = null;
        api.deleteChatsBulk(deleteChatsBulkInputObject, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Delete a single contact.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContactTest() throws ApiException {
        Integer id = null;
        api.deleteContact(id);

        // TODO: test validations
    }
    
    /**
     * Delete an avatar for the contact.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContactAvatarTest() throws ApiException {
        Integer id = null;
        api.deleteContactAvatar(id);

        // TODO: test validations
    }
    
    /**
     * Delete a single contact note.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContactNoteTest() throws ApiException {
        Integer id = null;
        api.deleteContactNote(id);

        // TODO: test validations
    }
    
    /**
     * Delete contact note by given ID(s) or delete all contact notes.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContactNotesBulkTest() throws ApiException {
        Integer id = null;
        DeleteContactNotesBulkInputObject deleteContactNotesBulkInputObject = null;
        Boolean xIgnoreNullValues = null;
        api.deleteContactNotesBulk(id, deleteContactNotesBulkInputObject, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Delete contact by given ID(s) or delete all contacts.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContactsByIdsTest() throws ApiException {
        DeleteContactsByIdsInputObject deleteContactsByIdsInputObject = null;
        Boolean xIgnoreNullValues = null;
        api.deleteContactsByIds(deleteContactsByIdsInputObject, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Unassign contacts from the specified list.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContactsFromListTest() throws ApiException {
        DeleteContacsFromListObject deleteContacsFromListObject = null;
        Integer id = null;
        api.deleteContactsFromList(deleteContacsFromListObject, id);

        // TODO: test validations
    }
    
    /**
     * Delete a single custom field.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCustomFieldTest() throws ApiException {
        Integer id = null;
        api.deleteCustomField(id);

        // TODO: test validations
    }
    
    /**
     * Cancel dedicated number subscription.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDedicatedNumberTest() throws ApiException {
        Integer id = null;
        api.deleteDedicatedNumber(id);

        // TODO: test validations
    }
    
    /**
     * Delete the incoming message.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteInboundMessageTest() throws ApiException {
        Integer id = null;
        api.deleteInboundMessage(id);

        // TODO: test validations
    }
    
    /**
     * Delete inbound messages by given ID(s) or delete all inbound messages.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteInboundMessagesBulkTest() throws ApiException {
        DeleteInboundMessagesBulkInputObject deleteInboundMessagesBulkInputObject = null;
        Boolean xIgnoreNullValues = null;
        api.deleteInboundMessagesBulk(deleteInboundMessagesBulkInputObject, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Delete a single list.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteListTest() throws ApiException {
        Integer id = null;
        api.deleteList(id);

        // TODO: test validations
    }
    
    /**
     * Delete an avatar for the list.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteListAvatarTest() throws ApiException {
        Integer id = null;
        api.deleteListAvatar(id);

        // TODO: test validations
    }
    
    /**
     * Delete contact from list by given ID(s) or all contacts from list.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteListContactsBulkTest() throws ApiException {
        DeleteListContactsBulkInputObject deleteListContactsBulkInputObject = null;
        Integer id = null;
        Boolean xIgnoreNullValues = null;
        api.deleteListContactsBulk(deleteListContactsBulkInputObject, id, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Delete list by given ID(s) or delete all lists.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteListsBulkTest() throws ApiException {
        DeleteListsBulkInputObject deleteListsBulkInputObject = null;
        Boolean xIgnoreNullValues = null;
        api.deleteListsBulk(deleteListsBulkInputObject, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Delete a message session, together with all nested messages.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteMessageSessionTest() throws ApiException {
        Integer id = null;
        api.deleteMessageSession(id);

        // TODO: test validations
    }
    
    /**
     * Delete messages sessions, together with all nested messages, by given ID(s) or delete all messages sessions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteMessageSessionsBulkTest() throws ApiException {
        DeleteMessageSessionsBulkInputObject deleteMessageSessionsBulkInputObject = null;
        Boolean xIgnoreNullValues = null;
        api.deleteMessageSessionsBulk(deleteMessageSessionsBulkInputObject, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Delete message
     *
     * Delete a single message.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOutboundMessageTest() throws ApiException {
        Integer id = null;
        api.deleteOutboundMessage(id);

        // TODO: test validations
    }
    
    /**
     * Delete messages by IDs
     *
     * Delete outbound messages by given ID(s) or delete all outbound messages.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOutboundMessagesBulkTest() throws ApiException {
        DeleteOutboundMessagesBulkInputObject deleteOutboundMessagesBulkInputObject = null;
        Boolean xIgnoreNullValues = null;
        api.deleteOutboundMessagesBulk(deleteOutboundMessagesBulkInputObject, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Delete a push notification device token.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePushTokenTest() throws ApiException {
        String type = null;
        Integer deviceId = null;
        api.deletePushToken(type, deviceId);

        // TODO: test validations
    }
    
    /**
     * Delete a message session, together with all nested messages.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteScheduledMessageTest() throws ApiException {
        Integer id = null;
        api.deleteScheduledMessage(id);

        // TODO: test validations
    }
    
    /**
     * Delete scheduled messages by given ID(s) or delete all scheduled messages.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteScheduledMessagesBulkTest() throws ApiException {
        DeleteScheduledMessagesBulkInputObject deleteScheduledMessagesBulkInputObject = null;
        Boolean xIgnoreNullValues = null;
        api.deleteScheduledMessagesBulk(deleteScheduledMessagesBulkInputObject, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Delete a Sender ID.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSenderIdTest() throws ApiException {
        Integer id = null;
        api.deleteSenderId(id);

        // TODO: test validations
    }
    
    /**
     * Delete a survey.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSurveyTest() throws ApiException {
        Integer id = null;
        api.deleteSurvey(id);

        // TODO: test validations
    }
    
    /**
     * Delete a node.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSurveyNodeTest() throws ApiException {
        Integer id = null;
        api.deleteSurveyNode(id);

        // TODO: test validations
    }
    
    /**
     * Delete a single template.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTemplateTest() throws ApiException {
        Integer id = null;
        api.deleteTemplate(id);

        // TODO: test validations
    }
    
    /**
     * Delete template by given ID(s) or delete all templates.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTemplatesBulkTest() throws ApiException {
        DeleteTemplatesBulkInputObject deleteTemplatesBulkInputObject = null;
        Boolean xIgnoreNullValues = null;
        api.deleteTemplatesBulk(deleteTemplatesBulkInputObject, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Authenticate user by given username and password.
     *
     * Returning a username and token that you should pass to the all requests (in X-TM-Username and X-TM-Key, respectively)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void doAuthTest() throws ApiException {
        DoAuthInputObject doAuthInputObject = null;
        Boolean xIgnoreNullValues = null;
        DoAuthResponse response = api.doAuth(doAuthInputObject, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Carrier Lookup
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void doCarrierLookupTest() throws ApiException {
        String phone = null;
        String country = null;
        DoCarrierLookupResponse response = api.doCarrierLookup(phone, country);

        // TODO: test validations
    }
    
    /**
     * Validate Email address using Email Lookup tool
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void doEmailLookupTest() throws ApiException {
        String email = null;
        DoEmailLookupResponse response = api.doEmailLookup(email);

        // TODO: test validations
    }
    
    /**
     * Duplicate a survey.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void duplicateSurveyTest() throws ApiException {
        Integer id = null;
        ResourceLinkResponse response = api.duplicateSurvey(id);

        // TODO: test validations
    }
    
    /**
     * Get all bulk sending sessions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllBulkSessionsTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        GetAllBulkSessionsResponse response = api.getAllBulkSessions(page, limit);

        // TODO: test validations
    }
    
    /**
     * Get all user chats.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllChatsTest() throws ApiException {
        String status = null;
        Integer page = null;
        Integer limit = null;
        String orderBy = null;
        Integer voice = null;
        Integer flat = null;
        GetAllChatsResponse response = api.getAllChats(status, page, limit, orderBy, voice, flat);

        // TODO: test validations
    }
    
    /**
     * Get all inbox messages.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllInboundMessagesTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        String orderBy = null;
        String direction = null;
        GetAllInboundMessagesResponse response = api.getAllInboundMessages(page, limit, orderBy, direction);

        // TODO: test validations
    }
    
    /**
     * Get all message sending sessions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllMessageSessionsTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        GetAllMessageSessionsResponse response = api.getAllMessageSessions(page, limit);

        // TODO: test validations
    }
    
    /**
     * Get all messages
     *
     * Get all user oubound messages.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllOutboundMessagesTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        Integer lastId = null;
        GetAllOutboundMessagesResponse response = api.getAllOutboundMessages(page, limit, lastId);

        // TODO: test validations
    }
    
    /**
     * Get all scheduled messages.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllScheduledMessagesTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        String status = null;
        String orderBy = null;
        String direction = null;
        GetAllScheduledMessagesResponse response = api.getAllScheduledMessages(page, limit, status, orderBy, direction);

        // TODO: test validations
    }
    
    /**
     * Get all user templates.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllTemplatesTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        GetAllTemplatesResponse response = api.getAllTemplates(page, limit);

        // TODO: test validations
    }
    
    /**
     * Find available dedicated numbers to buy.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAvailableDedicatedNumbersTest() throws ApiException {
        String country = null;
        Integer prefix = null;
        Integer tollfree = null;
        GetAvailableDedicatedNumbersResponse response = api.getAvailableDedicatedNumbers(country, prefix, tollfree);

        // TODO: test validations
    }
    
    /**
     * Get all available sender setting options which could be used in \&quot;from\&quot; parameter of POST messages method.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAvailableSenderSettingOptionsTest() throws ApiException {
        String country = null;
        GetAvailableSenderSettingOptionsResponse response = api.getAvailableSenderSettingOptions(country);

        // TODO: test validations
    }
    
    /**
     * Returns the list of available balance options which can be used as a bound to determine when to send email to user with low balance notification. See https://my.textmagic.com/online/account/notifications/balance
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBalanceNotificationOptionsTest() throws ApiException {
        GetBalanceNotificationOptionsResponse response = api.getBalanceNotificationOptions();

        // TODO: test validations
    }
    
    /**
     * Get balance notification settings
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBalanceNotificationSettingsTest() throws ApiException {
        GetBalanceNotificationSettingsResponse response = api.getBalanceNotificationSettings();

        // TODO: test validations
    }
    
    /**
     * Get blocked contacts.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBlockedContactsTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        String query = null;
        String orderBy = null;
        String direction = null;
        GetBlockedContactsResponse response = api.getBlockedContacts(page, limit, query, orderBy, direction);

        // TODO: test validations
    }
    
    /**
     * Get bulk message session status.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBulkSessionTest() throws ApiException {
        Integer id = null;
        BulkSession response = api.getBulkSession(id);

        // TODO: test validations
    }
    
    /**
     * Fetch callback URL settings
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCallbackSettingsTest() throws ApiException {
        GetCallbackSettingsResponse response = api.getCallbackSettings();

        // TODO: test validations
    }
    
    /**
     * Check pricing for a inbound/outbound call.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCallsPricesTest() throws ApiException {
        Map<String, Object> response = api.getCallsPrices();

        // TODO: test validations
    }
    
    /**
     * Get a single chat.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getChatTest() throws ApiException {
        Integer id = null;
        Chat response = api.getChat(id);

        // TODO: test validations
    }
    
    /**
     * Find chats by phone.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getChatByPhoneTest() throws ApiException {
        String phone = null;
        Integer upsert = null;
        Integer reopen = null;
        Chat response = api.getChatByPhone(phone, upsert, reopen);

        // TODO: test validations
    }
    
    /**
     * Fetch messages from chat with specified chat id.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getChatMessagesTest() throws ApiException {
        Integer id = null;
        Integer page = null;
        Integer limit = null;
        String query = null;
        Integer start = null;
        Integer end = null;
        String direction = null;
        Integer voice = null;
        GetChatMessagesResponse response = api.getChatMessages(id, page, limit, query, start, end, direction, voice);

        // TODO: test validations
    }
    
    /**
     * Get a single contact.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContactTest() throws ApiException {
        Integer id = null;
        Contact response = api.getContact(id);

        // TODO: test validations
    }
    
    /**
     * Get a single contact by phone number.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContactByPhoneTest() throws ApiException {
        String phone = null;
        Contact response = api.getContactByPhone(phone);

        // TODO: test validations
    }
    
    /**
     * Check is that phone number blocked
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContactIfBlockedTest() throws ApiException {
        String phone = null;
        Contact response = api.getContactIfBlocked(phone);

        // TODO: test validations
    }
    
    /**
     * Get contact import session progress.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContactImportSessionProgressTest() throws ApiException {
        Integer id = null;
        GetContactImportSessionProgressResponse response = api.getContactImportSessionProgress(id);

        // TODO: test validations
    }
    
    /**
     * Get a single contact note.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContactNoteTest() throws ApiException {
        Integer id = null;
        ContactNote response = api.getContactNote(id);

        // TODO: test validations
    }
    
    /**
     * Fetch notes assigned to the given contact.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContactNotesTest() throws ApiException {
        Integer id = null;
        Integer page = null;
        Integer limit = null;
        GetContactNotesResponse response = api.getContactNotes(id, page, limit);

        // TODO: test validations
    }
    
    /**
     * Get all user contacts.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContactsTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        Integer shared = null;
        String orderBy = null;
        String direction = null;
        GetContactsResponse response = api.getContacts(page, limit, shared, orderBy, direction);

        // TODO: test validations
    }
    
    /**
     * Get contacts autocomplete suggestions by given search term.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContactsAutocompleteTest() throws ApiException {
        String query = null;
        Integer limit = null;
        Integer lists = null;
        List<GetContactsAutocompleteResponse> response = api.getContactsAutocomplete(query, limit, lists);

        // TODO: test validations
    }
    
    /**
     * Fetch user contacts by given group id.
     *
     * A useful synonym for \&quot;contacts/search\&quot; command with provided \&quot;listId\&quot; parameter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContactsByListIdTest() throws ApiException {
        Integer id = null;
        Integer page = null;
        Integer limit = null;
        String orderBy = null;
        String direction = null;
        GetContactsByListIdResponse response = api.getContactsByListId(id, page, limit, orderBy, direction);

        // TODO: test validations
    }
    
    /**
     * Return list of countries.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCountriesTest() throws ApiException {
        List<Country> response = api.getCountries();

        // TODO: test validations
    }
    
    /**
     * Get current user info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCurrentUserTest() throws ApiException {
        User response = api.getCurrentUser();

        // TODO: test validations
    }
    
    /**
     * Get a single custom field.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCustomFieldTest() throws ApiException {
        Integer id = null;
        UserCustomField response = api.getCustomField(id);

        // TODO: test validations
    }
    
    /**
     * Get all contact custom fields.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCustomFieldsTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        GetCustomFieldsResponse response = api.getCustomFields(page, limit);

        // TODO: test validations
    }
    
    /**
     * Get a single dedicated number.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDedicatedNumberTest() throws ApiException {
        Integer id = null;
        UsersInbound response = api.getDedicatedNumber(id);

        // TODO: test validations
    }
    
    /**
     * Get an array of all rules that are disallowed to the current account.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDisallowedRulesTest() throws ApiException {
        List<String> response = api.getDisallowedRules();

        // TODO: test validations
    }
    
    /**
     * Get favorite contacts and lists.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFavouritesTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        String query = null;
        GetFavouritesResponse response = api.getFavourites(page, limit, query);

        // TODO: test validations
    }
    
    /**
     * Get all forwarded calls.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getForwardedCallsTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        GetForwardedCallsResponse response = api.getForwardedCalls(page, limit);

        // TODO: test validations
    }
    
    /**
     * Get a single inbox message.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInboundMessageTest() throws ApiException {
        Integer id = null;
        MessageIn response = api.getInboundMessage(id);

        // TODO: test validations
    }
    
    /**
     * Get inbound messages notification settings
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInboundMessagesNotificationSettingsTest() throws ApiException {
        GetInboundMessagesNotificationSettingsResponse response = api.getInboundMessagesNotificationSettings();

        // TODO: test validations
    }
    
    /**
     * Return account invoices.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInvoicesTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        GetInvoicesResponse response = api.getInvoices(page, limit);

        // TODO: test validations
    }
    
    /**
     * Get a single list.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getListTest() throws ApiException {
        Integer id = null;
        Group response = api.getList(id);

        // TODO: test validations
    }
    
    /**
     * Fetch all contacts IDs belonging to the list with ID.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getListContactsIdsTest() throws ApiException {
        Integer id = null;
        GetListContactsIdsResponse response = api.getListContactsIds(id);

        // TODO: test validations
    }
    
    /**
     * Return lists which contact belongs to.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getListsOfContactTest() throws ApiException {
        Integer id = null;
        Integer page = null;
        Integer limit = null;
        GetListsOfContactResponse response = api.getListsOfContact(id, page, limit);

        // TODO: test validations
    }
    
    /**
     * Preview message
     *
     * Get messages preview (with tags merged) up to 100 messages per session.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMessagePreviewTest() throws ApiException {
        String text = null;
        Integer templateId = null;
        Integer sendingTime = null;
        String sendingDateTime = null;
        String sendingTimezone = null;
        String contacts = null;
        String lists = null;
        String phones = null;
        Integer cutExtra = null;
        Integer partsCount = null;
        Integer referenceId = null;
        String from = null;
        String rule = null;
        Integer createChat = null;
        Integer tts = null;
        Integer local = null;
        String localCountry = null;
        GetMessagePreviewResponse response = api.getMessagePreview(text, templateId, sendingTime, sendingDateTime, sendingTimezone, contacts, lists, phones, cutExtra, partsCount, referenceId, from, rule, createChat, tts, local, localCountry);

        // TODO: test validations
    }
    
    /**
     * Check price
     *
     * Check pricing for a new outbound message.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMessagePriceTest() throws ApiException {
        Integer includeBlocked = null;
        String text = null;
        Integer templateId = null;
        Integer sendingTime = null;
        String sendingDateTime = null;
        String sendingTimezone = null;
        String contacts = null;
        String lists = null;
        String phones = null;
        Integer cutExtra = null;
        Integer partsCount = null;
        Integer referenceId = null;
        String from = null;
        String rule = null;
        Integer createChat = null;
        Integer tts = null;
        Integer local = null;
        String localCountry = null;
        GetMessagePriceResponse response = api.getMessagePrice(includeBlocked, text, templateId, sendingTime, sendingDateTime, sendingTimezone, contacts, lists, phones, cutExtra, partsCount, referenceId, from, rule, createChat, tts, local, localCountry);

        // TODO: test validations
    }
    
    /**
     * Get pricing
     *
     * Get message prices for all countries.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMessagePricesTest() throws ApiException {
        GetMessagePricesResponse response = api.getMessagePrices();

        // TODO: test validations
    }
    
    /**
     * Get a message session.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMessageSessionTest() throws ApiException {
        Integer id = null;
        MessageSession response = api.getMessageSession(id);

        // TODO: test validations
    }
    
    /**
     * Get sending session statistics.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMessageSessionStatTest() throws ApiException {
        Integer id = null;
        Integer includeDeleted = null;
        GetMessageSessionStatResponse response = api.getMessageSessionStat(id, includeDeleted);

        // TODO: test validations
    }
    
    /**
     * Fetch messages by given session id.
     *
     * A useful synonym for \&quot;messages/search\&quot; command with provided \&quot;sessionId\&quot; parameter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMessagesBySessionIdTest() throws ApiException {
        Integer id = null;
        Integer page = null;
        Integer limit = null;
        String statuses = null;
        Integer includeDeleted = null;
        GetMessagesBySessionIdResponse response = api.getMessagesBySessionId(id, page, limit, statuses, includeDeleted);

        // TODO: test validations
    }
    
    /**
     * Return counters for messaging data views.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMessagingCountersTest() throws ApiException {
        GetMessagingCountersResponse response = api.getMessagingCounters();

        // TODO: test validations
    }
    
    /**
     * Return messaging statistics.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMessagingStatTest() throws ApiException {
        String by = null;
        Integer start = null;
        String end = null;
        GetMessagingStatResponse response = api.getMessagingStat(by, start, end);

        // TODO: test validations
    }
    
    /**
     * Get a single message
     *
     * Get a single outgoing message.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOutboundMessageTest() throws ApiException {
        Integer id = null;
        MessageOut response = api.getOutboundMessage(id);

        // TODO: test validations
    }
    
    /**
     * Get history
     *
     * Get outbound messages history.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOutboundMessagesHistoryTest() throws ApiException {
        Integer limit = null;
        Integer lastId = null;
        String query = null;
        String orderBy = null;
        String direction = null;
        GetOutboundMessagesHistoryResponse response = api.getOutboundMessagesHistory(limit, lastId, query, orderBy, direction);

        // TODO: test validations
    }
    
    /**
     * Get all device tokens assigned to the current account
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPushTokensTest() throws ApiException {
        GetPushTokensResponse response = api.getPushTokens();

        // TODO: test validations
    }
    
    /**
     * Get message schedule.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getScheduledMessageTest() throws ApiException {
        Integer id = null;
        MessagesIcs response = api.getScheduledMessage(id);

        // TODO: test validations
    }
    
    /**
     * Get a single Sender ID.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSenderIdTest() throws ApiException {
        Integer id = null;
        SenderId response = api.getSenderId(id);

        // TODO: test validations
    }
    
    /**
     * Get all sender IDs of current user.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSenderIdsTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        GetSenderIdsResponse response = api.getSenderIds(page, limit);

        // TODO: test validations
    }
    
    /**
     * Get current user sender settings.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSenderSettingsTest() throws ApiException {
        String country = null;
        GetSenderSettingsResponse response = api.getSenderSettings(country);

        // TODO: test validations
    }
    
    /**
     * Return account spending statistics.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpendingStatTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        Integer start = null;
        Integer end = null;
        GetSpendingStatResponse response = api.getSpendingStat(page, limit, start, end);

        // TODO: test validations
    }
    
    /**
     * Get current entities state
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStateTest() throws ApiException {
        GetStateResponse response = api.getState();

        // TODO: test validations
    }
    
    /**
     * Get a single subaccount.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubaccountTest() throws ApiException {
        Integer id = null;
        User response = api.getSubaccount(id);

        // TODO: test validations
    }
    
    /**
     * Get all subaccounts of current user.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubaccountsTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        User response = api.getSubaccounts(page, limit);

        // TODO: test validations
    }
    
    /**
     * Get all subaccounts with their REST API tokens associated with specified app name.
     *
     * When more than one token related to app name, last key will be returned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubaccountsWithTokensTest() throws ApiException {
        GetSubaccountsWithTokensInputObject getSubaccountsWithTokensInputObject = null;
        BigDecimal page = null;
        Integer limit = null;
        Boolean xIgnoreNullValues = null;
        GetSubaccountsWithTokensResponse response = api.getSubaccountsWithTokens(getSubaccountsWithTokensInputObject, page, limit, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Get a survey by id.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSurveyTest() throws ApiException {
        Integer id = null;
        Survey response = api.getSurvey(id);

        // TODO: test validations
    }
    
    /**
     * Get a node by id.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSurveyNodeTest() throws ApiException {
        Integer id = null;
        SurveyNode response = api.getSurveyNode(id);

        // TODO: test validations
    }
    
    /**
     * Fetch nodes by given survey id.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSurveyNodesTest() throws ApiException {
        Integer id = null;
        GetSurveyNodesResponse response = api.getSurveyNodes(id);

        // TODO: test validations
    }
    
    /**
     * Get all user surveys.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSurveysTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        GetSurveysResponse response = api.getSurveys(page, limit);

        // TODO: test validations
    }
    
    /**
     * Get a single template.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTemplateTest() throws ApiException {
        Integer id = null;
        MessageTemplate response = api.getTemplate(id);

        // TODO: test validations
    }
    
    /**
     * Return all available timezone IDs.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTimezonesTest() throws ApiException {
        Integer full = null;
        Object response = api.getTimezones(full);

        // TODO: test validations
    }
    
    /**
     * Get total amount of unread messages in the current user chats.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUnreadMessagesTotalTest() throws ApiException {
        GetUnreadMessagesTotalResponse response = api.getUnreadMessagesTotal();

        // TODO: test validations
    }
    
    /**
     * Get a single unsubscribed contact.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUnsubscribedContactTest() throws ApiException {
        Integer id = null;
        UnsubscribedContact response = api.getUnsubscribedContact(id);

        // TODO: test validations
    }
    
    /**
     * Get all contact have unsubscribed from your communication.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUnsubscribersTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        GetUnsubscribersResponse response = api.getUnsubscribers(page, limit);

        // TODO: test validations
    }
    
    /**
     * Get user&#39;s dedicated numbers.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserDedicatedNumbersTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        Integer surveyId = null;
        GetUserDedicatedNumbersResponse response = api.getUserDedicatedNumbers(page, limit, surveyId);

        // TODO: test validations
    }
    
    /**
     * Get all user lists.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserListsTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        String orderBy = null;
        String direction = null;
        Integer favoriteOnly = null;
        Integer onlyMine = null;
        GetUserListsResponse response = api.getUserLists(page, limit, orderBy, direction, favoriteOnly, onlyMine);

        // TODO: test validations
    }
    
    /**
     * Get minimal valid apps versions
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVersionsTest() throws ApiException {
        GetVersionsResponse response = api.getVersions();

        // TODO: test validations
    }
    
    /**
     * Invite new subaccount.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void inviteSubaccountTest() throws ApiException {
        InviteSubaccountInputObject inviteSubaccountInputObject = null;
        Boolean xIgnoreNullValues = null;
        api.inviteSubaccount(inviteSubaccountInputObject, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Mark several chats as read by chat ids or mark all chats as read
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void markChatsReadBulkTest() throws ApiException {
        MarkChatsReadBulkInputObject markChatsReadBulkInputObject = null;
        Boolean xIgnoreNullValues = null;
        api.markChatsReadBulk(markChatsReadBulkInputObject, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Mark several chats as UNread by chat ids or mark all chats as UNread
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void markChatsUnreadBulkTest() throws ApiException {
        MarkChatsUnreadBulkInputObject markChatsUnreadBulkInputObject = null;
        Boolean xIgnoreNullValues = null;
        api.markChatsUnreadBulk(markChatsUnreadBulkInputObject, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Merge two question nodes.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mergeSurveyNodesTest() throws ApiException {
        MergeSurveyNodesInputObject mergeSurveyNodesInputObject = null;
        Boolean xIgnoreNullValues = null;
        api.mergeSurveyNodes(mergeSurveyNodesInputObject, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Set mute mode.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void muteChatTest() throws ApiException {
        MuteChatInputObject muteChatInputObject = null;
        Boolean xIgnoreNullValues = null;
        ResourceLinkResponse response = api.muteChat(muteChatInputObject, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Mute several chats by chat ids or mute all chats
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void muteChatsBulkTest() throws ApiException {
        MuteChatsBulkInputObject muteChatsBulkInputObject = null;
        Boolean xIgnoreNullValues = null;
        api.muteChatsBulk(muteChatsBulkInputObject, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Just does a pong.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pingTest() throws ApiException {
        PingResponse response = api.ping();

        // TODO: test validations
    }
    
    /**
     * Reopen chats by chat ids or reopen all chats
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reopenChatsBulkTest() throws ApiException {
        ReopenChatsBulkInputObject reopenChatsBulkInputObject = null;
        Boolean xIgnoreNullValues = null;
        api.reopenChatsBulk(reopenChatsBulkInputObject, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Request a new REST API token for subaccount.
     *
     * Returning user object, key and app name.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void requestNewSubaccountTokenTest() throws ApiException {
        RequestNewSubaccountTokenInputObject requestNewSubaccountTokenInputObject = null;
        Boolean xIgnoreNullValues = null;
        User response = api.requestNewSubaccountToken(requestNewSubaccountTokenInputObject, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Request for a new Sender ID.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void requestSenderIdTest() throws ApiException {
        RequestSenderIdInputObject requestSenderIdInputObject = null;
        Boolean xIgnoreNullValues = null;
        ResourceLinkResponse response = api.requestSenderId(requestSenderIdInputObject, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Reset a survey flow.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resetSurveyTest() throws ApiException {
        Integer id = null;
        ResourceLinkResponse response = api.resetSurvey(id);

        // TODO: test validations
    }
    
    /**
     * Find chats by inbound or outbound messages text.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchChatsTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        String query = null;
        SearchChatsResponse response = api.searchChats(page, limit, query);

        // TODO: test validations
    }
    
    /**
     * Find chats by IDs.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchChatsByIdsTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        String ids = null;
        SearchChatsByIdsResponse response = api.searchChatsByIds(page, limit, ids);

        // TODO: test validations
    }
    
    /**
     * Find chats by recipient (contact, list name or phone number).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchChatsByReceipentTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        String query = null;
        String orderBy = null;
        SearchChatsByReceipentResponse response = api.searchChatsByReceipent(page, limit, query, orderBy);

        // TODO: test validations
    }
    
    /**
     * Find user contacts by given parameters.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchContactsTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        Integer shared = null;
        String ids = null;
        Integer listId = null;
        Integer includeBlocked = null;
        String query = null;
        Integer local = null;
        String country = null;
        String orderBy = null;
        String direction = null;
        SearchContactsResponse response = api.searchContacts(page, limit, shared, ids, listId, includeBlocked, query, local, country, orderBy, direction);

        // TODO: test validations
    }
    
    /**
     * Find inbound messages by given parameters.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchInboundMessagesTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        String ids = null;
        String query = null;
        String orderBy = null;
        String direction = null;
        Integer expand = null;
        SearchInboundMessagesResponse response = api.searchInboundMessages(page, limit, ids, query, orderBy, direction, expand);

        // TODO: test validations
    }
    
    /**
     * Find contact lists by given parameters.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchListsTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        String ids = null;
        String query = null;
        Integer onlyMine = null;
        Integer onlyDefault = null;
        String orderBy = null;
        String direction = null;
        SearchListsResponse response = api.searchLists(page, limit, ids, query, onlyMine, onlyDefault, orderBy, direction);

        // TODO: test validations
    }
    
    /**
     * Find messages
     *
     * Find outbound messages by given parameters.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchOutboundMessagesTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        Integer lastId = null;
        String ids = null;
        Integer sessionId = null;
        String statuses = null;
        Integer includeDeleted = null;
        String query = null;
        SearchOutboundMessagesResponse response = api.searchOutboundMessages(page, limit, lastId, ids, sessionId, statuses, includeDeleted, query);

        // TODO: test validations
    }
    
    /**
     * Find scheduled messages by given parameters.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchScheduledMessagesTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        String query = null;
        String ids = null;
        String status = null;
        String orderBy = null;
        String direction = null;
        SearchScheduledMessagesResponse response = api.searchScheduledMessages(page, limit, query, ids, status, orderBy, direction);

        // TODO: test validations
    }
    
    /**
     * Find user templates by given parameters.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchTemplatesTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        String ids = null;
        String name = null;
        String content = null;
        SearchTemplatesResponse response = api.searchTemplates(page, limit, ids, name, content);

        // TODO: test validations
    }
    
    /**
     * Send user email verification
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sendEmailVerificationCodeTest() throws ApiException {
        api.sendEmailVerificationCode();

        // TODO: test validations
    }
    
    /**
     * Send message
     *
     * The main entrypoint to send messages. See examples above for the reference.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sendMessageTest() throws ApiException {
        SendMessageInputObject sendMessageInputObject = null;
        Boolean xIgnoreNullValues = null;
        SendMessageResponse response = api.sendMessage(sendMessageInputObject, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Send user phone verification
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sendPhoneVerificationCodeTest() throws ApiException {
        api.sendPhoneVerificationCode();

        // TODO: test validations
    }
    
    /**
     * Set status of the chat given by ID.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setChatStatusTest() throws ApiException {
        SetChatStatusInputObject setChatStatusInputObject = null;
        Boolean xIgnoreNullValues = null;
        ResourceLinkResponse response = api.setChatStatus(setChatStatusInputObject, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Start a survey.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startSurveyTest() throws ApiException {
        Integer id = null;
        ResourceLinkResponse response = api.startSurvey(id);

        // TODO: test validations
    }
    
    /**
     * Unblock contact by phone number.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unblockContactTest() throws ApiException {
        UnblockContactInputObject unblockContactInputObject = null;
        Boolean xIgnoreNullValues = null;
        api.unblockContact(unblockContactInputObject, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Unblock several contacts by blocked contact ids or unblock all contacts
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unblockContactsBulkTest() throws ApiException {
        UnblockContactsBulkInputObject unblockContactsBulkInputObject = null;
        Boolean xIgnoreNullValues = null;
        api.unblockContactsBulk(unblockContactsBulkInputObject, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Unmute several chats by chat ids or unmute all chats
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unmuteChatsBulkTest() throws ApiException {
        UnmuteChatsBulkInputObject unmuteChatsBulkInputObject = null;
        Boolean xIgnoreNullValues = null;
        api.unmuteChatsBulk(unmuteChatsBulkInputObject, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Unsubscribe contact from your communication by phone number.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unsubscribeContactTest() throws ApiException {
        UnsubscribeContactInputObject unsubscribeContactInputObject = null;
        Boolean xIgnoreNullValues = null;
        ResourceLinkResponse response = api.unsubscribeContact(unsubscribeContactInputObject, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Update balance notification settings
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateBalanceNotificationSettingsTest() throws ApiException {
        UpdateBalanceNotificationSettingsInputObject updateBalanceNotificationSettingsInputObject = null;
        Boolean xIgnoreNullValues = null;
        api.updateBalanceNotificationSettings(updateBalanceNotificationSettingsInputObject, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Update callback URL settings
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCallbackSettingsTest() throws ApiException {
        UpdateCallbackSettingsInputObject updateCallbackSettingsInputObject = null;
        Boolean xIgnoreNullValues = null;
        api.updateCallbackSettings(updateCallbackSettingsInputObject, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Update chat desktop notification settings
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateChatDesktopNotificationSettingsTest() throws ApiException {
        UpdateChatDesktopNotificationSettingsInputObject updateChatDesktopNotificationSettingsInputObject = null;
        Boolean xIgnoreNullValues = null;
        api.updateChatDesktopNotificationSettings(updateChatDesktopNotificationSettingsInputObject, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Update existing contact.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContactTest() throws ApiException {
        UpdateContactInputObject updateContactInputObject = null;
        Integer id = null;
        Boolean xIgnoreNullValues = null;
        ResourceLinkResponse response = api.updateContact(updateContactInputObject, id, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Update existing contact note.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContactNoteTest() throws ApiException {
        UpdateContactNoteInputObject updateContactNoteInputObject = null;
        Integer id = null;
        Boolean xIgnoreNullValues = null;
        ResourceLinkResponse response = api.updateContactNote(updateContactNoteInputObject, id, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Update current user info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCurrentUserTest() throws ApiException {
        UpdateCurrentUserInputObject updateCurrentUserInputObject = null;
        Boolean xIgnoreNullValues = null;
        UpdateCurrentUserResponse response = api.updateCurrentUser(updateCurrentUserInputObject, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Update existing custom field.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCustomFieldTest() throws ApiException {
        UpdateCustomFieldInputObject updateCustomFieldInputObject = null;
        Integer id = null;
        Boolean xIgnoreNullValues = null;
        ResourceLinkResponse response = api.updateCustomField(updateCustomFieldInputObject, id, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Update contact&#39;s custom field value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCustomFieldValueTest() throws ApiException {
        UpdateCustomFieldValueInputObject updateCustomFieldValueInputObject = null;
        String id = null;
        Boolean xIgnoreNullValues = null;
        ResourceLinkResponse response = api.updateCustomFieldValue(updateCustomFieldValueInputObject, id, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Update inbound messages notification settings
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateInboundMessagesNotificationSettingsTest() throws ApiException {
        UpdateInboundMessagesNotificationSettingsInputObject updateInboundMessagesNotificationSettingsInputObject = null;
        Boolean xIgnoreNullValues = null;
        api.updateInboundMessagesNotificationSettings(updateInboundMessagesNotificationSettingsInputObject, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Update existing list.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateListTest() throws ApiException {
        Integer id = null;
        UpdateListObject updateListObject = null;
        ResourceLinkResponse response = api.updateList(id, updateListObject);

        // TODO: test validations
    }
    
    /**
     * Change user password.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePasswordTest() throws ApiException {
        UpdatePasswordInputObject updatePasswordInputObject = null;
        Boolean xIgnoreNullValues = null;
        api.updatePassword(updatePasswordInputObject, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Change sender settings for specified country.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSenderSettingTest() throws ApiException {
        UpdateSenderSettingInputObject updateSenderSettingInputObject = null;
        Boolean xIgnoreNullValues = null;
        api.updateSenderSetting(updateSenderSettingInputObject, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Update existing survey.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSurveyTest() throws ApiException {
        UpdateSurveyInputObject updateSurveyInputObject = null;
        Integer id = null;
        Boolean xIgnoreNullValues = null;
        ResourceLinkResponse response = api.updateSurvey(updateSurveyInputObject, id, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Update existing node.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSurveyNodeTest() throws ApiException {
        UpdateSurveyNodeInputObject updateSurveyNodeInputObject = null;
        Integer id = null;
        Boolean xIgnoreNullValues = null;
        ResourceLinkResponse response = api.updateSurveyNode(updateSurveyNodeInputObject, id, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Update existing template.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTemplateTest() throws ApiException {
        UpdateTemplateInputObject updateTemplateInputObject = null;
        Integer id = null;
        Boolean xIgnoreNullValues = null;
        ResourceLinkResponse response = api.updateTemplate(updateTemplateInputObject, id, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Add an avatar for the current user.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadAvatarTest() throws ApiException {
        File image = null;
        api.uploadAvatar(image);

        // TODO: test validations
    }
    
    /**
     * Add an avatar for the contact.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadContactAvatarTest() throws ApiException {
        File image = null;
        Integer id = null;
        ResourceLinkResponse response = api.uploadContactAvatar(image, id);

        // TODO: test validations
    }
    
    /**
     * Add an avatar for the list.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadListAvatarTest() throws ApiException {
        File image = null;
        Integer id = null;
        ResourceLinkResponse response = api.uploadListAvatar(image, id);

        // TODO: test validations
    }
    
    /**
     * Upload message attachment
     *
     * Upload a new file to insert it as a link.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadMessageAttachmentTest() throws ApiException {
        File file = null;
        UploadMessageAttachmentResponse response = api.uploadMessageAttachment(file);

        // TODO: test validations
    }
    
}
