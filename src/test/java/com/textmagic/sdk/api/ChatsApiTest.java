/*
 * TextMagic API Documentation
 * # Overview ## Introduction test <img style=\"float: right; margin-left: 10px; width: 100px;\" src=\"images/phone.png\"> TextMagic SMS API is a platform for building your own messaging app using our messaging infrastructure. It allows you to send and receive SMS text messages, query information about inbound and outbound messages, manage contacts, create templates (i.e. message formats and static texts) and schedule recurrent SMS messages as well as process bulk SMS messages. <button name=\"button\" onclick=\"http://www.google.com\" class=\"btn\">Try TextMagic API for Free</button>  ### Two Ways to Use TextMagic API * [REST API](https://www.textmagic.com/docs/api/start/) – get full access to TextMagic’s messaging gateway features * [Email to SMS API](https://www.textmagic.com/docs/api/send-email-to-sms/) – set up two-way SMS communication without the need to write any additional code  ### Code Libraries We have created a set of client libraries for the most popular programming languages (such as REST API Java and REST API PHP). These libraries allow you to integrate our API into your code in minutes. Just choose your preferred language to get started:  ## Getting started Get Started with the TextMagic REST API To start sending text messages using the TextMagic REST API, just follow these steps: 1. Generate the API credentials 1. Connect to our API endpoint This page provides all the information you need to get started. Here, we explain the following steps:  How to obtain the API credentials The API endpoint How the REST API works The next step How to obtain the API credentials  ### How to obtain the API credentials To start sending text messages, you need to create an API key. API keys are similar to an account password; the difference is that an API key only provides access to the API: you cannot log in to TextMagic Online using the API key.  Your program sends the login credentials with each API request as HTTP headers: `X-TM-Username` is your TextMagic username, while `X-TM-Key` is your API key.  How to obtain an API key:  1. Log in to TextMagic (or start a free trial if you haven’t registered yet). 1. Go to the API settings page. 1. Click the Add new API key button. 1. Enter an app name for this key. Note, it’s just a label, so pick any name. 1. Click Generate new key. 1. You should now see your new API key in the green notification banner above the table:  ![alt text](images/credentials.png)  > Note for API v1 users > V1 keys are not compatible with the V2 version of the TextMagic REST API, so you will need to generate a new API key to use the V2 endpoint.  ### The API endpoint The TextMagic REST API endpoint is: ``` https://rest.textmagic.com/api/v2 ``` All the URLs referenced in this documentation should use this base URL.  ### How the REST API works REST APIs use the HTTP protocol to send and receive messages. REST messages are usually encoded as JSON documents and are an improvement over older methods such as the XML based SOAP protocol. REST APIs use the same set of methods that web browsers use: POST, GET, PUT or DELETE. These correspond to the CRUD operations: create, read, update and delete. Often, REST URIs provide direct CRUD access to entities or collections of entities, for example: http://api.foo.com/people. In this instance, to delete a person’s endpoint, you might simply call the endpoint DELETE http://api.foo.com/people/{id}. REST makes these types of operations simple.  > Example > > Let’s take the entity most often used in messaging: contacts. Imagine you want to perform operations on your contacts list: well, it’s only a matter of calling the following endpoints: > * GET /api/v2/contacts (get all of your contacts) > * GET /api/v2/contacts/{id} (get a specific contact) > * POST /api/v2/contacts (create a new contact) > * PUT /api/v2/contacts/{id} (update an existing contact) > * DELETE /api/v2/contacts/{id} (delete an existing contact) It’s that simple! In fact, that’s all you need to do to manage the contacts in your TextMagic account!  ## Sandbox Sandbox is a tool to test TextMagic REST API requests without the need to install any applications or write any code. Here, we explain the following details about Sandbox: * The credentials area * Command documentation * How it works  <a href=\"\">Go to TextMagic Sandbox</a>  ### The credentials area To make requests using your TextMagic account, you need to enter your account username and your API key into the corresponding fields. You may also Save them in your browser or press Clear to erase them.  ![alt text](images/sandbox.png) 
 *
 * OpenAPI spec version: 2
 * Contact: support@textmagi.biz
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.textmagic.sdk.api;

import com.textmagic.sdk.ApiException;
import com.textmagic.sdk.model.BadRequestResponse;
import com.textmagic.sdk.model.Chat;
import com.textmagic.sdk.model.CloseChatsBulkInputObject;
import com.textmagic.sdk.model.DeleteChatMessagesBulkInputObject;
import com.textmagic.sdk.model.DeleteChatsBulkInputObject;
import com.textmagic.sdk.model.GetAllChatsResponse;
import com.textmagic.sdk.model.GetChatMessagesResponse;
import com.textmagic.sdk.model.GetUnreadMessagesTotalResponse;
import com.textmagic.sdk.model.MarkChatsReadBulkInputObject;
import com.textmagic.sdk.model.MarkChatsUnreadBulkInputObject;
import com.textmagic.sdk.model.MuteChatInputObject;
import com.textmagic.sdk.model.MuteChatsBulkInputObject;
import com.textmagic.sdk.model.NotFoundResponse;
import com.textmagic.sdk.model.ReopenChatsBulkInputObject;
import com.textmagic.sdk.model.ResourceLinkResponse;
import com.textmagic.sdk.model.SearchChatsByIdsResponse;
import com.textmagic.sdk.model.SearchChatsByReceipentResponse;
import com.textmagic.sdk.model.SearchChatsResponse;
import com.textmagic.sdk.model.SetChatStatusInputObject;
import com.textmagic.sdk.model.UnauthorizedResponse;
import com.textmagic.sdk.model.UnmuteChatsBulkInputObject;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ChatsApi
 */
@Ignore
public class ChatsApiTest {

    private final ChatsApi api = new ChatsApi();

    
    /**
     * Close chats by chat ids or close all chats
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void closeChatsBulkTest() throws ApiException {
        CloseChatsBulkInputObject closeChatsBulkInputObject = null;
        Boolean xIgnoreNullValues = null;
        api.closeChatsBulk(closeChatsBulkInputObject, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Close all chats that have no unread messages.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void closeReadChatsTest() throws ApiException {
        api.closeReadChats();

        // TODO: test validations
    }
    
    /**
     * Delete messages from chat by given messages ID(s).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChatMessagesTest() throws ApiException {
        DeleteChatMessagesBulkInputObject deleteChatMessagesBulkInputObject = null;
        Integer id = null;
        Boolean xIgnoreNullValues = null;
        api.deleteChatMessages(deleteChatMessagesBulkInputObject, id, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Delete chats by given ID(s) or delete all chats.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChatsBulkTest() throws ApiException {
        DeleteChatsBulkInputObject deleteChatsBulkInputObject = null;
        Boolean xIgnoreNullValues = null;
        api.deleteChatsBulk(deleteChatsBulkInputObject, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Get all user chats.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllChatsTest() throws ApiException {
        String status = null;
        Integer page = null;
        Integer limit = null;
        String orderBy = null;
        Integer voice = null;
        Integer flat = null;
        GetAllChatsResponse response = api.getAllChats(status, page, limit, orderBy, voice, flat);

        // TODO: test validations
    }
    
    /**
     * Get a single chat.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getChatTest() throws ApiException {
        Integer id = null;
        Chat response = api.getChat(id);

        // TODO: test validations
    }
    
    /**
     * Find chats by phone.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getChatByPhoneTest() throws ApiException {
        String phone = null;
        Integer upsert = null;
        Integer reopen = null;
        Chat response = api.getChatByPhone(phone, upsert, reopen);

        // TODO: test validations
    }
    
    /**
     * Fetch messages from chat with specified chat id.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getChatMessagesTest() throws ApiException {
        Integer id = null;
        Integer page = null;
        Integer limit = null;
        String query = null;
        Integer start = null;
        Integer end = null;
        String direction = null;
        Integer voice = null;
        GetChatMessagesResponse response = api.getChatMessages(id, page, limit, query, start, end, direction, voice);

        // TODO: test validations
    }
    
    /**
     * Get total amount of unread messages in the current user chats.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUnreadMessagesTotalTest() throws ApiException {
        GetUnreadMessagesTotalResponse response = api.getUnreadMessagesTotal();

        // TODO: test validations
    }
    
    /**
     * Mark several chats as read by chat ids or mark all chats as read
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void markChatsReadBulkTest() throws ApiException {
        MarkChatsReadBulkInputObject markChatsReadBulkInputObject = null;
        Boolean xIgnoreNullValues = null;
        api.markChatsReadBulk(markChatsReadBulkInputObject, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Mark several chats as UNread by chat ids or mark all chats as UNread
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void markChatsUnreadBulkTest() throws ApiException {
        MarkChatsUnreadBulkInputObject markChatsUnreadBulkInputObject = null;
        Boolean xIgnoreNullValues = null;
        api.markChatsUnreadBulk(markChatsUnreadBulkInputObject, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Set mute mode.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void muteChatTest() throws ApiException {
        MuteChatInputObject muteChatInputObject = null;
        Boolean xIgnoreNullValues = null;
        ResourceLinkResponse response = api.muteChat(muteChatInputObject, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Mute several chats by chat ids or mute all chats
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void muteChatsBulkTest() throws ApiException {
        MuteChatsBulkInputObject muteChatsBulkInputObject = null;
        Boolean xIgnoreNullValues = null;
        api.muteChatsBulk(muteChatsBulkInputObject, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Reopen chats by chat ids or reopen all chats
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reopenChatsBulkTest() throws ApiException {
        ReopenChatsBulkInputObject reopenChatsBulkInputObject = null;
        Boolean xIgnoreNullValues = null;
        api.reopenChatsBulk(reopenChatsBulkInputObject, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Find chats by inbound or outbound messages text.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchChatsTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        String query = null;
        SearchChatsResponse response = api.searchChats(page, limit, query);

        // TODO: test validations
    }
    
    /**
     * Find chats by IDs.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchChatsByIdsTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        String ids = null;
        SearchChatsByIdsResponse response = api.searchChatsByIds(page, limit, ids);

        // TODO: test validations
    }
    
    /**
     * Find chats by recipient (contact, list name or phone number).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchChatsByReceipentTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        String query = null;
        String orderBy = null;
        SearchChatsByReceipentResponse response = api.searchChatsByReceipent(page, limit, query, orderBy);

        // TODO: test validations
    }
    
    /**
     * Set status of the chat given by ID.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setChatStatusTest() throws ApiException {
        SetChatStatusInputObject setChatStatusInputObject = null;
        Boolean xIgnoreNullValues = null;
        ResourceLinkResponse response = api.setChatStatus(setChatStatusInputObject, xIgnoreNullValues);

        // TODO: test validations
    }
    
    /**
     * Unmute several chats by chat ids or unmute all chats
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unmuteChatsBulkTest() throws ApiException {
        UnmuteChatsBulkInputObject unmuteChatsBulkInputObject = null;
        Boolean xIgnoreNullValues = null;
        api.unmuteChatsBulk(unmuteChatsBulkInputObject, xIgnoreNullValues);

        // TODO: test validations
    }
    
}
