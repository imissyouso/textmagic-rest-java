/*
 * TextMagic API Documentation
 * # Overview ## Introduction 1 <img style=\"float: right; margin-left: 10px; width: 100px;\" src=\"images/phone.png\"> TextMagic SMS API is a platform for building your own messaging app using our messaging infrastructure. It allows you to send and receive SMS text messages, query information about inbound and outbound messages, manage contacts, create templates (i.e. message formats and static texts) and schedule recurrent SMS messages as well as process bulk SMS messages. <button name=\"button\" onclick=\"http://www.google.com\" class=\"btn\">Try TextMagic API for Free</button>  ### Two Ways to Use TextMagic API * [REST API](https://www.textmagic.com/docs/api/start/) – get full access to TextMagic’s messaging gateway features * [Email to SMS API](https://www.textmagic.com/docs/api/send-email-to-sms/) – set up two-way SMS communication without the need to write any additional code  ### Code Libraries We have created a set of client libraries for the most popular programming languages (such as REST API Java and REST API PHP). These libraries allow you to integrate our API into your code in minutes. Just choose your preferred language to get started:  ## Getting started Get Started with the TextMagic REST API To start sending text messages using the TextMagic REST API, just follow these steps: 1. Generate the API credentials 1. Connect to our API endpoint This page provides all the information you need to get started. Here, we explain the following steps:  How to obtain the API credentials The API endpoint How the REST API works The next step How to obtain the API credentials  ### How to obtain the API credentials To start sending text messages, you need to create an API key. API keys are similar to an account password; the difference is that an API key only provides access to the API: you cannot log in to TextMagic Online using the API key.  Your program sends the login credentials with each API request as HTTP headers: `X-TM-Username` is your TextMagic username, while `X-TM-Key` is your API key.  How to obtain an API key:  1. Log in to TextMagic (or start a free trial if you haven’t registered yet). 1. Go to the API settings page. 1. Click the Add new API key button. 1. Enter an app name for this key. Note, it’s just a label, so pick any name. 1. Click Generate new key. 1. You should now see your new API key in the green notification banner above the table:  ![alt text](images/credentials.png)  > Note for API v1 users > V1 keys are not compatible with the V2 version of the TextMagic REST API, so you will need to generate a new API key to use the V2 endpoint.  ### The API endpoint The TextMagic REST API endpoint is: ``` https://rest.textmagic.com/api/v2 ``` All the URLs referenced in this documentation should use this base URL.  ### How the REST API works REST APIs use the HTTP protocol to send and receive messages. REST messages are usually encoded as JSON documents and are an improvement over older methods such as the XML based SOAP protocol. REST APIs use the same set of methods that web browsers use: POST, GET, PUT or DELETE. These correspond to the CRUD operations: create, read, update and delete. Often, REST URIs provide direct CRUD access to entities or collections of entities, for example: http://api.foo.com/people. In this instance, to delete a person’s endpoint, you might simply call the endpoint DELETE http://api.foo.com/people/{id}. REST makes these types of operations simple.  > Example > > Let’s take the entity most often used in messaging: contacts. Imagine you want to perform operations on your contacts list: well, it’s only a matter of calling the following endpoints: > * GET /api/v2/contacts (get all of your contacts) > * GET /api/v2/contacts/{id} (get a specific contact) > * POST /api/v2/contacts (create a new contact) > * PUT /api/v2/contacts/{id} (update an existing contact) > * DELETE /api/v2/contacts/{id} (delete an existing contact) It’s that simple! In fact, that’s all you need to do to manage the contacts in your TextMagic account!  ## Sandbox Sandbox is a tool to test TextMagic REST API requests without the need to install any applications or write any code. Here, we explain the following details about Sandbox: * The credentials area * Command documentation * How it works  <a href=\"\">Go to TextMagic Sandbox</a>  ### The credentials area To make requests using your TextMagic account, you need to enter your account username and your API key into the corresponding fields. You may also Save them in your browser or press Clear to erase them.  ![alt text](images/sandbox.png) 
 *
 * OpenAPI spec version: 2
 * Contact: support@textmagi.biz
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.textmagic.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * SendMessageInputObject
 */

public class SendMessageInputObject {
  @SerializedName("text")
  private String text = null;

  @SerializedName("templateId")
  private Integer templateId = null;

  @SerializedName("sendingTime")
  private Integer sendingTime = null;

  @SerializedName("sendingDateTime")
  private String sendingDateTime = null;

  @SerializedName("sendingTimezone")
  private String sendingTimezone = null;

  @SerializedName("contacts")
  private String contacts = null;

  @SerializedName("lists")
  private String lists = null;

  @SerializedName("phones")
  private String phones = null;

  @SerializedName("cutExtra")
  private Boolean cutExtra = null;

  @SerializedName("partsCount")
  private Integer partsCount = null;

  @SerializedName("referenceId")
  private Integer referenceId = null;

  @SerializedName("from")
  private String from = null;

  @SerializedName("rule")
  private String rule = null;

  @SerializedName("createChat")
  private Boolean createChat = null;

  @SerializedName("tts")
  private Boolean tts = null;

  @SerializedName("local")
  private Boolean local = null;

  @SerializedName("localCountry")
  private String localCountry = null;

  public SendMessageInputObject text(String text) {
    this.text = text;
    return this;
  }

   /**
   * Message text. Required if template_id is not set
   * @return text
  **/
  @ApiModelProperty(example = "Test message test", value = "Message text. Required if template_id is not set")
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }

  public SendMessageInputObject templateId(Integer templateId) {
    this.templateId = templateId;
    return this;
  }

   /**
   * Template used instead of message text. Required if text is not set
   * @return templateId
  **/
  @ApiModelProperty(example = "1", value = "Template used instead of message text. Required if text is not set")
  public Integer getTemplateId() {
    return templateId;
  }

  public void setTemplateId(Integer templateId) {
    this.templateId = templateId;
  }

  public SendMessageInputObject sendingTime(Integer sendingTime) {
    this.sendingTime = sendingTime;
    return this;
  }

   /**
   * DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time in unix timestamp format. Default is now
   * @return sendingTime
  **/
  @ApiModelProperty(example = "1565606455", value = "DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time in unix timestamp format. Default is now")
  public Integer getSendingTime() {
    return sendingTime;
  }

  public void setSendingTime(Integer sendingTime) {
    this.sendingTime = sendingTime;
  }

  public SendMessageInputObject sendingDateTime(String sendingDateTime) {
    this.sendingDateTime = sendingDateTime;
    return this;
  }

   /**
   * Sending time in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to sendingTimezone
   * @return sendingDateTime
  **/
  @ApiModelProperty(example = "2020-05-27 13:02:33", value = "Sending time in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to sendingTimezone")
  public String getSendingDateTime() {
    return sendingDateTime;
  }

  public void setSendingDateTime(String sendingDateTime) {
    this.sendingDateTime = sendingDateTime;
  }

  public SendMessageInputObject sendingTimezone(String sendingTimezone) {
    this.sendingTimezone = sendingTimezone;
    return this;
  }

   /**
   * ID or ISO-name of timezone used for sending when sendingDateTime parameter is set. E.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent at May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is account timezone
   * @return sendingTimezone
  **/
  @ApiModelProperty(example = "America/Buenos_Aires", value = "ID or ISO-name of timezone used for sending when sendingDateTime parameter is set. E.g. if you specify sendingDateTime = \\\"2016-05-27 13:02:33\\\" and sendingTimezone = \\\"America/Buenos_Aires\\\", your message will be sent at May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is account timezone")
  public String getSendingTimezone() {
    return sendingTimezone;
  }

  public void setSendingTimezone(String sendingTimezone) {
    this.sendingTimezone = sendingTimezone;
  }

  public SendMessageInputObject contacts(String contacts) {
    this.contacts = contacts;
    return this;
  }

   /**
   * Comma separated array of contact resources id message will be sent to
   * @return contacts
  **/
  @ApiModelProperty(example = "1,2,3,4", value = "Comma separated array of contact resources id message will be sent to")
  public String getContacts() {
    return contacts;
  }

  public void setContacts(String contacts) {
    this.contacts = contacts;
  }

  public SendMessageInputObject lists(String lists) {
    this.lists = lists;
    return this;
  }

   /**
   * Comma separated array of list resources id message will be sent to
   * @return lists
  **/
  @ApiModelProperty(example = "1,2,3,4", value = "Comma separated array of list resources id message will be sent to")
  public String getLists() {
    return lists;
  }

  public void setLists(String lists) {
    this.lists = lists;
  }

  public SendMessageInputObject phones(String phones) {
    this.phones = phones;
    return this;
  }

   /**
   * Comma separated array of E.164 phone numbers message will be sent to
   * @return phones
  **/
  @ApiModelProperty(example = "+19993322111,+19993322110", value = "Comma separated array of E.164 phone numbers message will be sent to")
  public String getPhones() {
    return phones;
  }

  public void setPhones(String phones) {
    this.phones = phones;
  }

  public SendMessageInputObject cutExtra(Boolean cutExtra) {
    this.cutExtra = cutExtra;
    return this;
  }

   /**
   * Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. Default is false
   * @return cutExtra
  **/
  @ApiModelProperty(example = "true", value = "Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. Default is false")
  public Boolean isCutExtra() {
    return cutExtra;
  }

  public void setCutExtra(Boolean cutExtra) {
    this.cutExtra = cutExtra;
  }

  public SendMessageInputObject partsCount(Integer partsCount) {
    this.partsCount = partsCount;
    return this;
  }

   /**
   * Maximum message parts count (TextMagic allows sending 1 to 6 message parts). Default is 6
   * @return partsCount
  **/
  @ApiModelProperty(example = "6", value = "Maximum message parts count (TextMagic allows sending 1 to 6 message parts). Default is 6")
  public Integer getPartsCount() {
    return partsCount;
  }

  public void setPartsCount(Integer partsCount) {
    this.partsCount = partsCount;
  }

  public SendMessageInputObject referenceId(Integer referenceId) {
    this.referenceId = referenceId;
    return this;
  }

   /**
   * Custom message reference id which can be used in your application infrastructure
   * @return referenceId
  **/
  @ApiModelProperty(example = "1", value = "Custom message reference id which can be used in your application infrastructure")
  public Integer getReferenceId() {
    return referenceId;
  }

  public void setReferenceId(Integer referenceId) {
    this.referenceId = referenceId;
  }

  public SendMessageInputObject from(String from) {
    this.from = from;
    return this;
  }

   /**
   * One of allowed Sender ID (phone number or alphanumeric sender ID). If specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery
   * @return from
  **/
  @ApiModelProperty(example = "Test sender id", value = "One of allowed Sender ID (phone number or alphanumeric sender ID). If specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery")
  public String getFrom() {
    return from;
  }

  public void setFrom(String from) {
    this.from = from;
  }

  public SendMessageInputObject rule(String rule) {
    this.rule = rule;
    return this;
  }

   /**
   * iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details
   * @return rule
  **/
  @ApiModelProperty(example = "FREQ=YEARLY;BYMONTH=1;BYMONTHDAY=1;COUNT=1", value = "iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details")
  public String getRule() {
    return rule;
  }

  public void setRule(String rule) {
    this.rule = rule;
  }

  public SendMessageInputObject createChat(Boolean createChat) {
    this.createChat = createChat;
    return this;
  }

   /**
   * Should sending method try to create new Chat(if not exist) with specified recipients. Default is false
   * @return createChat
  **/
  @ApiModelProperty(example = "false", value = "Should sending method try to create new Chat(if not exist) with specified recipients. Default is false")
  public Boolean isCreateChat() {
    return createChat;
  }

  public void setCreateChat(Boolean createChat) {
    this.createChat = createChat;
  }

  public SendMessageInputObject tts(Boolean tts) {
    this.tts = tts;
    return this;
  }

   /**
   * Send Text to Speech message. Default is false
   * @return tts
  **/
  @ApiModelProperty(example = "false", value = "Send Text to Speech message. Default is false")
  public Boolean isTts() {
    return tts;
  }

  public void setTts(Boolean tts) {
    this.tts = tts;
  }

  public SendMessageInputObject local(Boolean local) {
    this.local = local;
    return this;
  }

   /**
   * Treat phone numbers passed in \\&#39;phones\\&#39; field as local. Default is false
   * @return local
  **/
  @ApiModelProperty(example = "false", value = "Treat phone numbers passed in \\'phones\\' field as local. Default is false")
  public Boolean isLocal() {
    return local;
  }

  public void setLocal(Boolean local) {
    this.local = local;
  }

  public SendMessageInputObject localCountry(String localCountry) {
    this.localCountry = localCountry;
    return this;
  }

   /**
   * 2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is account country
   * @return localCountry
  **/
  @ApiModelProperty(example = "US", value = "2-letter ISO country code for local phone numbers, used when \\'local\\' is set to true. Default is account country")
  public String getLocalCountry() {
    return localCountry;
  }

  public void setLocalCountry(String localCountry) {
    this.localCountry = localCountry;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SendMessageInputObject sendMessageInputObject = (SendMessageInputObject) o;
    return Objects.equals(this.text, sendMessageInputObject.text) &&
        Objects.equals(this.templateId, sendMessageInputObject.templateId) &&
        Objects.equals(this.sendingTime, sendMessageInputObject.sendingTime) &&
        Objects.equals(this.sendingDateTime, sendMessageInputObject.sendingDateTime) &&
        Objects.equals(this.sendingTimezone, sendMessageInputObject.sendingTimezone) &&
        Objects.equals(this.contacts, sendMessageInputObject.contacts) &&
        Objects.equals(this.lists, sendMessageInputObject.lists) &&
        Objects.equals(this.phones, sendMessageInputObject.phones) &&
        Objects.equals(this.cutExtra, sendMessageInputObject.cutExtra) &&
        Objects.equals(this.partsCount, sendMessageInputObject.partsCount) &&
        Objects.equals(this.referenceId, sendMessageInputObject.referenceId) &&
        Objects.equals(this.from, sendMessageInputObject.from) &&
        Objects.equals(this.rule, sendMessageInputObject.rule) &&
        Objects.equals(this.createChat, sendMessageInputObject.createChat) &&
        Objects.equals(this.tts, sendMessageInputObject.tts) &&
        Objects.equals(this.local, sendMessageInputObject.local) &&
        Objects.equals(this.localCountry, sendMessageInputObject.localCountry);
  }

  @Override
  public int hashCode() {
    return Objects.hash(text, templateId, sendingTime, sendingDateTime, sendingTimezone, contacts, lists, phones, cutExtra, partsCount, referenceId, from, rule, createChat, tts, local, localCountry);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SendMessageInputObject {\n");
    
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    templateId: ").append(toIndentedString(templateId)).append("\n");
    sb.append("    sendingTime: ").append(toIndentedString(sendingTime)).append("\n");
    sb.append("    sendingDateTime: ").append(toIndentedString(sendingDateTime)).append("\n");
    sb.append("    sendingTimezone: ").append(toIndentedString(sendingTimezone)).append("\n");
    sb.append("    contacts: ").append(toIndentedString(contacts)).append("\n");
    sb.append("    lists: ").append(toIndentedString(lists)).append("\n");
    sb.append("    phones: ").append(toIndentedString(phones)).append("\n");
    sb.append("    cutExtra: ").append(toIndentedString(cutExtra)).append("\n");
    sb.append("    partsCount: ").append(toIndentedString(partsCount)).append("\n");
    sb.append("    referenceId: ").append(toIndentedString(referenceId)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    rule: ").append(toIndentedString(rule)).append("\n");
    sb.append("    createChat: ").append(toIndentedString(createChat)).append("\n");
    sb.append("    tts: ").append(toIndentedString(tts)).append("\n");
    sb.append("    local: ").append(toIndentedString(local)).append("\n");
    sb.append("    localCountry: ").append(toIndentedString(localCountry)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

