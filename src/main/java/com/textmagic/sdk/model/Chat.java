/*
 * TextMagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.textmagic.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.textmagic.sdk.model.Contact;
import com.textmagic.sdk.model.Country;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;

/**
 * Chat
 */

public class Chat {
  @SerializedName("id")
  private Integer id = null;

  @SerializedName("originalId")
  private Integer originalId = null;

  @SerializedName("phone")
  private String phone = null;

  @SerializedName("contact")
  private Contact contact = null;

  @SerializedName("unsubscribedContactId")
  private Integer unsubscribedContactId = null;

  @SerializedName("unread")
  private Integer unread = null;

  @SerializedName("updatedAt")
  private OffsetDateTime updatedAt = null;

  @SerializedName("status")
  private String status = null;

  @SerializedName("mute")
  private Integer mute = null;

  @SerializedName("lastMessage")
  private String lastMessage = null;

  @SerializedName("direction")
  private String direction = null;

  @SerializedName("from")
  private String from = null;

  @SerializedName("mutedUntil")
  private String mutedUntil = null;

  @SerializedName("timeLeftMute")
  private Integer timeLeftMute = null;

  @SerializedName("country")
  private Country country = null;

  public Chat id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Chat ID.
   * @return id
  **/
  @ApiModelProperty(example = "43328", required = true, value = "Chat ID.")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public Chat originalId(Integer originalId) {
    this.originalId = originalId;
    return this;
  }

   /**
   * Get originalId
   * @return originalId
  **/
  @ApiModelProperty(example = "1", required = true, value = "")
  public Integer getOriginalId() {
    return originalId;
  }

  public void setOriginalId(Integer originalId) {
    this.originalId = originalId;
  }

  public Chat phone(String phone) {
    this.phone = phone;
    return this;
  }

   /**
   * Chat partner phone number.
   * @return phone
  **/
  @ApiModelProperty(example = "447860021130", required = true, value = "Chat partner phone number.")
  public String getPhone() {
    return phone;
  }

  public void setPhone(String phone) {
    this.phone = phone;
  }

  public Chat contact(Contact contact) {
    this.contact = contact;
    return this;
  }

   /**
   * Get contact
   * @return contact
  **/
  @ApiModelProperty(required = true, value = "")
  public Contact getContact() {
    return contact;
  }

  public void setContact(Contact contact) {
    this.contact = contact;
  }

  public Chat unsubscribedContactId(Integer unsubscribedContactId) {
    this.unsubscribedContactId = unsubscribedContactId;
    return this;
  }

   /**
   * Get unsubscribedContactId
   * @return unsubscribedContactId
  **/
  @ApiModelProperty(example = "1", required = true, value = "")
  public Integer getUnsubscribedContactId() {
    return unsubscribedContactId;
  }

  public void setUnsubscribedContactId(Integer unsubscribedContactId) {
    this.unsubscribedContactId = unsubscribedContactId;
  }

  public Chat unread(Integer unread) {
    this.unread = unread;
    return this;
  }

   /**
   * Unread incoming messages count.
   * @return unread
  **/
  @ApiModelProperty(example = "5", required = true, value = "Unread incoming messages count.")
  public Integer getUnread() {
    return unread;
  }

  public void setUnread(Integer unread) {
    this.unread = unread;
  }

  public Chat updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Time when last incoming message arrived at this chat.
   * @return updatedAt
  **/
  @ApiModelProperty(example = "2015-01-08T06:13:21+0000", required = true, value = "Time when last incoming message arrived at this chat.")
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }

  public Chat status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @ApiModelProperty(required = true, value = "")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  public Chat mute(Integer mute) {
    this.mute = mute;
    return this;
  }

   /**
   * Get mute
   * @return mute
  **/
  @ApiModelProperty(example = "0", required = true, value = "")
  public Integer getMute() {
    return mute;
  }

  public void setMute(Integer mute) {
    this.mute = mute;
  }

  public Chat lastMessage(String lastMessage) {
    this.lastMessage = lastMessage;
    return this;
  }

   /**
   * Get lastMessage
   * @return lastMessage
  **/
  @ApiModelProperty(example = "This is test message", required = true, value = "")
  public String getLastMessage() {
    return lastMessage;
  }

  public void setLastMessage(String lastMessage) {
    this.lastMessage = lastMessage;
  }

  public Chat direction(String direction) {
    this.direction = direction;
    return this;
  }

   /**
   * Get direction
   * @return direction
  **/
  @ApiModelProperty(required = true, value = "")
  public String getDirection() {
    return direction;
  }

  public void setDirection(String direction) {
    this.direction = direction;
  }

  public Chat from(String from) {
    this.from = from;
    return this;
  }

   /**
   * Get from
   * @return from
  **/
  @ApiModelProperty(required = true, value = "")
  public String getFrom() {
    return from;
  }

  public void setFrom(String from) {
    this.from = from;
  }

  public Chat mutedUntil(String mutedUntil) {
    this.mutedUntil = mutedUntil;
    return this;
  }

   /**
   * Get mutedUntil
   * @return mutedUntil
  **/
  @ApiModelProperty(required = true, value = "")
  public String getMutedUntil() {
    return mutedUntil;
  }

  public void setMutedUntil(String mutedUntil) {
    this.mutedUntil = mutedUntil;
  }

  public Chat timeLeftMute(Integer timeLeftMute) {
    this.timeLeftMute = timeLeftMute;
    return this;
  }

   /**
   * Get timeLeftMute
   * @return timeLeftMute
  **/
  @ApiModelProperty(required = true, value = "")
  public Integer getTimeLeftMute() {
    return timeLeftMute;
  }

  public void setTimeLeftMute(Integer timeLeftMute) {
    this.timeLeftMute = timeLeftMute;
  }

  public Chat country(Country country) {
    this.country = country;
    return this;
  }

   /**
   * Get country
   * @return country
  **/
  @ApiModelProperty(required = true, value = "")
  public Country getCountry() {
    return country;
  }

  public void setCountry(Country country) {
    this.country = country;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Chat chat = (Chat) o;
    return Objects.equals(this.id, chat.id) &&
        Objects.equals(this.originalId, chat.originalId) &&
        Objects.equals(this.phone, chat.phone) &&
        Objects.equals(this.contact, chat.contact) &&
        Objects.equals(this.unsubscribedContactId, chat.unsubscribedContactId) &&
        Objects.equals(this.unread, chat.unread) &&
        Objects.equals(this.updatedAt, chat.updatedAt) &&
        Objects.equals(this.status, chat.status) &&
        Objects.equals(this.mute, chat.mute) &&
        Objects.equals(this.lastMessage, chat.lastMessage) &&
        Objects.equals(this.direction, chat.direction) &&
        Objects.equals(this.from, chat.from) &&
        Objects.equals(this.mutedUntil, chat.mutedUntil) &&
        Objects.equals(this.timeLeftMute, chat.timeLeftMute) &&
        Objects.equals(this.country, chat.country);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, originalId, phone, contact, unsubscribedContactId, unread, updatedAt, status, mute, lastMessage, direction, from, mutedUntil, timeLeftMute, country);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Chat {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    originalId: ").append(toIndentedString(originalId)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    contact: ").append(toIndentedString(contact)).append("\n");
    sb.append("    unsubscribedContactId: ").append(toIndentedString(unsubscribedContactId)).append("\n");
    sb.append("    unread: ").append(toIndentedString(unread)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    mute: ").append(toIndentedString(mute)).append("\n");
    sb.append("    lastMessage: ").append(toIndentedString(lastMessage)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    mutedUntil: ").append(toIndentedString(mutedUntil)).append("\n");
    sb.append("    timeLeftMute: ").append(toIndentedString(timeLeftMute)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

