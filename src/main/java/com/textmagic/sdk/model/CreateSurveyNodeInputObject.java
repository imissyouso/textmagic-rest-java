/*
 * TextMagic API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.textmagic.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * CreateSurveyNodeInputObject
 */

public class CreateSurveyNodeInputObject {
  /**
   * Node type. \\&#39;a\\&#39; answer; \\&#39;q\\&#39; - question
   */
  @JsonAdapter(NodeTypeEnum.Adapter.class)
  public enum NodeTypeEnum {
    A("a"),
    
    Q("q");

    private String value;

    NodeTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NodeTypeEnum fromValue(String text) {
      for (NodeTypeEnum b : NodeTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<NodeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NodeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NodeTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return NodeTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("nodeType")
  private NodeTypeEnum nodeType = null;

  @SerializedName("label")
  private String label = null;

  @SerializedName("body")
  private String body = null;

  @SerializedName("startNode")
  private Integer startNode = null;

  @SerializedName("sendDelay")
  private Integer sendDelay = null;

  public CreateSurveyNodeInputObject nodeType(NodeTypeEnum nodeType) {
    this.nodeType = nodeType;
    return this;
  }

   /**
   * Node type. \\&#39;a\\&#39; answer; \\&#39;q\\&#39; - question
   * @return nodeType
  **/
  @ApiModelProperty(example = "q", value = "Node type. \\'a\\' answer; \\'q\\' - question")
  public NodeTypeEnum getNodeType() {
    return nodeType;
  }

  public void setNodeType(NodeTypeEnum nodeType) {
    this.nodeType = nodeType;
  }

  public CreateSurveyNodeInputObject label(String label) {
    this.label = label;
    return this;
  }

   /**
   * Node label
   * @return label
  **/
  @ApiModelProperty(example = "Question 1", value = "Node label")
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }

  public CreateSurveyNodeInputObject body(String body) {
    this.body = body;
    return this;
  }

   /**
   * Node body
   * @return body
  **/
  @ApiModelProperty(example = "Test node body", value = "Node body")
  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }

  public CreateSurveyNodeInputObject startNode(Integer startNode) {
    this.startNode = startNode;
    return this;
  }

   /**
   * Start node id
   * @return startNode
  **/
  @ApiModelProperty(example = "1", value = "Start node id")
  public Integer getStartNode() {
    return startNode;
  }

  public void setStartNode(Integer startNode) {
    this.startNode = startNode;
  }

  public CreateSurveyNodeInputObject sendDelay(Integer sendDelay) {
    this.sendDelay = sendDelay;
    return this;
  }

   /**
   * Define delay for sending question to recipients after previous answer.
   * @return sendDelay
  **/
  @ApiModelProperty(example = "1", value = "Define delay for sending question to recipients after previous answer.")
  public Integer getSendDelay() {
    return sendDelay;
  }

  public void setSendDelay(Integer sendDelay) {
    this.sendDelay = sendDelay;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateSurveyNodeInputObject createSurveyNodeInputObject = (CreateSurveyNodeInputObject) o;
    return Objects.equals(this.nodeType, createSurveyNodeInputObject.nodeType) &&
        Objects.equals(this.label, createSurveyNodeInputObject.label) &&
        Objects.equals(this.body, createSurveyNodeInputObject.body) &&
        Objects.equals(this.startNode, createSurveyNodeInputObject.startNode) &&
        Objects.equals(this.sendDelay, createSurveyNodeInputObject.sendDelay);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nodeType, label, body, startNode, sendDelay);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateSurveyNodeInputObject {\n");
    
    sb.append("    nodeType: ").append(toIndentedString(nodeType)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    startNode: ").append(toIndentedString(startNode)).append("\n");
    sb.append("    sendDelay: ").append(toIndentedString(sendDelay)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

