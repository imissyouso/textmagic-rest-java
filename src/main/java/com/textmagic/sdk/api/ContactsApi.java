/*
 * TextMagic API Documentation
 * # Overview ## Introduction test <img style=\"float: right; margin-left: 10px; width: 100px;\" src=\"images/phone.png\"> TextMagic SMS API is a platform for building your own messaging app using our messaging infrastructure. It allows you to send and receive SMS text messages, query information about inbound and outbound messages, manage contacts, create templates (i.e. message formats and static texts) and schedule recurrent SMS messages as well as process bulk SMS messages. <button name=\"button\" onclick=\"http://www.google.com\" class=\"btn\">Try TextMagic API for Free</button>  ### Two Ways to Use TextMagic API * [REST API](https://www.textmagic.com/docs/api/start/) – get full access to TextMagic’s messaging gateway features * [Email to SMS API](https://www.textmagic.com/docs/api/send-email-to-sms/) – set up two-way SMS communication without the need to write any additional code  ### Code Libraries We have created a set of client libraries for the most popular programming languages (such as REST API Java and REST API PHP). These libraries allow you to integrate our API into your code in minutes. Just choose your preferred language to get started:  ## Getting started Get Started with the TextMagic REST API To start sending text messages using the TextMagic REST API, just follow these steps: 1. Generate the API credentials 1. Connect to our API endpoint This page provides all the information you need to get started. Here, we explain the following steps:  How to obtain the API credentials The API endpoint How the REST API works The next step How to obtain the API credentials  ### How to obtain the API credentials To start sending text messages, you need to create an API key. API keys are similar to an account password; the difference is that an API key only provides access to the API: you cannot log in to TextMagic Online using the API key.  Your program sends the login credentials with each API request as HTTP headers: `X-TM-Username` is your TextMagic username, while `X-TM-Key` is your API key.  How to obtain an API key:  1. Log in to TextMagic (or start a free trial if you haven’t registered yet). 1. Go to the API settings page. 1. Click the Add new API key button. 1. Enter an app name for this key. Note, it’s just a label, so pick any name. 1. Click Generate new key. 1. You should now see your new API key in the green notification banner above the table:  ![alt text](images/credentials.png)  > Note for API v1 users > V1 keys are not compatible with the V2 version of the TextMagic REST API, so you will need to generate a new API key to use the V2 endpoint.  ### The API endpoint The TextMagic REST API endpoint is: ``` https://rest.textmagic.com/api/v2 ``` All the URLs referenced in this documentation should use this base URL.  ### How the REST API works REST APIs use the HTTP protocol to send and receive messages. REST messages are usually encoded as JSON documents and are an improvement over older methods such as the XML based SOAP protocol. REST APIs use the same set of methods that web browsers use: POST, GET, PUT or DELETE. These correspond to the CRUD operations: create, read, update and delete. Often, REST URIs provide direct CRUD access to entities or collections of entities, for example: http://api.foo.com/people. In this instance, to delete a person’s endpoint, you might simply call the endpoint DELETE http://api.foo.com/people/{id}. REST makes these types of operations simple.  > Example > > Let’s take the entity most often used in messaging: contacts. Imagine you want to perform operations on your contacts list: well, it’s only a matter of calling the following endpoints: > * GET /api/v2/contacts (get all of your contacts) > * GET /api/v2/contacts/{id} (get a specific contact) > * POST /api/v2/contacts (create a new contact) > * PUT /api/v2/contacts/{id} (update an existing contact) > * DELETE /api/v2/contacts/{id} (delete an existing contact) It’s that simple! In fact, that’s all you need to do to manage the contacts in your TextMagic account!  ## Sandbox Sandbox is a tool to test TextMagic REST API requests without the need to install any applications or write any code. Here, we explain the following details about Sandbox: * The credentials area * Command documentation * How it works  <a href=\"\">Go to TextMagic Sandbox</a>  ### The credentials area To make requests using your TextMagic account, you need to enter your account username and your API key into the corresponding fields. You may also Save them in your browser or press Clear to erase them.  ![alt text](images/sandbox.png) 
 *
 * OpenAPI spec version: 2
 * Contact: support@textmagi.biz
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.textmagic.sdk.api;

import com.textmagic.sdk.ApiCallback;
import com.textmagic.sdk.ApiClient;
import com.textmagic.sdk.ApiException;
import com.textmagic.sdk.ApiResponse;
import com.textmagic.sdk.Configuration;
import com.textmagic.sdk.Pair;
import com.textmagic.sdk.ProgressRequestBody;
import com.textmagic.sdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.textmagic.sdk.model.BadRequestResponse;
import com.textmagic.sdk.model.BlockContactInputObject;
import com.textmagic.sdk.model.Contact;
import com.textmagic.sdk.model.CreateContactInputObject;
import com.textmagic.sdk.model.DeleteContactsByIdsInputObject;
import java.io.File;
import com.textmagic.sdk.model.GetBlockedContactsResponse;
import com.textmagic.sdk.model.GetContactsAutocompleteResponse;
import com.textmagic.sdk.model.GetContactsResponse;
import com.textmagic.sdk.model.GetFavouritesResponse;
import com.textmagic.sdk.model.GetUnsubscribersResponse;
import com.textmagic.sdk.model.NotFoundResponse;
import com.textmagic.sdk.model.ResourceLinkResponse;
import com.textmagic.sdk.model.SearchContactsResponse;
import com.textmagic.sdk.model.UnauthorizedResponse;
import com.textmagic.sdk.model.UnblockContactInputObject;
import com.textmagic.sdk.model.UnblockContactsBulkInputObject;
import com.textmagic.sdk.model.UnsubscribeContactInputObject;
import com.textmagic.sdk.model.UnsubscribedContact;
import com.textmagic.sdk.model.UpdateContactInputObject;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ContactsApi {
    private ApiClient apiClient;

    public ContactsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ContactsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for blockContact
     * @param blockContactInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call blockContactCall(BlockContactInputObject blockContactInputObject, Boolean xIgnoreNullValues, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = blockContactInputObject;

        // create path and map variables
        String localVarPath = "/api/v2/contacts/block";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xIgnoreNullValues != null)
        localVarHeaderParams.put("X-Ignore-Null-Values", apiClient.parameterToString(xIgnoreNullValues));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call blockContactValidateBeforeCall(BlockContactInputObject blockContactInputObject, Boolean xIgnoreNullValues, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'blockContactInputObject' is set
        if (blockContactInputObject == null) {
            throw new ApiException("Missing the required parameter 'blockContactInputObject' when calling blockContact(Async)");
        }
        

        com.squareup.okhttp.Call call = blockContactCall(blockContactInputObject, xIgnoreNullValues, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Block contact from inbound and outbound communication by phone number.
     * 
     * @param blockContactInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @return ResourceLinkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResourceLinkResponse blockContact(BlockContactInputObject blockContactInputObject, Boolean xIgnoreNullValues) throws ApiException {
        ApiResponse<ResourceLinkResponse> resp = blockContactWithHttpInfo(blockContactInputObject, xIgnoreNullValues);
        return resp.getData();
    }

    /**
     * Block contact from inbound and outbound communication by phone number.
     * 
     * @param blockContactInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @return ApiResponse&lt;ResourceLinkResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResourceLinkResponse> blockContactWithHttpInfo(BlockContactInputObject blockContactInputObject, Boolean xIgnoreNullValues) throws ApiException {
        com.squareup.okhttp.Call call = blockContactValidateBeforeCall(blockContactInputObject, xIgnoreNullValues, null, null);
        Type localVarReturnType = new TypeToken<ResourceLinkResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Block contact from inbound and outbound communication by phone number. (asynchronously)
     * 
     * @param blockContactInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call blockContactAsync(BlockContactInputObject blockContactInputObject, Boolean xIgnoreNullValues, final ApiCallback<ResourceLinkResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = blockContactValidateBeforeCall(blockContactInputObject, xIgnoreNullValues, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResourceLinkResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createContact
     * @param createContactInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContactCall(CreateContactInputObject createContactInputObject, Boolean xIgnoreNullValues, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = createContactInputObject;

        // create path and map variables
        String localVarPath = "/api/v2/contacts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xIgnoreNullValues != null)
        localVarHeaderParams.put("X-Ignore-Null-Values", apiClient.parameterToString(xIgnoreNullValues));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContactValidateBeforeCall(CreateContactInputObject createContactInputObject, Boolean xIgnoreNullValues, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'createContactInputObject' is set
        if (createContactInputObject == null) {
            throw new ApiException("Missing the required parameter 'createContactInputObject' when calling createContact(Async)");
        }
        

        com.squareup.okhttp.Call call = createContactCall(createContactInputObject, xIgnoreNullValues, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a new contact from the submitted data.
     * 
     * @param createContactInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @return ResourceLinkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResourceLinkResponse createContact(CreateContactInputObject createContactInputObject, Boolean xIgnoreNullValues) throws ApiException {
        ApiResponse<ResourceLinkResponse> resp = createContactWithHttpInfo(createContactInputObject, xIgnoreNullValues);
        return resp.getData();
    }

    /**
     * Create a new contact from the submitted data.
     * 
     * @param createContactInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @return ApiResponse&lt;ResourceLinkResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResourceLinkResponse> createContactWithHttpInfo(CreateContactInputObject createContactInputObject, Boolean xIgnoreNullValues) throws ApiException {
        com.squareup.okhttp.Call call = createContactValidateBeforeCall(createContactInputObject, xIgnoreNullValues, null, null);
        Type localVarReturnType = new TypeToken<ResourceLinkResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new contact from the submitted data. (asynchronously)
     * 
     * @param createContactInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContactAsync(CreateContactInputObject createContactInputObject, Boolean xIgnoreNullValues, final ApiCallback<ResourceLinkResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContactValidateBeforeCall(createContactInputObject, xIgnoreNullValues, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResourceLinkResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteAllContacts
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAllContactsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/contact/all";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAllContactsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = deleteAllContactsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete all contacts.
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteAllContacts() throws ApiException {
        deleteAllContactsWithHttpInfo();
    }

    /**
     * Delete all contacts.
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteAllContactsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = deleteAllContactsValidateBeforeCall(null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete all contacts. (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAllContactsAsync(final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAllContactsValidateBeforeCall(progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContact
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContactCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/contacts/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContactValidateBeforeCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteContact(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContactCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a single contact.
     * 
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContact(Integer id) throws ApiException {
        deleteContactWithHttpInfo(id);
    }

    /**
     * Delete a single contact.
     * 
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContactWithHttpInfo(Integer id) throws ApiException {
        com.squareup.okhttp.Call call = deleteContactValidateBeforeCall(id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a single contact. (asynchronously)
     * 
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContactAsync(Integer id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContactValidateBeforeCall(id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContactAvatar
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContactAvatarCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/contacts/{id}/avatar"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContactAvatarValidateBeforeCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteContactAvatar(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContactAvatarCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete an avatar for the contact.
     * 
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContactAvatar(Integer id) throws ApiException {
        deleteContactAvatarWithHttpInfo(id);
    }

    /**
     * Delete an avatar for the contact.
     * 
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContactAvatarWithHttpInfo(Integer id) throws ApiException {
        com.squareup.okhttp.Call call = deleteContactAvatarValidateBeforeCall(id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an avatar for the contact. (asynchronously)
     * 
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContactAvatarAsync(Integer id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContactAvatarValidateBeforeCall(id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteContactsByIds
     * @param deleteContactsByIdsInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContactsByIdsCall(DeleteContactsByIdsInputObject deleteContactsByIdsInputObject, Boolean xIgnoreNullValues, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = deleteContactsByIdsInputObject;

        // create path and map variables
        String localVarPath = "/api/v2/contacts/delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xIgnoreNullValues != null)
        localVarHeaderParams.put("X-Ignore-Null-Values", apiClient.parameterToString(xIgnoreNullValues));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContactsByIdsValidateBeforeCall(DeleteContactsByIdsInputObject deleteContactsByIdsInputObject, Boolean xIgnoreNullValues, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deleteContactsByIdsInputObject' is set
        if (deleteContactsByIdsInputObject == null) {
            throw new ApiException("Missing the required parameter 'deleteContactsByIdsInputObject' when calling deleteContactsByIds(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContactsByIdsCall(deleteContactsByIdsInputObject, xIgnoreNullValues, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete contact by given ID(s) or delete all contacts.
     * 
     * @param deleteContactsByIdsInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteContactsByIds(DeleteContactsByIdsInputObject deleteContactsByIdsInputObject, Boolean xIgnoreNullValues) throws ApiException {
        deleteContactsByIdsWithHttpInfo(deleteContactsByIdsInputObject, xIgnoreNullValues);
    }

    /**
     * Delete contact by given ID(s) or delete all contacts.
     * 
     * @param deleteContactsByIdsInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteContactsByIdsWithHttpInfo(DeleteContactsByIdsInputObject deleteContactsByIdsInputObject, Boolean xIgnoreNullValues) throws ApiException {
        com.squareup.okhttp.Call call = deleteContactsByIdsValidateBeforeCall(deleteContactsByIdsInputObject, xIgnoreNullValues, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete contact by given ID(s) or delete all contacts. (asynchronously)
     * 
     * @param deleteContactsByIdsInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContactsByIdsAsync(DeleteContactsByIdsInputObject deleteContactsByIdsInputObject, Boolean xIgnoreNullValues, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContactsByIdsValidateBeforeCall(deleteContactsByIdsInputObject, xIgnoreNullValues, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getBlockedContacts
     * @param page Fetch specified results page (optional, default to 1)
     * @param limit How many results to return (optional, default to 10)
     * @param query Find blocked contacts by specified search query (optional)
     * @param orderBy Order results by some field. Default is id (optional, default to id)
     * @param direction Order direction. Default is desc (optional, default to desc)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBlockedContactsCall(Integer page, Integer limit, String query, String orderBy, String direction, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/contacts/block/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (query != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("query", query));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderBy", orderBy));
        if (direction != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("direction", direction));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBlockedContactsValidateBeforeCall(Integer page, Integer limit, String query, String orderBy, String direction, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getBlockedContactsCall(page, limit, query, orderBy, direction, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get blocked contacts.
     * 
     * @param page Fetch specified results page (optional, default to 1)
     * @param limit How many results to return (optional, default to 10)
     * @param query Find blocked contacts by specified search query (optional)
     * @param orderBy Order results by some field. Default is id (optional, default to id)
     * @param direction Order direction. Default is desc (optional, default to desc)
     * @return GetBlockedContactsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetBlockedContactsResponse getBlockedContacts(Integer page, Integer limit, String query, String orderBy, String direction) throws ApiException {
        ApiResponse<GetBlockedContactsResponse> resp = getBlockedContactsWithHttpInfo(page, limit, query, orderBy, direction);
        return resp.getData();
    }

    /**
     * Get blocked contacts.
     * 
     * @param page Fetch specified results page (optional, default to 1)
     * @param limit How many results to return (optional, default to 10)
     * @param query Find blocked contacts by specified search query (optional)
     * @param orderBy Order results by some field. Default is id (optional, default to id)
     * @param direction Order direction. Default is desc (optional, default to desc)
     * @return ApiResponse&lt;GetBlockedContactsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetBlockedContactsResponse> getBlockedContactsWithHttpInfo(Integer page, Integer limit, String query, String orderBy, String direction) throws ApiException {
        com.squareup.okhttp.Call call = getBlockedContactsValidateBeforeCall(page, limit, query, orderBy, direction, null, null);
        Type localVarReturnType = new TypeToken<GetBlockedContactsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get blocked contacts. (asynchronously)
     * 
     * @param page Fetch specified results page (optional, default to 1)
     * @param limit How many results to return (optional, default to 10)
     * @param query Find blocked contacts by specified search query (optional)
     * @param orderBy Order results by some field. Default is id (optional, default to id)
     * @param direction Order direction. Default is desc (optional, default to desc)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBlockedContactsAsync(Integer page, Integer limit, String query, String orderBy, String direction, final ApiCallback<GetBlockedContactsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBlockedContactsValidateBeforeCall(page, limit, query, orderBy, direction, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetBlockedContactsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getContact
     * @param id The contact id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getContactCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/contacts/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getContactValidateBeforeCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getContact(Async)");
        }
        

        com.squareup.okhttp.Call call = getContactCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a single contact.
     * 
     * @param id The contact id (required)
     * @return Contact
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Contact getContact(Integer id) throws ApiException {
        ApiResponse<Contact> resp = getContactWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get a single contact.
     * 
     * @param id The contact id (required)
     * @return ApiResponse&lt;Contact&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Contact> getContactWithHttpInfo(Integer id) throws ApiException {
        com.squareup.okhttp.Call call = getContactValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<Contact>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a single contact. (asynchronously)
     * 
     * @param id The contact id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getContactAsync(Integer id, final ApiCallback<Contact> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getContactValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Contact>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getContactByPhone
     * @param phone  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getContactByPhoneCall(String phone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/contacts/phone/{phone}"
            .replaceAll("\\{" + "phone" + "\\}", apiClient.escapeString(phone.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getContactByPhoneValidateBeforeCall(String phone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'phone' is set
        if (phone == null) {
            throw new ApiException("Missing the required parameter 'phone' when calling getContactByPhone(Async)");
        }
        

        com.squareup.okhttp.Call call = getContactByPhoneCall(phone, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a single contact by phone number.
     * 
     * @param phone  (required)
     * @return Contact
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Contact getContactByPhone(String phone) throws ApiException {
        ApiResponse<Contact> resp = getContactByPhoneWithHttpInfo(phone);
        return resp.getData();
    }

    /**
     * Get a single contact by phone number.
     * 
     * @param phone  (required)
     * @return ApiResponse&lt;Contact&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Contact> getContactByPhoneWithHttpInfo(String phone) throws ApiException {
        com.squareup.okhttp.Call call = getContactByPhoneValidateBeforeCall(phone, null, null);
        Type localVarReturnType = new TypeToken<Contact>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a single contact by phone number. (asynchronously)
     * 
     * @param phone  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getContactByPhoneAsync(String phone, final ApiCallback<Contact> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getContactByPhoneValidateBeforeCall(phone, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Contact>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getContactIfBlocked
     * @param phone Phone number to check (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getContactIfBlockedCall(String phone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/contacts/block/phone";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (phone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("phone", phone));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getContactIfBlockedValidateBeforeCall(String phone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'phone' is set
        if (phone == null) {
            throw new ApiException("Missing the required parameter 'phone' when calling getContactIfBlocked(Async)");
        }
        

        com.squareup.okhttp.Call call = getContactIfBlockedCall(phone, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Check is that phone number blocked
     * 
     * @param phone Phone number to check (required)
     * @return Contact
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Contact getContactIfBlocked(String phone) throws ApiException {
        ApiResponse<Contact> resp = getContactIfBlockedWithHttpInfo(phone);
        return resp.getData();
    }

    /**
     * Check is that phone number blocked
     * 
     * @param phone Phone number to check (required)
     * @return ApiResponse&lt;Contact&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Contact> getContactIfBlockedWithHttpInfo(String phone) throws ApiException {
        com.squareup.okhttp.Call call = getContactIfBlockedValidateBeforeCall(phone, null, null);
        Type localVarReturnType = new TypeToken<Contact>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Check is that phone number blocked (asynchronously)
     * 
     * @param phone Phone number to check (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getContactIfBlockedAsync(String phone, final ApiCallback<Contact> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getContactIfBlockedValidateBeforeCall(phone, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Contact>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getContacts
     * @param page Fetch specified results page (optional, default to 1)
     * @param limit How many results to return (optional, default to 10)
     * @param shared Should shared contacts to be included (optional, default to 0)
     * @param orderBy Order results by some field. Default is id (optional, default to id)
     * @param direction Order direction. Default is desc (optional, default to desc)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getContactsCall(Integer page, Integer limit, Integer shared, String orderBy, String direction, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/contacts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (shared != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("shared", shared));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderBy", orderBy));
        if (direction != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("direction", direction));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getContactsValidateBeforeCall(Integer page, Integer limit, Integer shared, String orderBy, String direction, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getContactsCall(page, limit, shared, orderBy, direction, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all user contacts.
     * 
     * @param page Fetch specified results page (optional, default to 1)
     * @param limit How many results to return (optional, default to 10)
     * @param shared Should shared contacts to be included (optional, default to 0)
     * @param orderBy Order results by some field. Default is id (optional, default to id)
     * @param direction Order direction. Default is desc (optional, default to desc)
     * @return GetContactsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetContactsResponse getContacts(Integer page, Integer limit, Integer shared, String orderBy, String direction) throws ApiException {
        ApiResponse<GetContactsResponse> resp = getContactsWithHttpInfo(page, limit, shared, orderBy, direction);
        return resp.getData();
    }

    /**
     * Get all user contacts.
     * 
     * @param page Fetch specified results page (optional, default to 1)
     * @param limit How many results to return (optional, default to 10)
     * @param shared Should shared contacts to be included (optional, default to 0)
     * @param orderBy Order results by some field. Default is id (optional, default to id)
     * @param direction Order direction. Default is desc (optional, default to desc)
     * @return ApiResponse&lt;GetContactsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetContactsResponse> getContactsWithHttpInfo(Integer page, Integer limit, Integer shared, String orderBy, String direction) throws ApiException {
        com.squareup.okhttp.Call call = getContactsValidateBeforeCall(page, limit, shared, orderBy, direction, null, null);
        Type localVarReturnType = new TypeToken<GetContactsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all user contacts. (asynchronously)
     * 
     * @param page Fetch specified results page (optional, default to 1)
     * @param limit How many results to return (optional, default to 10)
     * @param shared Should shared contacts to be included (optional, default to 0)
     * @param orderBy Order results by some field. Default is id (optional, default to id)
     * @param direction Order direction. Default is desc (optional, default to desc)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getContactsAsync(Integer page, Integer limit, Integer shared, String orderBy, String direction, final ApiCallback<GetContactsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getContactsValidateBeforeCall(page, limit, shared, orderBy, direction, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetContactsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getContactsAutocomplete
     * @param query Find recipients by specified search query (required)
     * @param limit How many results to return (optional, default to 10)
     * @param lists Should lists be returned or not (optional, default to 0)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getContactsAutocompleteCall(String query, Integer limit, Integer lists, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/contacts/autocomplete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (query != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("query", query));
        if (lists != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lists", lists));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getContactsAutocompleteValidateBeforeCall(String query, Integer limit, Integer lists, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling getContactsAutocomplete(Async)");
        }
        

        com.squareup.okhttp.Call call = getContactsAutocompleteCall(query, limit, lists, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get contacts autocomplete suggestions by given search term.
     * 
     * @param query Find recipients by specified search query (required)
     * @param limit How many results to return (optional, default to 10)
     * @param lists Should lists be returned or not (optional, default to 0)
     * @return List&lt;GetContactsAutocompleteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<GetContactsAutocompleteResponse> getContactsAutocomplete(String query, Integer limit, Integer lists) throws ApiException {
        ApiResponse<List<GetContactsAutocompleteResponse>> resp = getContactsAutocompleteWithHttpInfo(query, limit, lists);
        return resp.getData();
    }

    /**
     * Get contacts autocomplete suggestions by given search term.
     * 
     * @param query Find recipients by specified search query (required)
     * @param limit How many results to return (optional, default to 10)
     * @param lists Should lists be returned or not (optional, default to 0)
     * @return ApiResponse&lt;List&lt;GetContactsAutocompleteResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<GetContactsAutocompleteResponse>> getContactsAutocompleteWithHttpInfo(String query, Integer limit, Integer lists) throws ApiException {
        com.squareup.okhttp.Call call = getContactsAutocompleteValidateBeforeCall(query, limit, lists, null, null);
        Type localVarReturnType = new TypeToken<List<GetContactsAutocompleteResponse>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get contacts autocomplete suggestions by given search term. (asynchronously)
     * 
     * @param query Find recipients by specified search query (required)
     * @param limit How many results to return (optional, default to 10)
     * @param lists Should lists be returned or not (optional, default to 0)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getContactsAutocompleteAsync(String query, Integer limit, Integer lists, final ApiCallback<List<GetContactsAutocompleteResponse>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getContactsAutocompleteValidateBeforeCall(query, limit, lists, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<GetContactsAutocompleteResponse>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFavourites
     * @param page Fetch specified results page (optional, default to 1)
     * @param limit How many results to return (optional, default to 10)
     * @param query Find contacts or lists by specified search query (optional, default to A)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFavouritesCall(Integer page, Integer limit, String query, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/contacts/favorite";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (query != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("query", query));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFavouritesValidateBeforeCall(Integer page, Integer limit, String query, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getFavouritesCall(page, limit, query, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get favorite contacts and lists.
     * 
     * @param page Fetch specified results page (optional, default to 1)
     * @param limit How many results to return (optional, default to 10)
     * @param query Find contacts or lists by specified search query (optional, default to A)
     * @return GetFavouritesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetFavouritesResponse getFavourites(Integer page, Integer limit, String query) throws ApiException {
        ApiResponse<GetFavouritesResponse> resp = getFavouritesWithHttpInfo(page, limit, query);
        return resp.getData();
    }

    /**
     * Get favorite contacts and lists.
     * 
     * @param page Fetch specified results page (optional, default to 1)
     * @param limit How many results to return (optional, default to 10)
     * @param query Find contacts or lists by specified search query (optional, default to A)
     * @return ApiResponse&lt;GetFavouritesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetFavouritesResponse> getFavouritesWithHttpInfo(Integer page, Integer limit, String query) throws ApiException {
        com.squareup.okhttp.Call call = getFavouritesValidateBeforeCall(page, limit, query, null, null);
        Type localVarReturnType = new TypeToken<GetFavouritesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get favorite contacts and lists. (asynchronously)
     * 
     * @param page Fetch specified results page (optional, default to 1)
     * @param limit How many results to return (optional, default to 10)
     * @param query Find contacts or lists by specified search query (optional, default to A)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFavouritesAsync(Integer page, Integer limit, String query, final ApiCallback<GetFavouritesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFavouritesValidateBeforeCall(page, limit, query, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetFavouritesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUnsubscribedContact
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUnsubscribedContactCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/unsubscribers/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUnsubscribedContactValidateBeforeCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getUnsubscribedContact(Async)");
        }
        

        com.squareup.okhttp.Call call = getUnsubscribedContactCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a single unsubscribed contact.
     * 
     * @param id  (required)
     * @return UnsubscribedContact
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UnsubscribedContact getUnsubscribedContact(Integer id) throws ApiException {
        ApiResponse<UnsubscribedContact> resp = getUnsubscribedContactWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get a single unsubscribed contact.
     * 
     * @param id  (required)
     * @return ApiResponse&lt;UnsubscribedContact&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UnsubscribedContact> getUnsubscribedContactWithHttpInfo(Integer id) throws ApiException {
        com.squareup.okhttp.Call call = getUnsubscribedContactValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<UnsubscribedContact>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a single unsubscribed contact. (asynchronously)
     * 
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUnsubscribedContactAsync(Integer id, final ApiCallback<UnsubscribedContact> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUnsubscribedContactValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UnsubscribedContact>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUnsubscribers
     * @param page Fetch specified results page (optional, default to 1)
     * @param limit How many results to return (optional, default to 10)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUnsubscribersCall(Integer page, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/unsubscribers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUnsubscribersValidateBeforeCall(Integer page, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getUnsubscribersCall(page, limit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all contact have unsubscribed from your communication.
     * 
     * @param page Fetch specified results page (optional, default to 1)
     * @param limit How many results to return (optional, default to 10)
     * @return GetUnsubscribersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetUnsubscribersResponse getUnsubscribers(Integer page, Integer limit) throws ApiException {
        ApiResponse<GetUnsubscribersResponse> resp = getUnsubscribersWithHttpInfo(page, limit);
        return resp.getData();
    }

    /**
     * Get all contact have unsubscribed from your communication.
     * 
     * @param page Fetch specified results page (optional, default to 1)
     * @param limit How many results to return (optional, default to 10)
     * @return ApiResponse&lt;GetUnsubscribersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetUnsubscribersResponse> getUnsubscribersWithHttpInfo(Integer page, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = getUnsubscribersValidateBeforeCall(page, limit, null, null);
        Type localVarReturnType = new TypeToken<GetUnsubscribersResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all contact have unsubscribed from your communication. (asynchronously)
     * 
     * @param page Fetch specified results page (optional, default to 1)
     * @param limit How many results to return (optional, default to 10)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUnsubscribersAsync(Integer page, Integer limit, final ApiCallback<GetUnsubscribersResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUnsubscribersValidateBeforeCall(page, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetUnsubscribersResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchContacts
     * @param page Fetch specified results page (optional, default to 1)
     * @param limit How many results to return (optional, default to 10)
     * @param shared Should shared contacts to be included (optional, default to 0)
     * @param ids Find contact by ID(s) (optional)
     * @param listId Find contact by List ID (optional)
     * @param includeBlocked Should blocked contacts to be included (optional)
     * @param query Find contacts by specified search query (optional)
     * @param local Treat phone number passed in &#39;query&#39; field as local. Default is 0 (optional, default to 0)
     * @param country 2-letter ISO country code for local phone numbers, used when &#39;local&#39; is set to true. Default is account country (optional)
     * @param orderBy Order results by some field. Default is id (optional, default to id)
     * @param direction Order direction. Default is desc (optional, default to desc)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchContactsCall(Integer page, Integer limit, Integer shared, String ids, Integer listId, Integer includeBlocked, String query, Integer local, String country, String orderBy, String direction, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/contacts/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (shared != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("shared", shared));
        if (ids != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ids", ids));
        if (listId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("listId", listId));
        if (includeBlocked != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("includeBlocked", includeBlocked));
        if (query != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("query", query));
        if (local != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("local", local));
        if (country != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("country", country));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderBy", orderBy));
        if (direction != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("direction", direction));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchContactsValidateBeforeCall(Integer page, Integer limit, Integer shared, String ids, Integer listId, Integer includeBlocked, String query, Integer local, String country, String orderBy, String direction, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = searchContactsCall(page, limit, shared, ids, listId, includeBlocked, query, local, country, orderBy, direction, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Find user contacts by given parameters.
     * 
     * @param page Fetch specified results page (optional, default to 1)
     * @param limit How many results to return (optional, default to 10)
     * @param shared Should shared contacts to be included (optional, default to 0)
     * @param ids Find contact by ID(s) (optional)
     * @param listId Find contact by List ID (optional)
     * @param includeBlocked Should blocked contacts to be included (optional)
     * @param query Find contacts by specified search query (optional)
     * @param local Treat phone number passed in &#39;query&#39; field as local. Default is 0 (optional, default to 0)
     * @param country 2-letter ISO country code for local phone numbers, used when &#39;local&#39; is set to true. Default is account country (optional)
     * @param orderBy Order results by some field. Default is id (optional, default to id)
     * @param direction Order direction. Default is desc (optional, default to desc)
     * @return SearchContactsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SearchContactsResponse searchContacts(Integer page, Integer limit, Integer shared, String ids, Integer listId, Integer includeBlocked, String query, Integer local, String country, String orderBy, String direction) throws ApiException {
        ApiResponse<SearchContactsResponse> resp = searchContactsWithHttpInfo(page, limit, shared, ids, listId, includeBlocked, query, local, country, orderBy, direction);
        return resp.getData();
    }

    /**
     * Find user contacts by given parameters.
     * 
     * @param page Fetch specified results page (optional, default to 1)
     * @param limit How many results to return (optional, default to 10)
     * @param shared Should shared contacts to be included (optional, default to 0)
     * @param ids Find contact by ID(s) (optional)
     * @param listId Find contact by List ID (optional)
     * @param includeBlocked Should blocked contacts to be included (optional)
     * @param query Find contacts by specified search query (optional)
     * @param local Treat phone number passed in &#39;query&#39; field as local. Default is 0 (optional, default to 0)
     * @param country 2-letter ISO country code for local phone numbers, used when &#39;local&#39; is set to true. Default is account country (optional)
     * @param orderBy Order results by some field. Default is id (optional, default to id)
     * @param direction Order direction. Default is desc (optional, default to desc)
     * @return ApiResponse&lt;SearchContactsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SearchContactsResponse> searchContactsWithHttpInfo(Integer page, Integer limit, Integer shared, String ids, Integer listId, Integer includeBlocked, String query, Integer local, String country, String orderBy, String direction) throws ApiException {
        com.squareup.okhttp.Call call = searchContactsValidateBeforeCall(page, limit, shared, ids, listId, includeBlocked, query, local, country, orderBy, direction, null, null);
        Type localVarReturnType = new TypeToken<SearchContactsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Find user contacts by given parameters. (asynchronously)
     * 
     * @param page Fetch specified results page (optional, default to 1)
     * @param limit How many results to return (optional, default to 10)
     * @param shared Should shared contacts to be included (optional, default to 0)
     * @param ids Find contact by ID(s) (optional)
     * @param listId Find contact by List ID (optional)
     * @param includeBlocked Should blocked contacts to be included (optional)
     * @param query Find contacts by specified search query (optional)
     * @param local Treat phone number passed in &#39;query&#39; field as local. Default is 0 (optional, default to 0)
     * @param country 2-letter ISO country code for local phone numbers, used when &#39;local&#39; is set to true. Default is account country (optional)
     * @param orderBy Order results by some field. Default is id (optional, default to id)
     * @param direction Order direction. Default is desc (optional, default to desc)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchContactsAsync(Integer page, Integer limit, Integer shared, String ids, Integer listId, Integer includeBlocked, String query, Integer local, String country, String orderBy, String direction, final ApiCallback<SearchContactsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchContactsValidateBeforeCall(page, limit, shared, ids, listId, includeBlocked, query, local, country, orderBy, direction, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SearchContactsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for unblockContact
     * @param unblockContactInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call unblockContactCall(UnblockContactInputObject unblockContactInputObject, Boolean xIgnoreNullValues, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = unblockContactInputObject;

        // create path and map variables
        String localVarPath = "/api/v2/contacts/unblock";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xIgnoreNullValues != null)
        localVarHeaderParams.put("X-Ignore-Null-Values", apiClient.parameterToString(xIgnoreNullValues));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call unblockContactValidateBeforeCall(UnblockContactInputObject unblockContactInputObject, Boolean xIgnoreNullValues, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'unblockContactInputObject' is set
        if (unblockContactInputObject == null) {
            throw new ApiException("Missing the required parameter 'unblockContactInputObject' when calling unblockContact(Async)");
        }
        

        com.squareup.okhttp.Call call = unblockContactCall(unblockContactInputObject, xIgnoreNullValues, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Unblock contact by phone number.
     * 
     * @param unblockContactInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void unblockContact(UnblockContactInputObject unblockContactInputObject, Boolean xIgnoreNullValues) throws ApiException {
        unblockContactWithHttpInfo(unblockContactInputObject, xIgnoreNullValues);
    }

    /**
     * Unblock contact by phone number.
     * 
     * @param unblockContactInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> unblockContactWithHttpInfo(UnblockContactInputObject unblockContactInputObject, Boolean xIgnoreNullValues) throws ApiException {
        com.squareup.okhttp.Call call = unblockContactValidateBeforeCall(unblockContactInputObject, xIgnoreNullValues, null, null);
        return apiClient.execute(call);
    }

    /**
     * Unblock contact by phone number. (asynchronously)
     * 
     * @param unblockContactInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call unblockContactAsync(UnblockContactInputObject unblockContactInputObject, Boolean xIgnoreNullValues, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = unblockContactValidateBeforeCall(unblockContactInputObject, xIgnoreNullValues, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for unblockContactsBulk
     * @param unblockContactsBulkInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call unblockContactsBulkCall(UnblockContactsBulkInputObject unblockContactsBulkInputObject, Boolean xIgnoreNullValues, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = unblockContactsBulkInputObject;

        // create path and map variables
        String localVarPath = "/api/v2/contacts/unblock/bulk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xIgnoreNullValues != null)
        localVarHeaderParams.put("X-Ignore-Null-Values", apiClient.parameterToString(xIgnoreNullValues));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call unblockContactsBulkValidateBeforeCall(UnblockContactsBulkInputObject unblockContactsBulkInputObject, Boolean xIgnoreNullValues, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'unblockContactsBulkInputObject' is set
        if (unblockContactsBulkInputObject == null) {
            throw new ApiException("Missing the required parameter 'unblockContactsBulkInputObject' when calling unblockContactsBulk(Async)");
        }
        

        com.squareup.okhttp.Call call = unblockContactsBulkCall(unblockContactsBulkInputObject, xIgnoreNullValues, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Unblock several contacts by blocked contact ids or unblock all contacts
     * 
     * @param unblockContactsBulkInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void unblockContactsBulk(UnblockContactsBulkInputObject unblockContactsBulkInputObject, Boolean xIgnoreNullValues) throws ApiException {
        unblockContactsBulkWithHttpInfo(unblockContactsBulkInputObject, xIgnoreNullValues);
    }

    /**
     * Unblock several contacts by blocked contact ids or unblock all contacts
     * 
     * @param unblockContactsBulkInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> unblockContactsBulkWithHttpInfo(UnblockContactsBulkInputObject unblockContactsBulkInputObject, Boolean xIgnoreNullValues) throws ApiException {
        com.squareup.okhttp.Call call = unblockContactsBulkValidateBeforeCall(unblockContactsBulkInputObject, xIgnoreNullValues, null, null);
        return apiClient.execute(call);
    }

    /**
     * Unblock several contacts by blocked contact ids or unblock all contacts (asynchronously)
     * 
     * @param unblockContactsBulkInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call unblockContactsBulkAsync(UnblockContactsBulkInputObject unblockContactsBulkInputObject, Boolean xIgnoreNullValues, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = unblockContactsBulkValidateBeforeCall(unblockContactsBulkInputObject, xIgnoreNullValues, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for unsubscribeContact
     * @param unsubscribeContactInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call unsubscribeContactCall(UnsubscribeContactInputObject unsubscribeContactInputObject, Boolean xIgnoreNullValues, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = unsubscribeContactInputObject;

        // create path and map variables
        String localVarPath = "/api/v2/unsubscribers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xIgnoreNullValues != null)
        localVarHeaderParams.put("X-Ignore-Null-Values", apiClient.parameterToString(xIgnoreNullValues));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call unsubscribeContactValidateBeforeCall(UnsubscribeContactInputObject unsubscribeContactInputObject, Boolean xIgnoreNullValues, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'unsubscribeContactInputObject' is set
        if (unsubscribeContactInputObject == null) {
            throw new ApiException("Missing the required parameter 'unsubscribeContactInputObject' when calling unsubscribeContact(Async)");
        }
        

        com.squareup.okhttp.Call call = unsubscribeContactCall(unsubscribeContactInputObject, xIgnoreNullValues, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Unsubscribe contact from your communication by phone number.
     * 
     * @param unsubscribeContactInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @return ResourceLinkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResourceLinkResponse unsubscribeContact(UnsubscribeContactInputObject unsubscribeContactInputObject, Boolean xIgnoreNullValues) throws ApiException {
        ApiResponse<ResourceLinkResponse> resp = unsubscribeContactWithHttpInfo(unsubscribeContactInputObject, xIgnoreNullValues);
        return resp.getData();
    }

    /**
     * Unsubscribe contact from your communication by phone number.
     * 
     * @param unsubscribeContactInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @return ApiResponse&lt;ResourceLinkResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResourceLinkResponse> unsubscribeContactWithHttpInfo(UnsubscribeContactInputObject unsubscribeContactInputObject, Boolean xIgnoreNullValues) throws ApiException {
        com.squareup.okhttp.Call call = unsubscribeContactValidateBeforeCall(unsubscribeContactInputObject, xIgnoreNullValues, null, null);
        Type localVarReturnType = new TypeToken<ResourceLinkResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Unsubscribe contact from your communication by phone number. (asynchronously)
     * 
     * @param unsubscribeContactInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call unsubscribeContactAsync(UnsubscribeContactInputObject unsubscribeContactInputObject, Boolean xIgnoreNullValues, final ApiCallback<ResourceLinkResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = unsubscribeContactValidateBeforeCall(unsubscribeContactInputObject, xIgnoreNullValues, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResourceLinkResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateContact
     * @param updateContactInputObject  (required)
     * @param id  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContactCall(UpdateContactInputObject updateContactInputObject, Integer id, Boolean xIgnoreNullValues, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = updateContactInputObject;

        // create path and map variables
        String localVarPath = "/api/v2/contacts/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xIgnoreNullValues != null)
        localVarHeaderParams.put("X-Ignore-Null-Values", apiClient.parameterToString(xIgnoreNullValues));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContactValidateBeforeCall(UpdateContactInputObject updateContactInputObject, Integer id, Boolean xIgnoreNullValues, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'updateContactInputObject' is set
        if (updateContactInputObject == null) {
            throw new ApiException("Missing the required parameter 'updateContactInputObject' when calling updateContact(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateContact(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContactCall(updateContactInputObject, id, xIgnoreNullValues, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update existing contact.
     * 
     * @param updateContactInputObject  (required)
     * @param id  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @return ResourceLinkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResourceLinkResponse updateContact(UpdateContactInputObject updateContactInputObject, Integer id, Boolean xIgnoreNullValues) throws ApiException {
        ApiResponse<ResourceLinkResponse> resp = updateContactWithHttpInfo(updateContactInputObject, id, xIgnoreNullValues);
        return resp.getData();
    }

    /**
     * Update existing contact.
     * 
     * @param updateContactInputObject  (required)
     * @param id  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @return ApiResponse&lt;ResourceLinkResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResourceLinkResponse> updateContactWithHttpInfo(UpdateContactInputObject updateContactInputObject, Integer id, Boolean xIgnoreNullValues) throws ApiException {
        com.squareup.okhttp.Call call = updateContactValidateBeforeCall(updateContactInputObject, id, xIgnoreNullValues, null, null);
        Type localVarReturnType = new TypeToken<ResourceLinkResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update existing contact. (asynchronously)
     * 
     * @param updateContactInputObject  (required)
     * @param id  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContactAsync(UpdateContactInputObject updateContactInputObject, Integer id, Boolean xIgnoreNullValues, final ApiCallback<ResourceLinkResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContactValidateBeforeCall(updateContactInputObject, id, xIgnoreNullValues, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResourceLinkResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for uploadContactAvatar
     * @param image Contact avatar. Should be PNG or JPG file not more than 10 MB (required)
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call uploadContactAvatarCall(File image, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/contacts/{id}/avatar"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (image != null)
        localVarFormParams.put("image", image);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call uploadContactAvatarValidateBeforeCall(File image, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'image' is set
        if (image == null) {
            throw new ApiException("Missing the required parameter 'image' when calling uploadContactAvatar(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling uploadContactAvatar(Async)");
        }
        

        com.squareup.okhttp.Call call = uploadContactAvatarCall(image, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add an avatar for the contact.
     * 
     * @param image Contact avatar. Should be PNG or JPG file not more than 10 MB (required)
     * @param id  (required)
     * @return ResourceLinkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResourceLinkResponse uploadContactAvatar(File image, Integer id) throws ApiException {
        ApiResponse<ResourceLinkResponse> resp = uploadContactAvatarWithHttpInfo(image, id);
        return resp.getData();
    }

    /**
     * Add an avatar for the contact.
     * 
     * @param image Contact avatar. Should be PNG or JPG file not more than 10 MB (required)
     * @param id  (required)
     * @return ApiResponse&lt;ResourceLinkResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResourceLinkResponse> uploadContactAvatarWithHttpInfo(File image, Integer id) throws ApiException {
        com.squareup.okhttp.Call call = uploadContactAvatarValidateBeforeCall(image, id, null, null);
        Type localVarReturnType = new TypeToken<ResourceLinkResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add an avatar for the contact. (asynchronously)
     * 
     * @param image Contact avatar. Should be PNG or JPG file not more than 10 MB (required)
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call uploadContactAvatarAsync(File image, Integer id, final ApiCallback<ResourceLinkResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = uploadContactAvatarValidateBeforeCall(image, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResourceLinkResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
