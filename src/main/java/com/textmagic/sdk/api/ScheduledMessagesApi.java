/*
 * TextMagic API Documentation
 * # Overview ## Introduction test <img style=\"float: right; margin-left: 10px; width: 100px;\" src=\"images/phone.png\"> TextMagic SMS API is a platform for building your own messaging app using our messaging infrastructure. It allows you to send and receive SMS text messages, query information about inbound and outbound messages, manage contacts, create templates (i.e. message formats and static texts) and schedule recurrent SMS messages as well as process bulk SMS messages. <button name=\"button\" onclick=\"http://www.google.com\" class=\"btn\">Try TextMagic API for Free</button>  ### Two Ways to Use TextMagic API * [REST API](https://www.textmagic.com/docs/api/start/) – get full access to TextMagic’s messaging gateway features * [Email to SMS API](https://www.textmagic.com/docs/api/send-email-to-sms/) – set up two-way SMS communication without the need to write any additional code  ### Code Libraries We have created a set of client libraries for the most popular programming languages (such as REST API Java and REST API PHP). These libraries allow you to integrate our API into your code in minutes. Just choose your preferred language to get started:  ## Getting started Get Started with the TextMagic REST API To start sending text messages using the TextMagic REST API, just follow these steps: 1. Generate the API credentials 1. Connect to our API endpoint This page provides all the information you need to get started. Here, we explain the following steps:  How to obtain the API credentials The API endpoint How the REST API works The next step How to obtain the API credentials  ### How to obtain the API credentials To start sending text messages, you need to create an API key. API keys are similar to an account password; the difference is that an API key only provides access to the API: you cannot log in to TextMagic Online using the API key.  Your program sends the login credentials with each API request as HTTP headers: `X-TM-Username` is your TextMagic username, while `X-TM-Key` is your API key.  How to obtain an API key:  1. Log in to TextMagic (or start a free trial if you haven’t registered yet). 1. Go to the API settings page. 1. Click the Add new API key button. 1. Enter an app name for this key. Note, it’s just a label, so pick any name. 1. Click Generate new key. 1. You should now see your new API key in the green notification banner above the table:  ![alt text](images/credentials.png)  > Note for API v1 users > V1 keys are not compatible with the V2 version of the TextMagic REST API, so you will need to generate a new API key to use the V2 endpoint.  ### The API endpoint The TextMagic REST API endpoint is: ``` https://rest.textmagic.com/api/v2 ``` All the URLs referenced in this documentation should use this base URL.  ### How the REST API works REST APIs use the HTTP protocol to send and receive messages. REST messages are usually encoded as JSON documents and are an improvement over older methods such as the XML based SOAP protocol. REST APIs use the same set of methods that web browsers use: POST, GET, PUT or DELETE. These correspond to the CRUD operations: create, read, update and delete. Often, REST URIs provide direct CRUD access to entities or collections of entities, for example: http://api.foo.com/people. In this instance, to delete a person’s endpoint, you might simply call the endpoint DELETE http://api.foo.com/people/{id}. REST makes these types of operations simple.  > Example > > Let’s take the entity most often used in messaging: contacts. Imagine you want to perform operations on your contacts list: well, it’s only a matter of calling the following endpoints: > * GET /api/v2/contacts (get all of your contacts) > * GET /api/v2/contacts/{id} (get a specific contact) > * POST /api/v2/contacts (create a new contact) > * PUT /api/v2/contacts/{id} (update an existing contact) > * DELETE /api/v2/contacts/{id} (delete an existing contact) It’s that simple! In fact, that’s all you need to do to manage the contacts in your TextMagic account!  ## Sandbox Sandbox is a tool to test TextMagic REST API requests without the need to install any applications or write any code. Here, we explain the following details about Sandbox: * The credentials area * Command documentation * How it works  <a href=\"\">Go to TextMagic Sandbox</a>  ### The credentials area To make requests using your TextMagic account, you need to enter your account username and your API key into the corresponding fields. You may also Save them in your browser or press Clear to erase them.  ![alt text](images/sandbox.png) 
 *
 * OpenAPI spec version: 2
 * Contact: support@textmagi.biz
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.textmagic.sdk.api;

import com.textmagic.sdk.ApiCallback;
import com.textmagic.sdk.ApiClient;
import com.textmagic.sdk.ApiException;
import com.textmagic.sdk.ApiResponse;
import com.textmagic.sdk.Configuration;
import com.textmagic.sdk.Pair;
import com.textmagic.sdk.ProgressRequestBody;
import com.textmagic.sdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.textmagic.sdk.model.BadRequestResponse;
import com.textmagic.sdk.model.DeleteScheduledMessagesBulkInputObject;
import com.textmagic.sdk.model.GetAllScheduledMessagesResponse;
import com.textmagic.sdk.model.MessagesIcs;
import com.textmagic.sdk.model.NotFoundResponse;
import com.textmagic.sdk.model.SearchScheduledMessagesResponse;
import com.textmagic.sdk.model.UnauthorizedResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ScheduledMessagesApi {
    private ApiClient apiClient;

    public ScheduledMessagesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ScheduledMessagesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteScheduledMessage
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteScheduledMessageCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/schedules/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteScheduledMessageValidateBeforeCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteScheduledMessage(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteScheduledMessageCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a message session, together with all nested messages.
     * 
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteScheduledMessage(Integer id) throws ApiException {
        deleteScheduledMessageWithHttpInfo(id);
    }

    /**
     * Delete a message session, together with all nested messages.
     * 
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteScheduledMessageWithHttpInfo(Integer id) throws ApiException {
        com.squareup.okhttp.Call call = deleteScheduledMessageValidateBeforeCall(id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a message session, together with all nested messages. (asynchronously)
     * 
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteScheduledMessageAsync(Integer id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteScheduledMessageValidateBeforeCall(id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteScheduledMessagesBulk
     * @param deleteScheduledMessagesBulkInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteScheduledMessagesBulkCall(DeleteScheduledMessagesBulkInputObject deleteScheduledMessagesBulkInputObject, Boolean xIgnoreNullValues, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = deleteScheduledMessagesBulkInputObject;

        // create path and map variables
        String localVarPath = "/api/v2/schedules/delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xIgnoreNullValues != null)
        localVarHeaderParams.put("X-Ignore-Null-Values", apiClient.parameterToString(xIgnoreNullValues));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteScheduledMessagesBulkValidateBeforeCall(DeleteScheduledMessagesBulkInputObject deleteScheduledMessagesBulkInputObject, Boolean xIgnoreNullValues, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deleteScheduledMessagesBulkInputObject' is set
        if (deleteScheduledMessagesBulkInputObject == null) {
            throw new ApiException("Missing the required parameter 'deleteScheduledMessagesBulkInputObject' when calling deleteScheduledMessagesBulk(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteScheduledMessagesBulkCall(deleteScheduledMessagesBulkInputObject, xIgnoreNullValues, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete scheduled messages by given ID(s) or delete all scheduled messages.
     * 
     * @param deleteScheduledMessagesBulkInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteScheduledMessagesBulk(DeleteScheduledMessagesBulkInputObject deleteScheduledMessagesBulkInputObject, Boolean xIgnoreNullValues) throws ApiException {
        deleteScheduledMessagesBulkWithHttpInfo(deleteScheduledMessagesBulkInputObject, xIgnoreNullValues);
    }

    /**
     * Delete scheduled messages by given ID(s) or delete all scheduled messages.
     * 
     * @param deleteScheduledMessagesBulkInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteScheduledMessagesBulkWithHttpInfo(DeleteScheduledMessagesBulkInputObject deleteScheduledMessagesBulkInputObject, Boolean xIgnoreNullValues) throws ApiException {
        com.squareup.okhttp.Call call = deleteScheduledMessagesBulkValidateBeforeCall(deleteScheduledMessagesBulkInputObject, xIgnoreNullValues, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete scheduled messages by given ID(s) or delete all scheduled messages. (asynchronously)
     * 
     * @param deleteScheduledMessagesBulkInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteScheduledMessagesBulkAsync(DeleteScheduledMessagesBulkInputObject deleteScheduledMessagesBulkInputObject, Boolean xIgnoreNullValues, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteScheduledMessagesBulkValidateBeforeCall(deleteScheduledMessagesBulkInputObject, xIgnoreNullValues, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getAllScheduledMessages
     * @param page Fetch specified results page (optional, default to 1)
     * @param limit How many results to return (optional, default to 10)
     * @param status Fetch schedules with the specific status: a - actual, c - completed, x - all (optional, default to x)
     * @param orderBy Order results by some field. Default is id (optional, default to id)
     * @param direction Order direction. Default is desc (optional, default to desc)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllScheduledMessagesCall(Integer page, Integer limit, String status, String orderBy, String direction, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/schedules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderBy", orderBy));
        if (direction != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("direction", direction));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllScheduledMessagesValidateBeforeCall(Integer page, Integer limit, String status, String orderBy, String direction, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAllScheduledMessagesCall(page, limit, status, orderBy, direction, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all scheduled messages.
     * 
     * @param page Fetch specified results page (optional, default to 1)
     * @param limit How many results to return (optional, default to 10)
     * @param status Fetch schedules with the specific status: a - actual, c - completed, x - all (optional, default to x)
     * @param orderBy Order results by some field. Default is id (optional, default to id)
     * @param direction Order direction. Default is desc (optional, default to desc)
     * @return GetAllScheduledMessagesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetAllScheduledMessagesResponse getAllScheduledMessages(Integer page, Integer limit, String status, String orderBy, String direction) throws ApiException {
        ApiResponse<GetAllScheduledMessagesResponse> resp = getAllScheduledMessagesWithHttpInfo(page, limit, status, orderBy, direction);
        return resp.getData();
    }

    /**
     * Get all scheduled messages.
     * 
     * @param page Fetch specified results page (optional, default to 1)
     * @param limit How many results to return (optional, default to 10)
     * @param status Fetch schedules with the specific status: a - actual, c - completed, x - all (optional, default to x)
     * @param orderBy Order results by some field. Default is id (optional, default to id)
     * @param direction Order direction. Default is desc (optional, default to desc)
     * @return ApiResponse&lt;GetAllScheduledMessagesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetAllScheduledMessagesResponse> getAllScheduledMessagesWithHttpInfo(Integer page, Integer limit, String status, String orderBy, String direction) throws ApiException {
        com.squareup.okhttp.Call call = getAllScheduledMessagesValidateBeforeCall(page, limit, status, orderBy, direction, null, null);
        Type localVarReturnType = new TypeToken<GetAllScheduledMessagesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all scheduled messages. (asynchronously)
     * 
     * @param page Fetch specified results page (optional, default to 1)
     * @param limit How many results to return (optional, default to 10)
     * @param status Fetch schedules with the specific status: a - actual, c - completed, x - all (optional, default to x)
     * @param orderBy Order results by some field. Default is id (optional, default to id)
     * @param direction Order direction. Default is desc (optional, default to desc)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllScheduledMessagesAsync(Integer page, Integer limit, String status, String orderBy, String direction, final ApiCallback<GetAllScheduledMessagesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllScheduledMessagesValidateBeforeCall(page, limit, status, orderBy, direction, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetAllScheduledMessagesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getScheduledMessage
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getScheduledMessageCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/schedules/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getScheduledMessageValidateBeforeCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getScheduledMessage(Async)");
        }
        

        com.squareup.okhttp.Call call = getScheduledMessageCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get message schedule.
     * 
     * @param id  (required)
     * @return MessagesIcs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MessagesIcs getScheduledMessage(Integer id) throws ApiException {
        ApiResponse<MessagesIcs> resp = getScheduledMessageWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get message schedule.
     * 
     * @param id  (required)
     * @return ApiResponse&lt;MessagesIcs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MessagesIcs> getScheduledMessageWithHttpInfo(Integer id) throws ApiException {
        com.squareup.okhttp.Call call = getScheduledMessageValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<MessagesIcs>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get message schedule. (asynchronously)
     * 
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getScheduledMessageAsync(Integer id, final ApiCallback<MessagesIcs> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getScheduledMessageValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MessagesIcs>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchScheduledMessages
     * @param page Fetch specified results page (optional, default to 1)
     * @param limit How many results to return (optional, default to 10)
     * @param query Find messages by specified search query (optional)
     * @param ids Find schedules by ID(s) (optional)
     * @param status Fetch schedules with the specific status: a - actual, c - completed, x - all (optional, default to x)
     * @param orderBy Order results by some field. Default is id (optional, default to id)
     * @param direction Order direction. Default is desc (optional, default to desc)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchScheduledMessagesCall(Integer page, Integer limit, String query, String ids, String status, String orderBy, String direction, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/schedules/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (query != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("query", query));
        if (ids != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ids", ids));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderBy", orderBy));
        if (direction != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("direction", direction));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchScheduledMessagesValidateBeforeCall(Integer page, Integer limit, String query, String ids, String status, String orderBy, String direction, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = searchScheduledMessagesCall(page, limit, query, ids, status, orderBy, direction, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Find scheduled messages by given parameters.
     * 
     * @param page Fetch specified results page (optional, default to 1)
     * @param limit How many results to return (optional, default to 10)
     * @param query Find messages by specified search query (optional)
     * @param ids Find schedules by ID(s) (optional)
     * @param status Fetch schedules with the specific status: a - actual, c - completed, x - all (optional, default to x)
     * @param orderBy Order results by some field. Default is id (optional, default to id)
     * @param direction Order direction. Default is desc (optional, default to desc)
     * @return SearchScheduledMessagesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SearchScheduledMessagesResponse searchScheduledMessages(Integer page, Integer limit, String query, String ids, String status, String orderBy, String direction) throws ApiException {
        ApiResponse<SearchScheduledMessagesResponse> resp = searchScheduledMessagesWithHttpInfo(page, limit, query, ids, status, orderBy, direction);
        return resp.getData();
    }

    /**
     * Find scheduled messages by given parameters.
     * 
     * @param page Fetch specified results page (optional, default to 1)
     * @param limit How many results to return (optional, default to 10)
     * @param query Find messages by specified search query (optional)
     * @param ids Find schedules by ID(s) (optional)
     * @param status Fetch schedules with the specific status: a - actual, c - completed, x - all (optional, default to x)
     * @param orderBy Order results by some field. Default is id (optional, default to id)
     * @param direction Order direction. Default is desc (optional, default to desc)
     * @return ApiResponse&lt;SearchScheduledMessagesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SearchScheduledMessagesResponse> searchScheduledMessagesWithHttpInfo(Integer page, Integer limit, String query, String ids, String status, String orderBy, String direction) throws ApiException {
        com.squareup.okhttp.Call call = searchScheduledMessagesValidateBeforeCall(page, limit, query, ids, status, orderBy, direction, null, null);
        Type localVarReturnType = new TypeToken<SearchScheduledMessagesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Find scheduled messages by given parameters. (asynchronously)
     * 
     * @param page Fetch specified results page (optional, default to 1)
     * @param limit How many results to return (optional, default to 10)
     * @param query Find messages by specified search query (optional)
     * @param ids Find schedules by ID(s) (optional)
     * @param status Fetch schedules with the specific status: a - actual, c - completed, x - all (optional, default to x)
     * @param orderBy Order results by some field. Default is id (optional, default to id)
     * @param direction Order direction. Default is desc (optional, default to desc)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchScheduledMessagesAsync(Integer page, Integer limit, String query, String ids, String status, String orderBy, String direction, final ApiCallback<SearchScheduledMessagesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchScheduledMessagesValidateBeforeCall(page, limit, query, ids, status, orderBy, direction, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SearchScheduledMessagesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
