/*
 * TextMagic API Documentation
 * # Overview ## Introduction test <img style=\"float: right; margin-left: 10px; width: 100px;\" src=\"images/phone.png\"> TextMagic SMS API is a platform for building your own messaging app using our messaging infrastructure. It allows you to send and receive SMS text messages, query information about inbound and outbound messages, manage contacts, create templates (i.e. message formats and static texts) and schedule recurrent SMS messages as well as process bulk SMS messages. <button name=\"button\" onclick=\"http://www.google.com\" class=\"btn\">Try TextMagic API for Free</button>  ### Two Ways to Use TextMagic API * [REST API](https://www.textmagic.com/docs/api/start/) – get full access to TextMagic’s messaging gateway features * [Email to SMS API](https://www.textmagic.com/docs/api/send-email-to-sms/) – set up two-way SMS communication without the need to write any additional code  ### Code Libraries We have created a set of client libraries for the most popular programming languages (such as REST API Java and REST API PHP). These libraries allow you to integrate our API into your code in minutes. Just choose your preferred language to get started:  ## Getting started Get Started with the TextMagic REST API To start sending text messages using the TextMagic REST API, just follow these steps: 1. Generate the API credentials 1. Connect to our API endpoint This page provides all the information you need to get started. Here, we explain the following steps:  How to obtain the API credentials The API endpoint How the REST API works The next step How to obtain the API credentials  ### How to obtain the API credentials To start sending text messages, you need to create an API key. API keys are similar to an account password; the difference is that an API key only provides access to the API: you cannot log in to TextMagic Online using the API key.  Your program sends the login credentials with each API request as HTTP headers: `X-TM-Username` is your TextMagic username, while `X-TM-Key` is your API key.  How to obtain an API key:  1. Log in to TextMagic (or start a free trial if you haven’t registered yet). 1. Go to the API settings page. 1. Click the Add new API key button. 1. Enter an app name for this key. Note, it’s just a label, so pick any name. 1. Click Generate new key. 1. You should now see your new API key in the green notification banner above the table:  ![alt text](images/credentials.png)  > Note for API v1 users > V1 keys are not compatible with the V2 version of the TextMagic REST API, so you will need to generate a new API key to use the V2 endpoint.  ### The API endpoint The TextMagic REST API endpoint is: ``` https://rest.textmagic.com/api/v2 ``` All the URLs referenced in this documentation should use this base URL.  ### How the REST API works REST APIs use the HTTP protocol to send and receive messages. REST messages are usually encoded as JSON documents and are an improvement over older methods such as the XML based SOAP protocol. REST APIs use the same set of methods that web browsers use: POST, GET, PUT or DELETE. These correspond to the CRUD operations: create, read, update and delete. Often, REST URIs provide direct CRUD access to entities or collections of entities, for example: http://api.foo.com/people. In this instance, to delete a person’s endpoint, you might simply call the endpoint DELETE http://api.foo.com/people/{id}. REST makes these types of operations simple.  > Example > > Let’s take the entity most often used in messaging: contacts. Imagine you want to perform operations on your contacts list: well, it’s only a matter of calling the following endpoints: > * GET /api/v2/contacts (get all of your contacts) > * GET /api/v2/contacts/{id} (get a specific contact) > * POST /api/v2/contacts (create a new contact) > * PUT /api/v2/contacts/{id} (update an existing contact) > * DELETE /api/v2/contacts/{id} (delete an existing contact) It’s that simple! In fact, that’s all you need to do to manage the contacts in your TextMagic account!  ## Sandbox Sandbox is a tool to test TextMagic REST API requests without the need to install any applications or write any code. Here, we explain the following details about Sandbox: * The credentials area * Command documentation * How it works  <a href=\"\">Go to TextMagic Sandbox</a>  ### The credentials area To make requests using your TextMagic account, you need to enter your account username and your API key into the corresponding fields. You may also Save them in your browser or press Clear to erase them.  ![alt text](images/sandbox.png) 
 *
 * OpenAPI spec version: 2
 * Contact: support@textmagi.biz
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.textmagic.sdk.api;

import com.textmagic.sdk.ApiCallback;
import com.textmagic.sdk.ApiClient;
import com.textmagic.sdk.ApiException;
import com.textmagic.sdk.ApiResponse;
import com.textmagic.sdk.Configuration;
import com.textmagic.sdk.Pair;
import com.textmagic.sdk.ProgressRequestBody;
import com.textmagic.sdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.textmagic.sdk.model.BadRequestResponse;
import com.textmagic.sdk.model.Chat;
import com.textmagic.sdk.model.CloseChatsBulkInputObject;
import com.textmagic.sdk.model.DeleteChatMessagesBulkInputObject;
import com.textmagic.sdk.model.DeleteChatsBulkInputObject;
import com.textmagic.sdk.model.GetAllChatsResponse;
import com.textmagic.sdk.model.GetChatMessagesResponse;
import com.textmagic.sdk.model.GetUnreadMessagesTotalResponse;
import com.textmagic.sdk.model.MarkChatsReadBulkInputObject;
import com.textmagic.sdk.model.MarkChatsUnreadBulkInputObject;
import com.textmagic.sdk.model.MuteChatInputObject;
import com.textmagic.sdk.model.MuteChatsBulkInputObject;
import com.textmagic.sdk.model.NotFoundResponse;
import com.textmagic.sdk.model.ReopenChatsBulkInputObject;
import com.textmagic.sdk.model.ResourceLinkResponse;
import com.textmagic.sdk.model.SearchChatsByIdsResponse;
import com.textmagic.sdk.model.SearchChatsByReceipentResponse;
import com.textmagic.sdk.model.SearchChatsResponse;
import com.textmagic.sdk.model.SetChatStatusInputObject;
import com.textmagic.sdk.model.UnauthorizedResponse;
import com.textmagic.sdk.model.UnmuteChatsBulkInputObject;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ChatsApi {
    private ApiClient apiClient;

    public ChatsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ChatsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for closeChatsBulk
     * @param closeChatsBulkInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call closeChatsBulkCall(CloseChatsBulkInputObject closeChatsBulkInputObject, Boolean xIgnoreNullValues, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = closeChatsBulkInputObject;

        // create path and map variables
        String localVarPath = "/api/v2/chats/close/bulk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xIgnoreNullValues != null)
        localVarHeaderParams.put("X-Ignore-Null-Values", apiClient.parameterToString(xIgnoreNullValues));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call closeChatsBulkValidateBeforeCall(CloseChatsBulkInputObject closeChatsBulkInputObject, Boolean xIgnoreNullValues, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'closeChatsBulkInputObject' is set
        if (closeChatsBulkInputObject == null) {
            throw new ApiException("Missing the required parameter 'closeChatsBulkInputObject' when calling closeChatsBulk(Async)");
        }
        

        com.squareup.okhttp.Call call = closeChatsBulkCall(closeChatsBulkInputObject, xIgnoreNullValues, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Close chats by chat ids or close all chats
     * 
     * @param closeChatsBulkInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void closeChatsBulk(CloseChatsBulkInputObject closeChatsBulkInputObject, Boolean xIgnoreNullValues) throws ApiException {
        closeChatsBulkWithHttpInfo(closeChatsBulkInputObject, xIgnoreNullValues);
    }

    /**
     * Close chats by chat ids or close all chats
     * 
     * @param closeChatsBulkInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> closeChatsBulkWithHttpInfo(CloseChatsBulkInputObject closeChatsBulkInputObject, Boolean xIgnoreNullValues) throws ApiException {
        com.squareup.okhttp.Call call = closeChatsBulkValidateBeforeCall(closeChatsBulkInputObject, xIgnoreNullValues, null, null);
        return apiClient.execute(call);
    }

    /**
     * Close chats by chat ids or close all chats (asynchronously)
     * 
     * @param closeChatsBulkInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call closeChatsBulkAsync(CloseChatsBulkInputObject closeChatsBulkInputObject, Boolean xIgnoreNullValues, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = closeChatsBulkValidateBeforeCall(closeChatsBulkInputObject, xIgnoreNullValues, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for closeReadChats
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call closeReadChatsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/chats/close/read";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call closeReadChatsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = closeReadChatsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Close all chats that have no unread messages.
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void closeReadChats() throws ApiException {
        closeReadChatsWithHttpInfo();
    }

    /**
     * Close all chats that have no unread messages.
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> closeReadChatsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = closeReadChatsValidateBeforeCall(null, null);
        return apiClient.execute(call);
    }

    /**
     * Close all chats that have no unread messages. (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call closeReadChatsAsync(final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = closeReadChatsValidateBeforeCall(progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteChatMessages
     * @param deleteChatMessagesBulkInputObject  (required)
     * @param id  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteChatMessagesCall(DeleteChatMessagesBulkInputObject deleteChatMessagesBulkInputObject, Integer id, Boolean xIgnoreNullValues, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = deleteChatMessagesBulkInputObject;

        // create path and map variables
        String localVarPath = "/api/v2/chats/{id}/messages/delete"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xIgnoreNullValues != null)
        localVarHeaderParams.put("X-Ignore-Null-Values", apiClient.parameterToString(xIgnoreNullValues));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteChatMessagesValidateBeforeCall(DeleteChatMessagesBulkInputObject deleteChatMessagesBulkInputObject, Integer id, Boolean xIgnoreNullValues, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deleteChatMessagesBulkInputObject' is set
        if (deleteChatMessagesBulkInputObject == null) {
            throw new ApiException("Missing the required parameter 'deleteChatMessagesBulkInputObject' when calling deleteChatMessages(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteChatMessages(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteChatMessagesCall(deleteChatMessagesBulkInputObject, id, xIgnoreNullValues, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete messages from chat by given messages ID(s).
     * 
     * @param deleteChatMessagesBulkInputObject  (required)
     * @param id  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteChatMessages(DeleteChatMessagesBulkInputObject deleteChatMessagesBulkInputObject, Integer id, Boolean xIgnoreNullValues) throws ApiException {
        deleteChatMessagesWithHttpInfo(deleteChatMessagesBulkInputObject, id, xIgnoreNullValues);
    }

    /**
     * Delete messages from chat by given messages ID(s).
     * 
     * @param deleteChatMessagesBulkInputObject  (required)
     * @param id  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteChatMessagesWithHttpInfo(DeleteChatMessagesBulkInputObject deleteChatMessagesBulkInputObject, Integer id, Boolean xIgnoreNullValues) throws ApiException {
        com.squareup.okhttp.Call call = deleteChatMessagesValidateBeforeCall(deleteChatMessagesBulkInputObject, id, xIgnoreNullValues, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete messages from chat by given messages ID(s). (asynchronously)
     * 
     * @param deleteChatMessagesBulkInputObject  (required)
     * @param id  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteChatMessagesAsync(DeleteChatMessagesBulkInputObject deleteChatMessagesBulkInputObject, Integer id, Boolean xIgnoreNullValues, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteChatMessagesValidateBeforeCall(deleteChatMessagesBulkInputObject, id, xIgnoreNullValues, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteChatsBulk
     * @param deleteChatsBulkInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteChatsBulkCall(DeleteChatsBulkInputObject deleteChatsBulkInputObject, Boolean xIgnoreNullValues, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = deleteChatsBulkInputObject;

        // create path and map variables
        String localVarPath = "/api/v2/chats/delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xIgnoreNullValues != null)
        localVarHeaderParams.put("X-Ignore-Null-Values", apiClient.parameterToString(xIgnoreNullValues));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteChatsBulkValidateBeforeCall(DeleteChatsBulkInputObject deleteChatsBulkInputObject, Boolean xIgnoreNullValues, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deleteChatsBulkInputObject' is set
        if (deleteChatsBulkInputObject == null) {
            throw new ApiException("Missing the required parameter 'deleteChatsBulkInputObject' when calling deleteChatsBulk(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteChatsBulkCall(deleteChatsBulkInputObject, xIgnoreNullValues, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete chats by given ID(s) or delete all chats.
     * 
     * @param deleteChatsBulkInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteChatsBulk(DeleteChatsBulkInputObject deleteChatsBulkInputObject, Boolean xIgnoreNullValues) throws ApiException {
        deleteChatsBulkWithHttpInfo(deleteChatsBulkInputObject, xIgnoreNullValues);
    }

    /**
     * Delete chats by given ID(s) or delete all chats.
     * 
     * @param deleteChatsBulkInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteChatsBulkWithHttpInfo(DeleteChatsBulkInputObject deleteChatsBulkInputObject, Boolean xIgnoreNullValues) throws ApiException {
        com.squareup.okhttp.Call call = deleteChatsBulkValidateBeforeCall(deleteChatsBulkInputObject, xIgnoreNullValues, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete chats by given ID(s) or delete all chats. (asynchronously)
     * 
     * @param deleteChatsBulkInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteChatsBulkAsync(DeleteChatsBulkInputObject deleteChatsBulkInputObject, Boolean xIgnoreNullValues, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteChatsBulkValidateBeforeCall(deleteChatsBulkInputObject, xIgnoreNullValues, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getAllChats
     * @param status Fetch only (a)ctive, (c)losed or (d)eleted chats (optional)
     * @param page Fetch specified results page (optional, default to 1)
     * @param limit How many results to return (optional, default to 10)
     * @param orderBy Order results by some field. Default is id (optional, default to id)
     * @param voice Fetch results with voice calls (optional, default to 0)
     * @param flat Should additional contact info be included (optional, default to 0)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllChatsCall(String status, Integer page, Integer limit, String orderBy, Integer voice, Integer flat, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/chats";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderBy", orderBy));
        if (voice != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("voice", voice));
        if (flat != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("flat", flat));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllChatsValidateBeforeCall(String status, Integer page, Integer limit, String orderBy, Integer voice, Integer flat, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAllChatsCall(status, page, limit, orderBy, voice, flat, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all user chats.
     * 
     * @param status Fetch only (a)ctive, (c)losed or (d)eleted chats (optional)
     * @param page Fetch specified results page (optional, default to 1)
     * @param limit How many results to return (optional, default to 10)
     * @param orderBy Order results by some field. Default is id (optional, default to id)
     * @param voice Fetch results with voice calls (optional, default to 0)
     * @param flat Should additional contact info be included (optional, default to 0)
     * @return GetAllChatsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetAllChatsResponse getAllChats(String status, Integer page, Integer limit, String orderBy, Integer voice, Integer flat) throws ApiException {
        ApiResponse<GetAllChatsResponse> resp = getAllChatsWithHttpInfo(status, page, limit, orderBy, voice, flat);
        return resp.getData();
    }

    /**
     * Get all user chats.
     * 
     * @param status Fetch only (a)ctive, (c)losed or (d)eleted chats (optional)
     * @param page Fetch specified results page (optional, default to 1)
     * @param limit How many results to return (optional, default to 10)
     * @param orderBy Order results by some field. Default is id (optional, default to id)
     * @param voice Fetch results with voice calls (optional, default to 0)
     * @param flat Should additional contact info be included (optional, default to 0)
     * @return ApiResponse&lt;GetAllChatsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetAllChatsResponse> getAllChatsWithHttpInfo(String status, Integer page, Integer limit, String orderBy, Integer voice, Integer flat) throws ApiException {
        com.squareup.okhttp.Call call = getAllChatsValidateBeforeCall(status, page, limit, orderBy, voice, flat, null, null);
        Type localVarReturnType = new TypeToken<GetAllChatsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all user chats. (asynchronously)
     * 
     * @param status Fetch only (a)ctive, (c)losed or (d)eleted chats (optional)
     * @param page Fetch specified results page (optional, default to 1)
     * @param limit How many results to return (optional, default to 10)
     * @param orderBy Order results by some field. Default is id (optional, default to id)
     * @param voice Fetch results with voice calls (optional, default to 0)
     * @param flat Should additional contact info be included (optional, default to 0)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllChatsAsync(String status, Integer page, Integer limit, String orderBy, Integer voice, Integer flat, final ApiCallback<GetAllChatsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllChatsValidateBeforeCall(status, page, limit, orderBy, voice, flat, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetAllChatsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getChat
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getChatCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/chats/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getChatValidateBeforeCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getChat(Async)");
        }
        

        com.squareup.okhttp.Call call = getChatCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a single chat.
     * 
     * @param id  (required)
     * @return Chat
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Chat getChat(Integer id) throws ApiException {
        ApiResponse<Chat> resp = getChatWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get a single chat.
     * 
     * @param id  (required)
     * @return ApiResponse&lt;Chat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Chat> getChatWithHttpInfo(Integer id) throws ApiException {
        com.squareup.okhttp.Call call = getChatValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<Chat>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a single chat. (asynchronously)
     * 
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getChatAsync(Integer id, final ApiCallback<Chat> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getChatValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Chat>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getChatByPhone
     * @param phone  (required)
     * @param upsert Create a new chat if not found (optional, default to 0)
     * @param reopen Reopen chat if found or do not change status (optional, default to 0)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getChatByPhoneCall(String phone, Integer upsert, Integer reopen, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/chats/{phone}/by/phone"
            .replaceAll("\\{" + "phone" + "\\}", apiClient.escapeString(phone.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (upsert != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("upsert", upsert));
        if (reopen != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("reopen", reopen));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getChatByPhoneValidateBeforeCall(String phone, Integer upsert, Integer reopen, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'phone' is set
        if (phone == null) {
            throw new ApiException("Missing the required parameter 'phone' when calling getChatByPhone(Async)");
        }
        

        com.squareup.okhttp.Call call = getChatByPhoneCall(phone, upsert, reopen, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Find chats by phone.
     * 
     * @param phone  (required)
     * @param upsert Create a new chat if not found (optional, default to 0)
     * @param reopen Reopen chat if found or do not change status (optional, default to 0)
     * @return Chat
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Chat getChatByPhone(String phone, Integer upsert, Integer reopen) throws ApiException {
        ApiResponse<Chat> resp = getChatByPhoneWithHttpInfo(phone, upsert, reopen);
        return resp.getData();
    }

    /**
     * Find chats by phone.
     * 
     * @param phone  (required)
     * @param upsert Create a new chat if not found (optional, default to 0)
     * @param reopen Reopen chat if found or do not change status (optional, default to 0)
     * @return ApiResponse&lt;Chat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Chat> getChatByPhoneWithHttpInfo(String phone, Integer upsert, Integer reopen) throws ApiException {
        com.squareup.okhttp.Call call = getChatByPhoneValidateBeforeCall(phone, upsert, reopen, null, null);
        Type localVarReturnType = new TypeToken<Chat>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Find chats by phone. (asynchronously)
     * 
     * @param phone  (required)
     * @param upsert Create a new chat if not found (optional, default to 0)
     * @param reopen Reopen chat if found or do not change status (optional, default to 0)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getChatByPhoneAsync(String phone, Integer upsert, Integer reopen, final ApiCallback<Chat> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getChatByPhoneValidateBeforeCall(phone, upsert, reopen, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Chat>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getChatMessages
     * @param id  (required)
     * @param page Fetch specified results page (optional, default to 1)
     * @param limit How many results to return (optional, default to 10)
     * @param query Find messages by specified search query (optional)
     * @param start Return messages since specified timestamp only (optional)
     * @param end Return messages up to specified timestamp only (optional)
     * @param direction Order direction. Default is desc (optional, default to desc)
     * @param voice Fetch results with voice calls (optional, default to 0)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getChatMessagesCall(Integer id, Integer page, Integer limit, String query, Integer start, Integer end, String direction, Integer voice, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/chats/{id}/message"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (query != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("query", query));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start", start));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end", end));
        if (direction != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("direction", direction));
        if (voice != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("voice", voice));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getChatMessagesValidateBeforeCall(Integer id, Integer page, Integer limit, String query, Integer start, Integer end, String direction, Integer voice, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getChatMessages(Async)");
        }
        

        com.squareup.okhttp.Call call = getChatMessagesCall(id, page, limit, query, start, end, direction, voice, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Fetch messages from chat with specified chat id.
     * 
     * @param id  (required)
     * @param page Fetch specified results page (optional, default to 1)
     * @param limit How many results to return (optional, default to 10)
     * @param query Find messages by specified search query (optional)
     * @param start Return messages since specified timestamp only (optional)
     * @param end Return messages up to specified timestamp only (optional)
     * @param direction Order direction. Default is desc (optional, default to desc)
     * @param voice Fetch results with voice calls (optional, default to 0)
     * @return GetChatMessagesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetChatMessagesResponse getChatMessages(Integer id, Integer page, Integer limit, String query, Integer start, Integer end, String direction, Integer voice) throws ApiException {
        ApiResponse<GetChatMessagesResponse> resp = getChatMessagesWithHttpInfo(id, page, limit, query, start, end, direction, voice);
        return resp.getData();
    }

    /**
     * Fetch messages from chat with specified chat id.
     * 
     * @param id  (required)
     * @param page Fetch specified results page (optional, default to 1)
     * @param limit How many results to return (optional, default to 10)
     * @param query Find messages by specified search query (optional)
     * @param start Return messages since specified timestamp only (optional)
     * @param end Return messages up to specified timestamp only (optional)
     * @param direction Order direction. Default is desc (optional, default to desc)
     * @param voice Fetch results with voice calls (optional, default to 0)
     * @return ApiResponse&lt;GetChatMessagesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetChatMessagesResponse> getChatMessagesWithHttpInfo(Integer id, Integer page, Integer limit, String query, Integer start, Integer end, String direction, Integer voice) throws ApiException {
        com.squareup.okhttp.Call call = getChatMessagesValidateBeforeCall(id, page, limit, query, start, end, direction, voice, null, null);
        Type localVarReturnType = new TypeToken<GetChatMessagesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch messages from chat with specified chat id. (asynchronously)
     * 
     * @param id  (required)
     * @param page Fetch specified results page (optional, default to 1)
     * @param limit How many results to return (optional, default to 10)
     * @param query Find messages by specified search query (optional)
     * @param start Return messages since specified timestamp only (optional)
     * @param end Return messages up to specified timestamp only (optional)
     * @param direction Order direction. Default is desc (optional, default to desc)
     * @param voice Fetch results with voice calls (optional, default to 0)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getChatMessagesAsync(Integer id, Integer page, Integer limit, String query, Integer start, Integer end, String direction, Integer voice, final ApiCallback<GetChatMessagesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getChatMessagesValidateBeforeCall(id, page, limit, query, start, end, direction, voice, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetChatMessagesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUnreadMessagesTotal
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUnreadMessagesTotalCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/chats/unread/count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUnreadMessagesTotalValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getUnreadMessagesTotalCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get total amount of unread messages in the current user chats.
     * 
     * @return GetUnreadMessagesTotalResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetUnreadMessagesTotalResponse getUnreadMessagesTotal() throws ApiException {
        ApiResponse<GetUnreadMessagesTotalResponse> resp = getUnreadMessagesTotalWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get total amount of unread messages in the current user chats.
     * 
     * @return ApiResponse&lt;GetUnreadMessagesTotalResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetUnreadMessagesTotalResponse> getUnreadMessagesTotalWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getUnreadMessagesTotalValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<GetUnreadMessagesTotalResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get total amount of unread messages in the current user chats. (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUnreadMessagesTotalAsync(final ApiCallback<GetUnreadMessagesTotalResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUnreadMessagesTotalValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetUnreadMessagesTotalResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for markChatsReadBulk
     * @param markChatsReadBulkInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call markChatsReadBulkCall(MarkChatsReadBulkInputObject markChatsReadBulkInputObject, Boolean xIgnoreNullValues, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = markChatsReadBulkInputObject;

        // create path and map variables
        String localVarPath = "/api/v2/chats/read/bulk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xIgnoreNullValues != null)
        localVarHeaderParams.put("X-Ignore-Null-Values", apiClient.parameterToString(xIgnoreNullValues));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call markChatsReadBulkValidateBeforeCall(MarkChatsReadBulkInputObject markChatsReadBulkInputObject, Boolean xIgnoreNullValues, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'markChatsReadBulkInputObject' is set
        if (markChatsReadBulkInputObject == null) {
            throw new ApiException("Missing the required parameter 'markChatsReadBulkInputObject' when calling markChatsReadBulk(Async)");
        }
        

        com.squareup.okhttp.Call call = markChatsReadBulkCall(markChatsReadBulkInputObject, xIgnoreNullValues, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Mark several chats as read by chat ids or mark all chats as read
     * 
     * @param markChatsReadBulkInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void markChatsReadBulk(MarkChatsReadBulkInputObject markChatsReadBulkInputObject, Boolean xIgnoreNullValues) throws ApiException {
        markChatsReadBulkWithHttpInfo(markChatsReadBulkInputObject, xIgnoreNullValues);
    }

    /**
     * Mark several chats as read by chat ids or mark all chats as read
     * 
     * @param markChatsReadBulkInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> markChatsReadBulkWithHttpInfo(MarkChatsReadBulkInputObject markChatsReadBulkInputObject, Boolean xIgnoreNullValues) throws ApiException {
        com.squareup.okhttp.Call call = markChatsReadBulkValidateBeforeCall(markChatsReadBulkInputObject, xIgnoreNullValues, null, null);
        return apiClient.execute(call);
    }

    /**
     * Mark several chats as read by chat ids or mark all chats as read (asynchronously)
     * 
     * @param markChatsReadBulkInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call markChatsReadBulkAsync(MarkChatsReadBulkInputObject markChatsReadBulkInputObject, Boolean xIgnoreNullValues, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = markChatsReadBulkValidateBeforeCall(markChatsReadBulkInputObject, xIgnoreNullValues, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for markChatsUnreadBulk
     * @param markChatsUnreadBulkInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call markChatsUnreadBulkCall(MarkChatsUnreadBulkInputObject markChatsUnreadBulkInputObject, Boolean xIgnoreNullValues, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = markChatsUnreadBulkInputObject;

        // create path and map variables
        String localVarPath = "/api/v2/chats/unread/bulk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xIgnoreNullValues != null)
        localVarHeaderParams.put("X-Ignore-Null-Values", apiClient.parameterToString(xIgnoreNullValues));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call markChatsUnreadBulkValidateBeforeCall(MarkChatsUnreadBulkInputObject markChatsUnreadBulkInputObject, Boolean xIgnoreNullValues, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'markChatsUnreadBulkInputObject' is set
        if (markChatsUnreadBulkInputObject == null) {
            throw new ApiException("Missing the required parameter 'markChatsUnreadBulkInputObject' when calling markChatsUnreadBulk(Async)");
        }
        

        com.squareup.okhttp.Call call = markChatsUnreadBulkCall(markChatsUnreadBulkInputObject, xIgnoreNullValues, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Mark several chats as UNread by chat ids or mark all chats as UNread
     * 
     * @param markChatsUnreadBulkInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void markChatsUnreadBulk(MarkChatsUnreadBulkInputObject markChatsUnreadBulkInputObject, Boolean xIgnoreNullValues) throws ApiException {
        markChatsUnreadBulkWithHttpInfo(markChatsUnreadBulkInputObject, xIgnoreNullValues);
    }

    /**
     * Mark several chats as UNread by chat ids or mark all chats as UNread
     * 
     * @param markChatsUnreadBulkInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> markChatsUnreadBulkWithHttpInfo(MarkChatsUnreadBulkInputObject markChatsUnreadBulkInputObject, Boolean xIgnoreNullValues) throws ApiException {
        com.squareup.okhttp.Call call = markChatsUnreadBulkValidateBeforeCall(markChatsUnreadBulkInputObject, xIgnoreNullValues, null, null);
        return apiClient.execute(call);
    }

    /**
     * Mark several chats as UNread by chat ids or mark all chats as UNread (asynchronously)
     * 
     * @param markChatsUnreadBulkInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call markChatsUnreadBulkAsync(MarkChatsUnreadBulkInputObject markChatsUnreadBulkInputObject, Boolean xIgnoreNullValues, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = markChatsUnreadBulkValidateBeforeCall(markChatsUnreadBulkInputObject, xIgnoreNullValues, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for muteChat
     * @param muteChatInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call muteChatCall(MuteChatInputObject muteChatInputObject, Boolean xIgnoreNullValues, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = muteChatInputObject;

        // create path and map variables
        String localVarPath = "/api/v2/chats/mute";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xIgnoreNullValues != null)
        localVarHeaderParams.put("X-Ignore-Null-Values", apiClient.parameterToString(xIgnoreNullValues));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call muteChatValidateBeforeCall(MuteChatInputObject muteChatInputObject, Boolean xIgnoreNullValues, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'muteChatInputObject' is set
        if (muteChatInputObject == null) {
            throw new ApiException("Missing the required parameter 'muteChatInputObject' when calling muteChat(Async)");
        }
        

        com.squareup.okhttp.Call call = muteChatCall(muteChatInputObject, xIgnoreNullValues, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Set mute mode.
     * 
     * @param muteChatInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @return ResourceLinkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResourceLinkResponse muteChat(MuteChatInputObject muteChatInputObject, Boolean xIgnoreNullValues) throws ApiException {
        ApiResponse<ResourceLinkResponse> resp = muteChatWithHttpInfo(muteChatInputObject, xIgnoreNullValues);
        return resp.getData();
    }

    /**
     * Set mute mode.
     * 
     * @param muteChatInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @return ApiResponse&lt;ResourceLinkResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResourceLinkResponse> muteChatWithHttpInfo(MuteChatInputObject muteChatInputObject, Boolean xIgnoreNullValues) throws ApiException {
        com.squareup.okhttp.Call call = muteChatValidateBeforeCall(muteChatInputObject, xIgnoreNullValues, null, null);
        Type localVarReturnType = new TypeToken<ResourceLinkResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set mute mode. (asynchronously)
     * 
     * @param muteChatInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call muteChatAsync(MuteChatInputObject muteChatInputObject, Boolean xIgnoreNullValues, final ApiCallback<ResourceLinkResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = muteChatValidateBeforeCall(muteChatInputObject, xIgnoreNullValues, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResourceLinkResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for muteChatsBulk
     * @param muteChatsBulkInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call muteChatsBulkCall(MuteChatsBulkInputObject muteChatsBulkInputObject, Boolean xIgnoreNullValues, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = muteChatsBulkInputObject;

        // create path and map variables
        String localVarPath = "/api/v2/chats/mute/bulk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xIgnoreNullValues != null)
        localVarHeaderParams.put("X-Ignore-Null-Values", apiClient.parameterToString(xIgnoreNullValues));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call muteChatsBulkValidateBeforeCall(MuteChatsBulkInputObject muteChatsBulkInputObject, Boolean xIgnoreNullValues, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'muteChatsBulkInputObject' is set
        if (muteChatsBulkInputObject == null) {
            throw new ApiException("Missing the required parameter 'muteChatsBulkInputObject' when calling muteChatsBulk(Async)");
        }
        

        com.squareup.okhttp.Call call = muteChatsBulkCall(muteChatsBulkInputObject, xIgnoreNullValues, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Mute several chats by chat ids or mute all chats
     * 
     * @param muteChatsBulkInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void muteChatsBulk(MuteChatsBulkInputObject muteChatsBulkInputObject, Boolean xIgnoreNullValues) throws ApiException {
        muteChatsBulkWithHttpInfo(muteChatsBulkInputObject, xIgnoreNullValues);
    }

    /**
     * Mute several chats by chat ids or mute all chats
     * 
     * @param muteChatsBulkInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> muteChatsBulkWithHttpInfo(MuteChatsBulkInputObject muteChatsBulkInputObject, Boolean xIgnoreNullValues) throws ApiException {
        com.squareup.okhttp.Call call = muteChatsBulkValidateBeforeCall(muteChatsBulkInputObject, xIgnoreNullValues, null, null);
        return apiClient.execute(call);
    }

    /**
     * Mute several chats by chat ids or mute all chats (asynchronously)
     * 
     * @param muteChatsBulkInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call muteChatsBulkAsync(MuteChatsBulkInputObject muteChatsBulkInputObject, Boolean xIgnoreNullValues, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = muteChatsBulkValidateBeforeCall(muteChatsBulkInputObject, xIgnoreNullValues, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for reopenChatsBulk
     * @param reopenChatsBulkInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call reopenChatsBulkCall(ReopenChatsBulkInputObject reopenChatsBulkInputObject, Boolean xIgnoreNullValues, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = reopenChatsBulkInputObject;

        // create path and map variables
        String localVarPath = "/api/v2/chats/reopen/bulk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xIgnoreNullValues != null)
        localVarHeaderParams.put("X-Ignore-Null-Values", apiClient.parameterToString(xIgnoreNullValues));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call reopenChatsBulkValidateBeforeCall(ReopenChatsBulkInputObject reopenChatsBulkInputObject, Boolean xIgnoreNullValues, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reopenChatsBulkInputObject' is set
        if (reopenChatsBulkInputObject == null) {
            throw new ApiException("Missing the required parameter 'reopenChatsBulkInputObject' when calling reopenChatsBulk(Async)");
        }
        

        com.squareup.okhttp.Call call = reopenChatsBulkCall(reopenChatsBulkInputObject, xIgnoreNullValues, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Reopen chats by chat ids or reopen all chats
     * 
     * @param reopenChatsBulkInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void reopenChatsBulk(ReopenChatsBulkInputObject reopenChatsBulkInputObject, Boolean xIgnoreNullValues) throws ApiException {
        reopenChatsBulkWithHttpInfo(reopenChatsBulkInputObject, xIgnoreNullValues);
    }

    /**
     * Reopen chats by chat ids or reopen all chats
     * 
     * @param reopenChatsBulkInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> reopenChatsBulkWithHttpInfo(ReopenChatsBulkInputObject reopenChatsBulkInputObject, Boolean xIgnoreNullValues) throws ApiException {
        com.squareup.okhttp.Call call = reopenChatsBulkValidateBeforeCall(reopenChatsBulkInputObject, xIgnoreNullValues, null, null);
        return apiClient.execute(call);
    }

    /**
     * Reopen chats by chat ids or reopen all chats (asynchronously)
     * 
     * @param reopenChatsBulkInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call reopenChatsBulkAsync(ReopenChatsBulkInputObject reopenChatsBulkInputObject, Boolean xIgnoreNullValues, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = reopenChatsBulkValidateBeforeCall(reopenChatsBulkInputObject, xIgnoreNullValues, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for searchChats
     * @param page Fetch specified results page (optional, default to 1)
     * @param limit How many results to return (optional, default to 10)
     * @param query Find chats by specified search query (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchChatsCall(Integer page, Integer limit, String query, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/chats/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (query != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("query", query));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchChatsValidateBeforeCall(Integer page, Integer limit, String query, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = searchChatsCall(page, limit, query, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Find chats by inbound or outbound messages text.
     * 
     * @param page Fetch specified results page (optional, default to 1)
     * @param limit How many results to return (optional, default to 10)
     * @param query Find chats by specified search query (optional)
     * @return SearchChatsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SearchChatsResponse searchChats(Integer page, Integer limit, String query) throws ApiException {
        ApiResponse<SearchChatsResponse> resp = searchChatsWithHttpInfo(page, limit, query);
        return resp.getData();
    }

    /**
     * Find chats by inbound or outbound messages text.
     * 
     * @param page Fetch specified results page (optional, default to 1)
     * @param limit How many results to return (optional, default to 10)
     * @param query Find chats by specified search query (optional)
     * @return ApiResponse&lt;SearchChatsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SearchChatsResponse> searchChatsWithHttpInfo(Integer page, Integer limit, String query) throws ApiException {
        com.squareup.okhttp.Call call = searchChatsValidateBeforeCall(page, limit, query, null, null);
        Type localVarReturnType = new TypeToken<SearchChatsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Find chats by inbound or outbound messages text. (asynchronously)
     * 
     * @param page Fetch specified results page (optional, default to 1)
     * @param limit How many results to return (optional, default to 10)
     * @param query Find chats by specified search query (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchChatsAsync(Integer page, Integer limit, String query, final ApiCallback<SearchChatsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchChatsValidateBeforeCall(page, limit, query, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SearchChatsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchChatsByIds
     * @param page Fetch specified results page (optional, default to 1)
     * @param limit How many results to return (optional, default to 10)
     * @param ids Find chats by ID(s) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchChatsByIdsCall(Integer page, Integer limit, String ids, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/chats/search/ids";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (ids != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ids", ids));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchChatsByIdsValidateBeforeCall(Integer page, Integer limit, String ids, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = searchChatsByIdsCall(page, limit, ids, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Find chats by IDs.
     * 
     * @param page Fetch specified results page (optional, default to 1)
     * @param limit How many results to return (optional, default to 10)
     * @param ids Find chats by ID(s) (optional)
     * @return SearchChatsByIdsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SearchChatsByIdsResponse searchChatsByIds(Integer page, Integer limit, String ids) throws ApiException {
        ApiResponse<SearchChatsByIdsResponse> resp = searchChatsByIdsWithHttpInfo(page, limit, ids);
        return resp.getData();
    }

    /**
     * Find chats by IDs.
     * 
     * @param page Fetch specified results page (optional, default to 1)
     * @param limit How many results to return (optional, default to 10)
     * @param ids Find chats by ID(s) (optional)
     * @return ApiResponse&lt;SearchChatsByIdsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SearchChatsByIdsResponse> searchChatsByIdsWithHttpInfo(Integer page, Integer limit, String ids) throws ApiException {
        com.squareup.okhttp.Call call = searchChatsByIdsValidateBeforeCall(page, limit, ids, null, null);
        Type localVarReturnType = new TypeToken<SearchChatsByIdsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Find chats by IDs. (asynchronously)
     * 
     * @param page Fetch specified results page (optional, default to 1)
     * @param limit How many results to return (optional, default to 10)
     * @param ids Find chats by ID(s) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchChatsByIdsAsync(Integer page, Integer limit, String ids, final ApiCallback<SearchChatsByIdsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchChatsByIdsValidateBeforeCall(page, limit, ids, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SearchChatsByIdsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchChatsByReceipent
     * @param page Fetch specified results page (optional, default to 1)
     * @param limit How many results to return (optional, default to 10)
     * @param query Find chats by specified search query (optional)
     * @param orderBy Order results by some field. Default is id (optional, default to id)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchChatsByReceipentCall(Integer page, Integer limit, String query, String orderBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/chats/search/recipients";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (query != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("query", query));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderBy", orderBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchChatsByReceipentValidateBeforeCall(Integer page, Integer limit, String query, String orderBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = searchChatsByReceipentCall(page, limit, query, orderBy, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Find chats by recipient (contact, list name or phone number).
     * 
     * @param page Fetch specified results page (optional, default to 1)
     * @param limit How many results to return (optional, default to 10)
     * @param query Find chats by specified search query (optional)
     * @param orderBy Order results by some field. Default is id (optional, default to id)
     * @return SearchChatsByReceipentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SearchChatsByReceipentResponse searchChatsByReceipent(Integer page, Integer limit, String query, String orderBy) throws ApiException {
        ApiResponse<SearchChatsByReceipentResponse> resp = searchChatsByReceipentWithHttpInfo(page, limit, query, orderBy);
        return resp.getData();
    }

    /**
     * Find chats by recipient (contact, list name or phone number).
     * 
     * @param page Fetch specified results page (optional, default to 1)
     * @param limit How many results to return (optional, default to 10)
     * @param query Find chats by specified search query (optional)
     * @param orderBy Order results by some field. Default is id (optional, default to id)
     * @return ApiResponse&lt;SearchChatsByReceipentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SearchChatsByReceipentResponse> searchChatsByReceipentWithHttpInfo(Integer page, Integer limit, String query, String orderBy) throws ApiException {
        com.squareup.okhttp.Call call = searchChatsByReceipentValidateBeforeCall(page, limit, query, orderBy, null, null);
        Type localVarReturnType = new TypeToken<SearchChatsByReceipentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Find chats by recipient (contact, list name or phone number). (asynchronously)
     * 
     * @param page Fetch specified results page (optional, default to 1)
     * @param limit How many results to return (optional, default to 10)
     * @param query Find chats by specified search query (optional)
     * @param orderBy Order results by some field. Default is id (optional, default to id)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchChatsByReceipentAsync(Integer page, Integer limit, String query, String orderBy, final ApiCallback<SearchChatsByReceipentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchChatsByReceipentValidateBeforeCall(page, limit, query, orderBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SearchChatsByReceipentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setChatStatus
     * @param setChatStatusInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setChatStatusCall(SetChatStatusInputObject setChatStatusInputObject, Boolean xIgnoreNullValues, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = setChatStatusInputObject;

        // create path and map variables
        String localVarPath = "/api/v2/chats/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xIgnoreNullValues != null)
        localVarHeaderParams.put("X-Ignore-Null-Values", apiClient.parameterToString(xIgnoreNullValues));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setChatStatusValidateBeforeCall(SetChatStatusInputObject setChatStatusInputObject, Boolean xIgnoreNullValues, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'setChatStatusInputObject' is set
        if (setChatStatusInputObject == null) {
            throw new ApiException("Missing the required parameter 'setChatStatusInputObject' when calling setChatStatus(Async)");
        }
        

        com.squareup.okhttp.Call call = setChatStatusCall(setChatStatusInputObject, xIgnoreNullValues, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Set status of the chat given by ID.
     * 
     * @param setChatStatusInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @return ResourceLinkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResourceLinkResponse setChatStatus(SetChatStatusInputObject setChatStatusInputObject, Boolean xIgnoreNullValues) throws ApiException {
        ApiResponse<ResourceLinkResponse> resp = setChatStatusWithHttpInfo(setChatStatusInputObject, xIgnoreNullValues);
        return resp.getData();
    }

    /**
     * Set status of the chat given by ID.
     * 
     * @param setChatStatusInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @return ApiResponse&lt;ResourceLinkResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResourceLinkResponse> setChatStatusWithHttpInfo(SetChatStatusInputObject setChatStatusInputObject, Boolean xIgnoreNullValues) throws ApiException {
        com.squareup.okhttp.Call call = setChatStatusValidateBeforeCall(setChatStatusInputObject, xIgnoreNullValues, null, null);
        Type localVarReturnType = new TypeToken<ResourceLinkResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Set status of the chat given by ID. (asynchronously)
     * 
     * @param setChatStatusInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setChatStatusAsync(SetChatStatusInputObject setChatStatusInputObject, Boolean xIgnoreNullValues, final ApiCallback<ResourceLinkResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setChatStatusValidateBeforeCall(setChatStatusInputObject, xIgnoreNullValues, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResourceLinkResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for unmuteChatsBulk
     * @param unmuteChatsBulkInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call unmuteChatsBulkCall(UnmuteChatsBulkInputObject unmuteChatsBulkInputObject, Boolean xIgnoreNullValues, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = unmuteChatsBulkInputObject;

        // create path and map variables
        String localVarPath = "/api/v2/chats/unmute/bulk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xIgnoreNullValues != null)
        localVarHeaderParams.put("X-Ignore-Null-Values", apiClient.parameterToString(xIgnoreNullValues));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call unmuteChatsBulkValidateBeforeCall(UnmuteChatsBulkInputObject unmuteChatsBulkInputObject, Boolean xIgnoreNullValues, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'unmuteChatsBulkInputObject' is set
        if (unmuteChatsBulkInputObject == null) {
            throw new ApiException("Missing the required parameter 'unmuteChatsBulkInputObject' when calling unmuteChatsBulk(Async)");
        }
        

        com.squareup.okhttp.Call call = unmuteChatsBulkCall(unmuteChatsBulkInputObject, xIgnoreNullValues, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Unmute several chats by chat ids or unmute all chats
     * 
     * @param unmuteChatsBulkInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void unmuteChatsBulk(UnmuteChatsBulkInputObject unmuteChatsBulkInputObject, Boolean xIgnoreNullValues) throws ApiException {
        unmuteChatsBulkWithHttpInfo(unmuteChatsBulkInputObject, xIgnoreNullValues);
    }

    /**
     * Unmute several chats by chat ids or unmute all chats
     * 
     * @param unmuteChatsBulkInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> unmuteChatsBulkWithHttpInfo(UnmuteChatsBulkInputObject unmuteChatsBulkInputObject, Boolean xIgnoreNullValues) throws ApiException {
        com.squareup.okhttp.Call call = unmuteChatsBulkValidateBeforeCall(unmuteChatsBulkInputObject, xIgnoreNullValues, null, null);
        return apiClient.execute(call);
    }

    /**
     * Unmute several chats by chat ids or unmute all chats (asynchronously)
     * 
     * @param unmuteChatsBulkInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call unmuteChatsBulkAsync(UnmuteChatsBulkInputObject unmuteChatsBulkInputObject, Boolean xIgnoreNullValues, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = unmuteChatsBulkValidateBeforeCall(unmuteChatsBulkInputObject, xIgnoreNullValues, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
