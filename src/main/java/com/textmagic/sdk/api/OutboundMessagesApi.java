/*
 * TextMagic API Documentation
 * # Overview ## Introduction test <img style=\"float: right; margin-left: 10px; width: 100px;\" src=\"images/phone.png\"> TextMagic SMS API is a platform for building your own messaging app using our messaging infrastructure. It allows you to send and receive SMS text messages, query information about inbound and outbound messages, manage contacts, create templates (i.e. message formats and static texts) and schedule recurrent SMS messages as well as process bulk SMS messages. <button name=\"button\" onclick=\"http://www.google.com\" class=\"btn\">Try TextMagic API for Free</button>  ### Two Ways to Use TextMagic API * [REST API](https://www.textmagic.com/docs/api/start/) – get full access to TextMagic’s messaging gateway features * [Email to SMS API](https://www.textmagic.com/docs/api/send-email-to-sms/) – set up two-way SMS communication without the need to write any additional code  ### Code Libraries We have created a set of client libraries for the most popular programming languages (such as REST API Java and REST API PHP). These libraries allow you to integrate our API into your code in minutes. Just choose your preferred language to get started:  ## Getting started Get Started with the TextMagic REST API To start sending text messages using the TextMagic REST API, just follow these steps: 1. Generate the API credentials 1. Connect to our API endpoint This page provides all the information you need to get started. Here, we explain the following steps:  How to obtain the API credentials The API endpoint How the REST API works The next step How to obtain the API credentials  ### How to obtain the API credentials To start sending text messages, you need to create an API key. API keys are similar to an account password; the difference is that an API key only provides access to the API: you cannot log in to TextMagic Online using the API key.  Your program sends the login credentials with each API request as HTTP headers: `X-TM-Username` is your TextMagic username, while `X-TM-Key` is your API key.  How to obtain an API key:  1. Log in to TextMagic (or start a free trial if you haven’t registered yet). 1. Go to the API settings page. 1. Click the Add new API key button. 1. Enter an app name for this key. Note, it’s just a label, so pick any name. 1. Click Generate new key. 1. You should now see your new API key in the green notification banner above the table:  ![alt text](images/credentials.png)  > Note for API v1 users > V1 keys are not compatible with the V2 version of the TextMagic REST API, so you will need to generate a new API key to use the V2 endpoint.  ### The API endpoint The TextMagic REST API endpoint is: ``` https://rest.textmagic.com/api/v2 ``` All the URLs referenced in this documentation should use this base URL.  ### How the REST API works REST APIs use the HTTP protocol to send and receive messages. REST messages are usually encoded as JSON documents and are an improvement over older methods such as the XML based SOAP protocol. REST APIs use the same set of methods that web browsers use: POST, GET, PUT or DELETE. These correspond to the CRUD operations: create, read, update and delete. Often, REST URIs provide direct CRUD access to entities or collections of entities, for example: http://api.foo.com/people. In this instance, to delete a person’s endpoint, you might simply call the endpoint DELETE http://api.foo.com/people/{id}. REST makes these types of operations simple.  > Example > > Let’s take the entity most often used in messaging: contacts. Imagine you want to perform operations on your contacts list: well, it’s only a matter of calling the following endpoints: > * GET /api/v2/contacts (get all of your contacts) > * GET /api/v2/contacts/{id} (get a specific contact) > * POST /api/v2/contacts (create a new contact) > * PUT /api/v2/contacts/{id} (update an existing contact) > * DELETE /api/v2/contacts/{id} (delete an existing contact) It’s that simple! In fact, that’s all you need to do to manage the contacts in your TextMagic account!  ## Sandbox Sandbox is a tool to test TextMagic REST API requests without the need to install any applications or write any code. Here, we explain the following details about Sandbox: * The credentials area * Command documentation * How it works  <a href=\"\">Go to TextMagic Sandbox</a>  ### The credentials area To make requests using your TextMagic account, you need to enter your account username and your API key into the corresponding fields. You may also Save them in your browser or press Clear to erase them.  ![alt text](images/sandbox.png) 
 *
 * OpenAPI spec version: 2
 * Contact: support@textmagi.biz
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.textmagic.sdk.api;

import com.textmagic.sdk.ApiCallback;
import com.textmagic.sdk.ApiClient;
import com.textmagic.sdk.ApiException;
import com.textmagic.sdk.ApiResponse;
import com.textmagic.sdk.Configuration;
import com.textmagic.sdk.Pair;
import com.textmagic.sdk.ProgressRequestBody;
import com.textmagic.sdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.textmagic.sdk.model.BadRequestResponse;
import com.textmagic.sdk.model.DeleteOutboundMessagesBulkInputObject;
import java.io.File;
import com.textmagic.sdk.model.GetAllOutboundMessagesResponse;
import com.textmagic.sdk.model.GetMessagePreviewResponse;
import com.textmagic.sdk.model.GetMessagePriceResponse;
import com.textmagic.sdk.model.GetMessagePricesResponse;
import com.textmagic.sdk.model.GetOutboundMessagesHistoryResponse;
import com.textmagic.sdk.model.MessageOut;
import com.textmagic.sdk.model.NotFoundResponse;
import com.textmagic.sdk.model.SearchOutboundMessagesResponse;
import com.textmagic.sdk.model.SendMessageInputObject;
import com.textmagic.sdk.model.SendMessageResponse;
import com.textmagic.sdk.model.UnauthorizedResponse;
import com.textmagic.sdk.model.UploadMessageAttachmentResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OutboundMessagesApi {
    private ApiClient apiClient;

    public OutboundMessagesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OutboundMessagesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteAllOutboundMessages
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAllOutboundMessagesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/message/all";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAllOutboundMessagesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = deleteAllOutboundMessagesCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete all messages
     * Delete all messages.
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteAllOutboundMessages() throws ApiException {
        deleteAllOutboundMessagesWithHttpInfo();
    }

    /**
     * Delete all messages
     * Delete all messages.
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteAllOutboundMessagesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = deleteAllOutboundMessagesValidateBeforeCall(null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete all messages (asynchronously)
     * Delete all messages.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAllOutboundMessagesAsync(final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAllOutboundMessagesValidateBeforeCall(progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteOutboundMessage
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteOutboundMessageCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/messages/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteOutboundMessageValidateBeforeCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteOutboundMessage(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteOutboundMessageCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete message
     * Delete a single message.
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteOutboundMessage(Integer id) throws ApiException {
        deleteOutboundMessageWithHttpInfo(id);
    }

    /**
     * Delete message
     * Delete a single message.
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteOutboundMessageWithHttpInfo(Integer id) throws ApiException {
        com.squareup.okhttp.Call call = deleteOutboundMessageValidateBeforeCall(id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete message (asynchronously)
     * Delete a single message.
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteOutboundMessageAsync(Integer id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteOutboundMessageValidateBeforeCall(id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteOutboundMessagesBulk
     * @param deleteOutboundMessagesBulkInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteOutboundMessagesBulkCall(DeleteOutboundMessagesBulkInputObject deleteOutboundMessagesBulkInputObject, Boolean xIgnoreNullValues, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = deleteOutboundMessagesBulkInputObject;

        // create path and map variables
        String localVarPath = "/api/v2/messages/delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xIgnoreNullValues != null)
        localVarHeaderParams.put("X-Ignore-Null-Values", apiClient.parameterToString(xIgnoreNullValues));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteOutboundMessagesBulkValidateBeforeCall(DeleteOutboundMessagesBulkInputObject deleteOutboundMessagesBulkInputObject, Boolean xIgnoreNullValues, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deleteOutboundMessagesBulkInputObject' is set
        if (deleteOutboundMessagesBulkInputObject == null) {
            throw new ApiException("Missing the required parameter 'deleteOutboundMessagesBulkInputObject' when calling deleteOutboundMessagesBulk(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteOutboundMessagesBulkCall(deleteOutboundMessagesBulkInputObject, xIgnoreNullValues, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete messages by IDs
     * Delete outbound messages by given ID(s) or delete all outbound messages.
     * @param deleteOutboundMessagesBulkInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteOutboundMessagesBulk(DeleteOutboundMessagesBulkInputObject deleteOutboundMessagesBulkInputObject, Boolean xIgnoreNullValues) throws ApiException {
        deleteOutboundMessagesBulkWithHttpInfo(deleteOutboundMessagesBulkInputObject, xIgnoreNullValues);
    }

    /**
     * Delete messages by IDs
     * Delete outbound messages by given ID(s) or delete all outbound messages.
     * @param deleteOutboundMessagesBulkInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteOutboundMessagesBulkWithHttpInfo(DeleteOutboundMessagesBulkInputObject deleteOutboundMessagesBulkInputObject, Boolean xIgnoreNullValues) throws ApiException {
        com.squareup.okhttp.Call call = deleteOutboundMessagesBulkValidateBeforeCall(deleteOutboundMessagesBulkInputObject, xIgnoreNullValues, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete messages by IDs (asynchronously)
     * Delete outbound messages by given ID(s) or delete all outbound messages.
     * @param deleteOutboundMessagesBulkInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteOutboundMessagesBulkAsync(DeleteOutboundMessagesBulkInputObject deleteOutboundMessagesBulkInputObject, Boolean xIgnoreNullValues, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteOutboundMessagesBulkValidateBeforeCall(deleteOutboundMessagesBulkInputObject, xIgnoreNullValues, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getAllOutboundMessages
     * @param page Fetch specified results page (optional, default to 1)
     * @param limit How many results to return (optional, default to 10)
     * @param lastId Filter results by ID, selecting all values lesser than the specified ID. Note that \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllOutboundMessagesCall(Integer page, Integer limit, Integer lastId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/messages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (lastId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lastId", lastId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllOutboundMessagesValidateBeforeCall(Integer page, Integer limit, Integer lastId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAllOutboundMessagesCall(page, limit, lastId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all messages
     * Get all user oubound messages.
     * @param page Fetch specified results page (optional, default to 1)
     * @param limit How many results to return (optional, default to 10)
     * @param lastId Filter results by ID, selecting all values lesser than the specified ID. Note that \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified (optional)
     * @return GetAllOutboundMessagesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetAllOutboundMessagesResponse getAllOutboundMessages(Integer page, Integer limit, Integer lastId) throws ApiException {
        ApiResponse<GetAllOutboundMessagesResponse> resp = getAllOutboundMessagesWithHttpInfo(page, limit, lastId);
        return resp.getData();
    }

    /**
     * Get all messages
     * Get all user oubound messages.
     * @param page Fetch specified results page (optional, default to 1)
     * @param limit How many results to return (optional, default to 10)
     * @param lastId Filter results by ID, selecting all values lesser than the specified ID. Note that \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified (optional)
     * @return ApiResponse&lt;GetAllOutboundMessagesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetAllOutboundMessagesResponse> getAllOutboundMessagesWithHttpInfo(Integer page, Integer limit, Integer lastId) throws ApiException {
        com.squareup.okhttp.Call call = getAllOutboundMessagesValidateBeforeCall(page, limit, lastId, null, null);
        Type localVarReturnType = new TypeToken<GetAllOutboundMessagesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all messages (asynchronously)
     * Get all user oubound messages.
     * @param page Fetch specified results page (optional, default to 1)
     * @param limit How many results to return (optional, default to 10)
     * @param lastId Filter results by ID, selecting all values lesser than the specified ID. Note that \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllOutboundMessagesAsync(Integer page, Integer limit, Integer lastId, final ApiCallback<GetAllOutboundMessagesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllOutboundMessagesValidateBeforeCall(page, limit, lastId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetAllOutboundMessagesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMessagePreview
     * @param text Message text. Required if template_id is not set (optional)
     * @param templateId Template used instead of message text. Required if text is not set (optional)
     * @param sendingTime DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time in unix timestamp format. Default is now (optional)
     * @param sendingDateTime Sending time in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to sendingTimezone (optional)
     * @param sendingTimezone ID or ISO-name of timezone used for sending when sendingDateTime parameter is set. E.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent at May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is account timezone (optional)
     * @param contacts Comma separated array of contact resources id message will be sent to (optional)
     * @param lists Comma separated array of list resources id message will be sent to (optional)
     * @param phones Comma separated array of E.164 phone numbers message will be sent to (optional)
     * @param cutExtra Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. Default is 0 (optional, default to 0)
     * @param partsCount Maximum message parts count (TextMagic allows sending 1 to 6 message parts). Default is 6 (optional, default to 6)
     * @param referenceId Custom message reference id which can be used in your application infrastructure (optional)
     * @param from One of allowed Sender ID (phone number or alphanumeric sender ID). If specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery (optional)
     * @param rule iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details (optional)
     * @param createChat Should sending method try to create new Chat(if not exist) with specified recipients. Default is 0 (optional, default to 0)
     * @param tts Send Text to Speech message. Default is 0 (optional, default to 0)
     * @param local Treat phone numbers passed in \\&#39;phones\\&#39; field as local. Default is 0 (optional, default to 0)
     * @param localCountry 2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is account country (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMessagePreviewCall(String text, Integer templateId, Integer sendingTime, String sendingDateTime, String sendingTimezone, String contacts, String lists, String phones, Integer cutExtra, Integer partsCount, Integer referenceId, String from, String rule, Integer createChat, Integer tts, Integer local, String localCountry, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/messages/preview";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (text != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("text", text));
        if (templateId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("templateId", templateId));
        if (sendingTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sendingTime", sendingTime));
        if (sendingDateTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sendingDateTime", sendingDateTime));
        if (sendingTimezone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sendingTimezone", sendingTimezone));
        if (contacts != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("contacts", contacts));
        if (lists != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lists", lists));
        if (phones != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("phones", phones));
        if (cutExtra != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cutExtra", cutExtra));
        if (partsCount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("partsCount", partsCount));
        if (referenceId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("referenceId", referenceId));
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("from", from));
        if (rule != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("rule", rule));
        if (createChat != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("createChat", createChat));
        if (tts != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("tts", tts));
        if (local != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("local", local));
        if (localCountry != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("localCountry", localCountry));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMessagePreviewValidateBeforeCall(String text, Integer templateId, Integer sendingTime, String sendingDateTime, String sendingTimezone, String contacts, String lists, String phones, Integer cutExtra, Integer partsCount, Integer referenceId, String from, String rule, Integer createChat, Integer tts, Integer local, String localCountry, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getMessagePreviewCall(text, templateId, sendingTime, sendingDateTime, sendingTimezone, contacts, lists, phones, cutExtra, partsCount, referenceId, from, rule, createChat, tts, local, localCountry, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Preview message
     * Get messages preview (with tags merged) up to 100 messages per session.
     * @param text Message text. Required if template_id is not set (optional)
     * @param templateId Template used instead of message text. Required if text is not set (optional)
     * @param sendingTime DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time in unix timestamp format. Default is now (optional)
     * @param sendingDateTime Sending time in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to sendingTimezone (optional)
     * @param sendingTimezone ID or ISO-name of timezone used for sending when sendingDateTime parameter is set. E.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent at May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is account timezone (optional)
     * @param contacts Comma separated array of contact resources id message will be sent to (optional)
     * @param lists Comma separated array of list resources id message will be sent to (optional)
     * @param phones Comma separated array of E.164 phone numbers message will be sent to (optional)
     * @param cutExtra Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. Default is 0 (optional, default to 0)
     * @param partsCount Maximum message parts count (TextMagic allows sending 1 to 6 message parts). Default is 6 (optional, default to 6)
     * @param referenceId Custom message reference id which can be used in your application infrastructure (optional)
     * @param from One of allowed Sender ID (phone number or alphanumeric sender ID). If specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery (optional)
     * @param rule iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details (optional)
     * @param createChat Should sending method try to create new Chat(if not exist) with specified recipients. Default is 0 (optional, default to 0)
     * @param tts Send Text to Speech message. Default is 0 (optional, default to 0)
     * @param local Treat phone numbers passed in \\&#39;phones\\&#39; field as local. Default is 0 (optional, default to 0)
     * @param localCountry 2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is account country (optional)
     * @return GetMessagePreviewResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetMessagePreviewResponse getMessagePreview(String text, Integer templateId, Integer sendingTime, String sendingDateTime, String sendingTimezone, String contacts, String lists, String phones, Integer cutExtra, Integer partsCount, Integer referenceId, String from, String rule, Integer createChat, Integer tts, Integer local, String localCountry) throws ApiException {
        ApiResponse<GetMessagePreviewResponse> resp = getMessagePreviewWithHttpInfo(text, templateId, sendingTime, sendingDateTime, sendingTimezone, contacts, lists, phones, cutExtra, partsCount, referenceId, from, rule, createChat, tts, local, localCountry);
        return resp.getData();
    }

    /**
     * Preview message
     * Get messages preview (with tags merged) up to 100 messages per session.
     * @param text Message text. Required if template_id is not set (optional)
     * @param templateId Template used instead of message text. Required if text is not set (optional)
     * @param sendingTime DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time in unix timestamp format. Default is now (optional)
     * @param sendingDateTime Sending time in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to sendingTimezone (optional)
     * @param sendingTimezone ID or ISO-name of timezone used for sending when sendingDateTime parameter is set. E.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent at May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is account timezone (optional)
     * @param contacts Comma separated array of contact resources id message will be sent to (optional)
     * @param lists Comma separated array of list resources id message will be sent to (optional)
     * @param phones Comma separated array of E.164 phone numbers message will be sent to (optional)
     * @param cutExtra Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. Default is 0 (optional, default to 0)
     * @param partsCount Maximum message parts count (TextMagic allows sending 1 to 6 message parts). Default is 6 (optional, default to 6)
     * @param referenceId Custom message reference id which can be used in your application infrastructure (optional)
     * @param from One of allowed Sender ID (phone number or alphanumeric sender ID). If specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery (optional)
     * @param rule iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details (optional)
     * @param createChat Should sending method try to create new Chat(if not exist) with specified recipients. Default is 0 (optional, default to 0)
     * @param tts Send Text to Speech message. Default is 0 (optional, default to 0)
     * @param local Treat phone numbers passed in \\&#39;phones\\&#39; field as local. Default is 0 (optional, default to 0)
     * @param localCountry 2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is account country (optional)
     * @return ApiResponse&lt;GetMessagePreviewResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetMessagePreviewResponse> getMessagePreviewWithHttpInfo(String text, Integer templateId, Integer sendingTime, String sendingDateTime, String sendingTimezone, String contacts, String lists, String phones, Integer cutExtra, Integer partsCount, Integer referenceId, String from, String rule, Integer createChat, Integer tts, Integer local, String localCountry) throws ApiException {
        com.squareup.okhttp.Call call = getMessagePreviewValidateBeforeCall(text, templateId, sendingTime, sendingDateTime, sendingTimezone, contacts, lists, phones, cutExtra, partsCount, referenceId, from, rule, createChat, tts, local, localCountry, null, null);
        Type localVarReturnType = new TypeToken<GetMessagePreviewResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Preview message (asynchronously)
     * Get messages preview (with tags merged) up to 100 messages per session.
     * @param text Message text. Required if template_id is not set (optional)
     * @param templateId Template used instead of message text. Required if text is not set (optional)
     * @param sendingTime DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time in unix timestamp format. Default is now (optional)
     * @param sendingDateTime Sending time in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to sendingTimezone (optional)
     * @param sendingTimezone ID or ISO-name of timezone used for sending when sendingDateTime parameter is set. E.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent at May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is account timezone (optional)
     * @param contacts Comma separated array of contact resources id message will be sent to (optional)
     * @param lists Comma separated array of list resources id message will be sent to (optional)
     * @param phones Comma separated array of E.164 phone numbers message will be sent to (optional)
     * @param cutExtra Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. Default is 0 (optional, default to 0)
     * @param partsCount Maximum message parts count (TextMagic allows sending 1 to 6 message parts). Default is 6 (optional, default to 6)
     * @param referenceId Custom message reference id which can be used in your application infrastructure (optional)
     * @param from One of allowed Sender ID (phone number or alphanumeric sender ID). If specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery (optional)
     * @param rule iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details (optional)
     * @param createChat Should sending method try to create new Chat(if not exist) with specified recipients. Default is 0 (optional, default to 0)
     * @param tts Send Text to Speech message. Default is 0 (optional, default to 0)
     * @param local Treat phone numbers passed in \\&#39;phones\\&#39; field as local. Default is 0 (optional, default to 0)
     * @param localCountry 2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is account country (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMessagePreviewAsync(String text, Integer templateId, Integer sendingTime, String sendingDateTime, String sendingTimezone, String contacts, String lists, String phones, Integer cutExtra, Integer partsCount, Integer referenceId, String from, String rule, Integer createChat, Integer tts, Integer local, String localCountry, final ApiCallback<GetMessagePreviewResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMessagePreviewValidateBeforeCall(text, templateId, sendingTime, sendingDateTime, sendingTimezone, contacts, lists, phones, cutExtra, partsCount, referenceId, from, rule, createChat, tts, local, localCountry, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetMessagePreviewResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMessagePrice
     * @param includeBlocked Should we show pricing for the blocked contacts. (optional, default to 0)
     * @param text Message text. Required if template_id is not set (optional)
     * @param templateId Template used instead of message text. Required if text is not set (optional)
     * @param sendingTime DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time in unix timestamp format. Default is now (optional)
     * @param sendingDateTime Sending time in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to sendingTimezone (optional)
     * @param sendingTimezone ID or ISO-name of timezone used for sending when sendingDateTime parameter is set. E.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent at May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is account timezone (optional)
     * @param contacts Comma separated array of contact resources id message will be sent to (optional)
     * @param lists Comma separated array of list resources id message will be sent to (optional)
     * @param phones Comma separated array of E.164 phone numbers message will be sent to (optional)
     * @param cutExtra Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. Default is 0 (optional, default to 0)
     * @param partsCount Maximum message parts count (TextMagic allows sending 1 to 6 message parts). Default is 6 (optional, default to 6)
     * @param referenceId Custom message reference id which can be used in your application infrastructure (optional)
     * @param from One of allowed Sender ID (phone number or alphanumeric sender ID). If specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery (optional)
     * @param rule iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details (optional)
     * @param createChat Should sending method try to create new Chat(if not exist) with specified recipients. Default is 0 (optional, default to 0)
     * @param tts Send Text to Speech message. Default is 0 (optional, default to 0)
     * @param local Treat phone numbers passed in \\&#39;phones\\&#39; field as local. Default is 0 (optional, default to 0)
     * @param localCountry 2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is account country (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMessagePriceCall(Integer includeBlocked, String text, Integer templateId, Integer sendingTime, String sendingDateTime, String sendingTimezone, String contacts, String lists, String phones, Integer cutExtra, Integer partsCount, Integer referenceId, String from, String rule, Integer createChat, Integer tts, Integer local, String localCountry, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/messages/price";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (includeBlocked != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("includeBlocked", includeBlocked));
        if (text != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("text", text));
        if (templateId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("templateId", templateId));
        if (sendingTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sendingTime", sendingTime));
        if (sendingDateTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sendingDateTime", sendingDateTime));
        if (sendingTimezone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sendingTimezone", sendingTimezone));
        if (contacts != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("contacts", contacts));
        if (lists != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lists", lists));
        if (phones != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("phones", phones));
        if (cutExtra != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cutExtra", cutExtra));
        if (partsCount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("partsCount", partsCount));
        if (referenceId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("referenceId", referenceId));
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("from", from));
        if (rule != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("rule", rule));
        if (createChat != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("createChat", createChat));
        if (tts != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("tts", tts));
        if (local != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("local", local));
        if (localCountry != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("localCountry", localCountry));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMessagePriceValidateBeforeCall(Integer includeBlocked, String text, Integer templateId, Integer sendingTime, String sendingDateTime, String sendingTimezone, String contacts, String lists, String phones, Integer cutExtra, Integer partsCount, Integer referenceId, String from, String rule, Integer createChat, Integer tts, Integer local, String localCountry, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getMessagePriceCall(includeBlocked, text, templateId, sendingTime, sendingDateTime, sendingTimezone, contacts, lists, phones, cutExtra, partsCount, referenceId, from, rule, createChat, tts, local, localCountry, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Check price
     * Check pricing for a new outbound message.
     * @param includeBlocked Should we show pricing for the blocked contacts. (optional, default to 0)
     * @param text Message text. Required if template_id is not set (optional)
     * @param templateId Template used instead of message text. Required if text is not set (optional)
     * @param sendingTime DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time in unix timestamp format. Default is now (optional)
     * @param sendingDateTime Sending time in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to sendingTimezone (optional)
     * @param sendingTimezone ID or ISO-name of timezone used for sending when sendingDateTime parameter is set. E.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent at May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is account timezone (optional)
     * @param contacts Comma separated array of contact resources id message will be sent to (optional)
     * @param lists Comma separated array of list resources id message will be sent to (optional)
     * @param phones Comma separated array of E.164 phone numbers message will be sent to (optional)
     * @param cutExtra Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. Default is 0 (optional, default to 0)
     * @param partsCount Maximum message parts count (TextMagic allows sending 1 to 6 message parts). Default is 6 (optional, default to 6)
     * @param referenceId Custom message reference id which can be used in your application infrastructure (optional)
     * @param from One of allowed Sender ID (phone number or alphanumeric sender ID). If specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery (optional)
     * @param rule iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details (optional)
     * @param createChat Should sending method try to create new Chat(if not exist) with specified recipients. Default is 0 (optional, default to 0)
     * @param tts Send Text to Speech message. Default is 0 (optional, default to 0)
     * @param local Treat phone numbers passed in \\&#39;phones\\&#39; field as local. Default is 0 (optional, default to 0)
     * @param localCountry 2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is account country (optional)
     * @return GetMessagePriceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetMessagePriceResponse getMessagePrice(Integer includeBlocked, String text, Integer templateId, Integer sendingTime, String sendingDateTime, String sendingTimezone, String contacts, String lists, String phones, Integer cutExtra, Integer partsCount, Integer referenceId, String from, String rule, Integer createChat, Integer tts, Integer local, String localCountry) throws ApiException {
        ApiResponse<GetMessagePriceResponse> resp = getMessagePriceWithHttpInfo(includeBlocked, text, templateId, sendingTime, sendingDateTime, sendingTimezone, contacts, lists, phones, cutExtra, partsCount, referenceId, from, rule, createChat, tts, local, localCountry);
        return resp.getData();
    }

    /**
     * Check price
     * Check pricing for a new outbound message.
     * @param includeBlocked Should we show pricing for the blocked contacts. (optional, default to 0)
     * @param text Message text. Required if template_id is not set (optional)
     * @param templateId Template used instead of message text. Required if text is not set (optional)
     * @param sendingTime DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time in unix timestamp format. Default is now (optional)
     * @param sendingDateTime Sending time in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to sendingTimezone (optional)
     * @param sendingTimezone ID or ISO-name of timezone used for sending when sendingDateTime parameter is set. E.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent at May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is account timezone (optional)
     * @param contacts Comma separated array of contact resources id message will be sent to (optional)
     * @param lists Comma separated array of list resources id message will be sent to (optional)
     * @param phones Comma separated array of E.164 phone numbers message will be sent to (optional)
     * @param cutExtra Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. Default is 0 (optional, default to 0)
     * @param partsCount Maximum message parts count (TextMagic allows sending 1 to 6 message parts). Default is 6 (optional, default to 6)
     * @param referenceId Custom message reference id which can be used in your application infrastructure (optional)
     * @param from One of allowed Sender ID (phone number or alphanumeric sender ID). If specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery (optional)
     * @param rule iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details (optional)
     * @param createChat Should sending method try to create new Chat(if not exist) with specified recipients. Default is 0 (optional, default to 0)
     * @param tts Send Text to Speech message. Default is 0 (optional, default to 0)
     * @param local Treat phone numbers passed in \\&#39;phones\\&#39; field as local. Default is 0 (optional, default to 0)
     * @param localCountry 2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is account country (optional)
     * @return ApiResponse&lt;GetMessagePriceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetMessagePriceResponse> getMessagePriceWithHttpInfo(Integer includeBlocked, String text, Integer templateId, Integer sendingTime, String sendingDateTime, String sendingTimezone, String contacts, String lists, String phones, Integer cutExtra, Integer partsCount, Integer referenceId, String from, String rule, Integer createChat, Integer tts, Integer local, String localCountry) throws ApiException {
        com.squareup.okhttp.Call call = getMessagePriceValidateBeforeCall(includeBlocked, text, templateId, sendingTime, sendingDateTime, sendingTimezone, contacts, lists, phones, cutExtra, partsCount, referenceId, from, rule, createChat, tts, local, localCountry, null, null);
        Type localVarReturnType = new TypeToken<GetMessagePriceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Check price (asynchronously)
     * Check pricing for a new outbound message.
     * @param includeBlocked Should we show pricing for the blocked contacts. (optional, default to 0)
     * @param text Message text. Required if template_id is not set (optional)
     * @param templateId Template used instead of message text. Required if text is not set (optional)
     * @param sendingTime DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time in unix timestamp format. Default is now (optional)
     * @param sendingDateTime Sending time in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to sendingTimezone (optional)
     * @param sendingTimezone ID or ISO-name of timezone used for sending when sendingDateTime parameter is set. E.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent at May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is account timezone (optional)
     * @param contacts Comma separated array of contact resources id message will be sent to (optional)
     * @param lists Comma separated array of list resources id message will be sent to (optional)
     * @param phones Comma separated array of E.164 phone numbers message will be sent to (optional)
     * @param cutExtra Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. Default is 0 (optional, default to 0)
     * @param partsCount Maximum message parts count (TextMagic allows sending 1 to 6 message parts). Default is 6 (optional, default to 6)
     * @param referenceId Custom message reference id which can be used in your application infrastructure (optional)
     * @param from One of allowed Sender ID (phone number or alphanumeric sender ID). If specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery (optional)
     * @param rule iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details (optional)
     * @param createChat Should sending method try to create new Chat(if not exist) with specified recipients. Default is 0 (optional, default to 0)
     * @param tts Send Text to Speech message. Default is 0 (optional, default to 0)
     * @param local Treat phone numbers passed in \\&#39;phones\\&#39; field as local. Default is 0 (optional, default to 0)
     * @param localCountry 2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is account country (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMessagePriceAsync(Integer includeBlocked, String text, Integer templateId, Integer sendingTime, String sendingDateTime, String sendingTimezone, String contacts, String lists, String phones, Integer cutExtra, Integer partsCount, Integer referenceId, String from, String rule, Integer createChat, Integer tts, Integer local, String localCountry, final ApiCallback<GetMessagePriceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMessagePriceValidateBeforeCall(includeBlocked, text, templateId, sendingTime, sendingDateTime, sendingTimezone, contacts, lists, phones, cutExtra, partsCount, referenceId, from, rule, createChat, tts, local, localCountry, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetMessagePriceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMessagePrices
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMessagePricesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/messages/prices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMessagePricesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getMessagePricesCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get pricing
     * Get message prices for all countries.
     * @return GetMessagePricesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetMessagePricesResponse getMessagePrices() throws ApiException {
        ApiResponse<GetMessagePricesResponse> resp = getMessagePricesWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get pricing
     * Get message prices for all countries.
     * @return ApiResponse&lt;GetMessagePricesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetMessagePricesResponse> getMessagePricesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getMessagePricesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<GetMessagePricesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get pricing (asynchronously)
     * Get message prices for all countries.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMessagePricesAsync(final ApiCallback<GetMessagePricesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMessagePricesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetMessagePricesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOutboundMessage
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOutboundMessageCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/messages/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOutboundMessageValidateBeforeCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOutboundMessage(Async)");
        }
        

        com.squareup.okhttp.Call call = getOutboundMessageCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a single message
     * Get a single outgoing message.
     * @param id  (required)
     * @return MessageOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MessageOut getOutboundMessage(Integer id) throws ApiException {
        ApiResponse<MessageOut> resp = getOutboundMessageWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get a single message
     * Get a single outgoing message.
     * @param id  (required)
     * @return ApiResponse&lt;MessageOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MessageOut> getOutboundMessageWithHttpInfo(Integer id) throws ApiException {
        com.squareup.okhttp.Call call = getOutboundMessageValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<MessageOut>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a single message (asynchronously)
     * Get a single outgoing message.
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOutboundMessageAsync(Integer id, final ApiCallback<MessageOut> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOutboundMessageValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MessageOut>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOutboundMessagesHistory
     * @param limit How many results to return (optional, default to 10)
     * @param lastId Filter results by ID, selecting all values lesser than the specified ID. (optional)
     * @param query Find message by specified search query (optional)
     * @param orderBy Order results by some field. Default is id (optional, default to id)
     * @param direction Order direction. Default is desc (optional, default to desc)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOutboundMessagesHistoryCall(Integer limit, Integer lastId, String query, String orderBy, String direction, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/history";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (lastId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lastId", lastId));
        if (query != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("query", query));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderBy", orderBy));
        if (direction != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("direction", direction));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOutboundMessagesHistoryValidateBeforeCall(Integer limit, Integer lastId, String query, String orderBy, String direction, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getOutboundMessagesHistoryCall(limit, lastId, query, orderBy, direction, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get history
     * Get outbound messages history.
     * @param limit How many results to return (optional, default to 10)
     * @param lastId Filter results by ID, selecting all values lesser than the specified ID. (optional)
     * @param query Find message by specified search query (optional)
     * @param orderBy Order results by some field. Default is id (optional, default to id)
     * @param direction Order direction. Default is desc (optional, default to desc)
     * @return GetOutboundMessagesHistoryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetOutboundMessagesHistoryResponse getOutboundMessagesHistory(Integer limit, Integer lastId, String query, String orderBy, String direction) throws ApiException {
        ApiResponse<GetOutboundMessagesHistoryResponse> resp = getOutboundMessagesHistoryWithHttpInfo(limit, lastId, query, orderBy, direction);
        return resp.getData();
    }

    /**
     * Get history
     * Get outbound messages history.
     * @param limit How many results to return (optional, default to 10)
     * @param lastId Filter results by ID, selecting all values lesser than the specified ID. (optional)
     * @param query Find message by specified search query (optional)
     * @param orderBy Order results by some field. Default is id (optional, default to id)
     * @param direction Order direction. Default is desc (optional, default to desc)
     * @return ApiResponse&lt;GetOutboundMessagesHistoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetOutboundMessagesHistoryResponse> getOutboundMessagesHistoryWithHttpInfo(Integer limit, Integer lastId, String query, String orderBy, String direction) throws ApiException {
        com.squareup.okhttp.Call call = getOutboundMessagesHistoryValidateBeforeCall(limit, lastId, query, orderBy, direction, null, null);
        Type localVarReturnType = new TypeToken<GetOutboundMessagesHistoryResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get history (asynchronously)
     * Get outbound messages history.
     * @param limit How many results to return (optional, default to 10)
     * @param lastId Filter results by ID, selecting all values lesser than the specified ID. (optional)
     * @param query Find message by specified search query (optional)
     * @param orderBy Order results by some field. Default is id (optional, default to id)
     * @param direction Order direction. Default is desc (optional, default to desc)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOutboundMessagesHistoryAsync(Integer limit, Integer lastId, String query, String orderBy, String direction, final ApiCallback<GetOutboundMessagesHistoryResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOutboundMessagesHistoryValidateBeforeCall(limit, lastId, query, orderBy, direction, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetOutboundMessagesHistoryResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchOutboundMessages
     * @param page Fetch specified results page (optional, default to 1)
     * @param limit How many results to return (optional, default to 10)
     * @param lastId Filter results by ID, selecting all values lesser than the specified ID. Note that \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified (optional)
     * @param ids Find message by ID(s) (optional)
     * @param sessionId Find messages by session ID (optional)
     * @param statuses Find messages by status (optional)
     * @param includeDeleted Search also in deleted messages (optional, default to 0)
     * @param query Find messages by specified search query (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchOutboundMessagesCall(Integer page, Integer limit, Integer lastId, String ids, Integer sessionId, String statuses, Integer includeDeleted, String query, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/messages/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (lastId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lastId", lastId));
        if (ids != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ids", ids));
        if (sessionId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sessionId", sessionId));
        if (statuses != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("statuses", statuses));
        if (includeDeleted != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("includeDeleted", includeDeleted));
        if (query != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("query", query));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchOutboundMessagesValidateBeforeCall(Integer page, Integer limit, Integer lastId, String ids, Integer sessionId, String statuses, Integer includeDeleted, String query, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = searchOutboundMessagesCall(page, limit, lastId, ids, sessionId, statuses, includeDeleted, query, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Find messages
     * Find outbound messages by given parameters.
     * @param page Fetch specified results page (optional, default to 1)
     * @param limit How many results to return (optional, default to 10)
     * @param lastId Filter results by ID, selecting all values lesser than the specified ID. Note that \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified (optional)
     * @param ids Find message by ID(s) (optional)
     * @param sessionId Find messages by session ID (optional)
     * @param statuses Find messages by status (optional)
     * @param includeDeleted Search also in deleted messages (optional, default to 0)
     * @param query Find messages by specified search query (optional)
     * @return SearchOutboundMessagesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SearchOutboundMessagesResponse searchOutboundMessages(Integer page, Integer limit, Integer lastId, String ids, Integer sessionId, String statuses, Integer includeDeleted, String query) throws ApiException {
        ApiResponse<SearchOutboundMessagesResponse> resp = searchOutboundMessagesWithHttpInfo(page, limit, lastId, ids, sessionId, statuses, includeDeleted, query);
        return resp.getData();
    }

    /**
     * Find messages
     * Find outbound messages by given parameters.
     * @param page Fetch specified results page (optional, default to 1)
     * @param limit How many results to return (optional, default to 10)
     * @param lastId Filter results by ID, selecting all values lesser than the specified ID. Note that \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified (optional)
     * @param ids Find message by ID(s) (optional)
     * @param sessionId Find messages by session ID (optional)
     * @param statuses Find messages by status (optional)
     * @param includeDeleted Search also in deleted messages (optional, default to 0)
     * @param query Find messages by specified search query (optional)
     * @return ApiResponse&lt;SearchOutboundMessagesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SearchOutboundMessagesResponse> searchOutboundMessagesWithHttpInfo(Integer page, Integer limit, Integer lastId, String ids, Integer sessionId, String statuses, Integer includeDeleted, String query) throws ApiException {
        com.squareup.okhttp.Call call = searchOutboundMessagesValidateBeforeCall(page, limit, lastId, ids, sessionId, statuses, includeDeleted, query, null, null);
        Type localVarReturnType = new TypeToken<SearchOutboundMessagesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Find messages (asynchronously)
     * Find outbound messages by given parameters.
     * @param page Fetch specified results page (optional, default to 1)
     * @param limit How many results to return (optional, default to 10)
     * @param lastId Filter results by ID, selecting all values lesser than the specified ID. Note that \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified (optional)
     * @param ids Find message by ID(s) (optional)
     * @param sessionId Find messages by session ID (optional)
     * @param statuses Find messages by status (optional)
     * @param includeDeleted Search also in deleted messages (optional, default to 0)
     * @param query Find messages by specified search query (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchOutboundMessagesAsync(Integer page, Integer limit, Integer lastId, String ids, Integer sessionId, String statuses, Integer includeDeleted, String query, final ApiCallback<SearchOutboundMessagesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchOutboundMessagesValidateBeforeCall(page, limit, lastId, ids, sessionId, statuses, includeDeleted, query, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SearchOutboundMessagesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for sendMessage
     * @param sendMessageInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call sendMessageCall(SendMessageInputObject sendMessageInputObject, Boolean xIgnoreNullValues, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = sendMessageInputObject;

        // create path and map variables
        String localVarPath = "/api/v2/messages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xIgnoreNullValues != null)
        localVarHeaderParams.put("X-Ignore-Null-Values", apiClient.parameterToString(xIgnoreNullValues));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call sendMessageValidateBeforeCall(SendMessageInputObject sendMessageInputObject, Boolean xIgnoreNullValues, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'sendMessageInputObject' is set
        if (sendMessageInputObject == null) {
            throw new ApiException("Missing the required parameter 'sendMessageInputObject' when calling sendMessage(Async)");
        }
        

        com.squareup.okhttp.Call call = sendMessageCall(sendMessageInputObject, xIgnoreNullValues, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Send message
     * The main entrypoint to send messages. See examples above for the reference.
     * @param sendMessageInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @return SendMessageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SendMessageResponse sendMessage(SendMessageInputObject sendMessageInputObject, Boolean xIgnoreNullValues) throws ApiException {
        ApiResponse<SendMessageResponse> resp = sendMessageWithHttpInfo(sendMessageInputObject, xIgnoreNullValues);
        return resp.getData();
    }

    /**
     * Send message
     * The main entrypoint to send messages. See examples above for the reference.
     * @param sendMessageInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @return ApiResponse&lt;SendMessageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SendMessageResponse> sendMessageWithHttpInfo(SendMessageInputObject sendMessageInputObject, Boolean xIgnoreNullValues) throws ApiException {
        com.squareup.okhttp.Call call = sendMessageValidateBeforeCall(sendMessageInputObject, xIgnoreNullValues, null, null);
        Type localVarReturnType = new TypeToken<SendMessageResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Send message (asynchronously)
     * The main entrypoint to send messages. See examples above for the reference.
     * @param sendMessageInputObject  (required)
     * @param xIgnoreNullValues  (optional, default to true)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sendMessageAsync(SendMessageInputObject sendMessageInputObject, Boolean xIgnoreNullValues, final ApiCallback<SendMessageResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sendMessageValidateBeforeCall(sendMessageInputObject, xIgnoreNullValues, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SendMessageResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for uploadMessageAttachment
     * @param file Attachment. Supports .jpg, .gif, .png, .pdf, .txt, .csv, .doc, .docx, .xls, .xlsx, .ppt, .pptx &amp; .vcf file formats (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call uploadMessageAttachmentCall(File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/messages/attachment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null)
        localVarFormParams.put("file", file);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call uploadMessageAttachmentValidateBeforeCall(File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling uploadMessageAttachment(Async)");
        }
        

        com.squareup.okhttp.Call call = uploadMessageAttachmentCall(file, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Upload message attachment
     * Upload a new file to insert it as a link.
     * @param file Attachment. Supports .jpg, .gif, .png, .pdf, .txt, .csv, .doc, .docx, .xls, .xlsx, .ppt, .pptx &amp; .vcf file formats (required)
     * @return UploadMessageAttachmentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UploadMessageAttachmentResponse uploadMessageAttachment(File file) throws ApiException {
        ApiResponse<UploadMessageAttachmentResponse> resp = uploadMessageAttachmentWithHttpInfo(file);
        return resp.getData();
    }

    /**
     * Upload message attachment
     * Upload a new file to insert it as a link.
     * @param file Attachment. Supports .jpg, .gif, .png, .pdf, .txt, .csv, .doc, .docx, .xls, .xlsx, .ppt, .pptx &amp; .vcf file formats (required)
     * @return ApiResponse&lt;UploadMessageAttachmentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UploadMessageAttachmentResponse> uploadMessageAttachmentWithHttpInfo(File file) throws ApiException {
        com.squareup.okhttp.Call call = uploadMessageAttachmentValidateBeforeCall(file, null, null);
        Type localVarReturnType = new TypeToken<UploadMessageAttachmentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Upload message attachment (asynchronously)
     * Upload a new file to insert it as a link.
     * @param file Attachment. Supports .jpg, .gif, .png, .pdf, .txt, .csv, .doc, .docx, .xls, .xlsx, .ppt, .pptx &amp; .vcf file formats (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call uploadMessageAttachmentAsync(File file, final ApiCallback<UploadMessageAttachmentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = uploadMessageAttachmentValidateBeforeCall(file, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UploadMessageAttachmentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
